### YamlMime:ManagedReference
items:
- uid: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests
  commentId: T:MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests
  id: SalesOrderServiceTests
  parent: MyApp.Sales.Application.Tests.Services
  children:
  - MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.#ctor
  - MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.CreateSalesOrderAsync_CalculatesTotalFromLines
  - MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.CreateSalesOrderAsync_UsesUtcNowIfOrderDateIsDefault
  - MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.CreateSalesOrderAsync_WithNonExistentCustomer_ThrowsInvalidOperationException
  - MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.CreateSalesOrderAsync_WithValidCustomer_CreatesOrder
  - MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.DeleteSalesOrderAsync_CallsRepositoryDeleteWithCorrectId
  - MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.GetSalesOrderByIdAsync_WithExistingId_ReturnsOrderDto
  - MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.GetSalesOrderByIdAsync_WithNonExistentId_ReturnsNull
  - MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.ListSalesOrdersAsync_ReturnsAllOrders
  - MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.UpdateSalesOrderAsync_WithChangedCustomerNotFound_ThrowsInvalidOperationException
  - MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.UpdateSalesOrderAsync_WithChangedCustomer_ValidatesNewCustomer
  - MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.UpdateSalesOrderAsync_WithExistingOrder_UpdatesSuccessfully
  - MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.UpdateSalesOrderAsync_WithNonExistentOrder_ThrowsInvalidOperationException
  langs:
  - csharp
  - vb
  name: SalesOrderServiceTests
  nameWithType: SalesOrderServiceTests
  fullName: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests
  type: Class
  source:
    remote:
      path: src/MyApp.Sales/test/MyApp.Sales.Application.Tests/Services/SalesOrderServiceTests.cs
      branch: copilot/integrate-docfx-documentation
      repo: https://github.com/Ozymandros/ERP.Microservices.git
    id: SalesOrderServiceTests
    path: src/MyApp.Sales/test/MyApp.Sales.Application.Tests/Services/SalesOrderServiceTests.cs
    startLine: 10
  assemblies:
  - MyApp.Sales.Application.Tests
  namespace: MyApp.Sales.Application.Tests.Services
  syntax:
    content: public class SalesOrderServiceTests
    content.vb: Public Class SalesOrderServiceTests
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.#ctor
  commentId: M:MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.#ctor
  id: '#ctor'
  parent: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests
  langs:
  - csharp
  - vb
  name: SalesOrderServiceTests()
  nameWithType: SalesOrderServiceTests.SalesOrderServiceTests()
  fullName: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.SalesOrderServiceTests()
  type: Constructor
  source:
    remote:
      path: src/MyApp.Sales/test/MyApp.Sales.Application.Tests/Services/SalesOrderServiceTests.cs
      branch: copilot/integrate-docfx-documentation
      repo: https://github.com/Ozymandros/ERP.Microservices.git
    id: .ctor
    path: src/MyApp.Sales/test/MyApp.Sales.Application.Tests/Services/SalesOrderServiceTests.cs
    startLine: 17
  assemblies:
  - MyApp.Sales.Application.Tests
  namespace: MyApp.Sales.Application.Tests.Services
  syntax:
    content: public SalesOrderServiceTests()
    content.vb: Public Sub New()
  overload: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.#ctor*
  nameWithType.vb: SalesOrderServiceTests.New()
  fullName.vb: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.New()
  name.vb: New()
- uid: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.GetSalesOrderByIdAsync_WithExistingId_ReturnsOrderDto
  commentId: M:MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.GetSalesOrderByIdAsync_WithExistingId_ReturnsOrderDto
  id: GetSalesOrderByIdAsync_WithExistingId_ReturnsOrderDto
  parent: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests
  langs:
  - csharp
  - vb
  name: GetSalesOrderByIdAsync_WithExistingId_ReturnsOrderDto()
  nameWithType: SalesOrderServiceTests.GetSalesOrderByIdAsync_WithExistingId_ReturnsOrderDto()
  fullName: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.GetSalesOrderByIdAsync_WithExistingId_ReturnsOrderDto()
  type: Method
  source:
    remote:
      path: src/MyApp.Sales/test/MyApp.Sales.Application.Tests/Services/SalesOrderServiceTests.cs
      branch: copilot/integrate-docfx-documentation
      repo: https://github.com/Ozymandros/ERP.Microservices.git
    id: GetSalesOrderByIdAsync_WithExistingId_ReturnsOrderDto
    path: src/MyApp.Sales/test/MyApp.Sales.Application.Tests/Services/SalesOrderServiceTests.cs
    startLine: 31
  assemblies:
  - MyApp.Sales.Application.Tests
  namespace: MyApp.Sales.Application.Tests.Services
  syntax:
    content: >-
      [Fact]

      public Task GetSalesOrderByIdAsync_WithExistingId_ReturnsOrderDto()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Fact>

      Public Function GetSalesOrderByIdAsync_WithExistingId_ReturnsOrderDto() As Task
  overload: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.GetSalesOrderByIdAsync_WithExistingId_ReturnsOrderDto*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
- uid: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.GetSalesOrderByIdAsync_WithNonExistentId_ReturnsNull
  commentId: M:MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.GetSalesOrderByIdAsync_WithNonExistentId_ReturnsNull
  id: GetSalesOrderByIdAsync_WithNonExistentId_ReturnsNull
  parent: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests
  langs:
  - csharp
  - vb
  name: GetSalesOrderByIdAsync_WithNonExistentId_ReturnsNull()
  nameWithType: SalesOrderServiceTests.GetSalesOrderByIdAsync_WithNonExistentId_ReturnsNull()
  fullName: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.GetSalesOrderByIdAsync_WithNonExistentId_ReturnsNull()
  type: Method
  source:
    remote:
      path: src/MyApp.Sales/test/MyApp.Sales.Application.Tests/Services/SalesOrderServiceTests.cs
      branch: copilot/integrate-docfx-documentation
      repo: https://github.com/Ozymandros/ERP.Microservices.git
    id: GetSalesOrderByIdAsync_WithNonExistentId_ReturnsNull
    path: src/MyApp.Sales/test/MyApp.Sales.Application.Tests/Services/SalesOrderServiceTests.cs
    startLine: 64
  assemblies:
  - MyApp.Sales.Application.Tests
  namespace: MyApp.Sales.Application.Tests.Services
  syntax:
    content: >-
      [Fact]

      public Task GetSalesOrderByIdAsync_WithNonExistentId_ReturnsNull()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Fact>

      Public Function GetSalesOrderByIdAsync_WithNonExistentId_ReturnsNull() As Task
  overload: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.GetSalesOrderByIdAsync_WithNonExistentId_ReturnsNull*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
- uid: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.ListSalesOrdersAsync_ReturnsAllOrders
  commentId: M:MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.ListSalesOrdersAsync_ReturnsAllOrders
  id: ListSalesOrdersAsync_ReturnsAllOrders
  parent: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests
  langs:
  - csharp
  - vb
  name: ListSalesOrdersAsync_ReturnsAllOrders()
  nameWithType: SalesOrderServiceTests.ListSalesOrdersAsync_ReturnsAllOrders()
  fullName: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.ListSalesOrdersAsync_ReturnsAllOrders()
  type: Method
  source:
    remote:
      path: src/MyApp.Sales/test/MyApp.Sales.Application.Tests/Services/SalesOrderServiceTests.cs
      branch: copilot/integrate-docfx-documentation
      repo: https://github.com/Ozymandros/ERP.Microservices.git
    id: ListSalesOrdersAsync_ReturnsAllOrders
    path: src/MyApp.Sales/test/MyApp.Sales.Application.Tests/Services/SalesOrderServiceTests.cs
    startLine: 84
  assemblies:
  - MyApp.Sales.Application.Tests
  namespace: MyApp.Sales.Application.Tests.Services
  syntax:
    content: >-
      [Fact]

      public Task ListSalesOrdersAsync_ReturnsAllOrders()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Fact>

      Public Function ListSalesOrdersAsync_ReturnsAllOrders() As Task
  overload: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.ListSalesOrdersAsync_ReturnsAllOrders*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
- uid: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.CreateSalesOrderAsync_WithValidCustomer_CreatesOrder
  commentId: M:MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.CreateSalesOrderAsync_WithValidCustomer_CreatesOrder
  id: CreateSalesOrderAsync_WithValidCustomer_CreatesOrder
  parent: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests
  langs:
  - csharp
  - vb
  name: CreateSalesOrderAsync_WithValidCustomer_CreatesOrder()
  nameWithType: SalesOrderServiceTests.CreateSalesOrderAsync_WithValidCustomer_CreatesOrder()
  fullName: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.CreateSalesOrderAsync_WithValidCustomer_CreatesOrder()
  type: Method
  source:
    remote:
      path: src/MyApp.Sales/test/MyApp.Sales.Application.Tests/Services/SalesOrderServiceTests.cs
      branch: copilot/integrate-docfx-documentation
      repo: https://github.com/Ozymandros/ERP.Microservices.git
    id: CreateSalesOrderAsync_WithValidCustomer_CreatesOrder
    path: src/MyApp.Sales/test/MyApp.Sales.Application.Tests/Services/SalesOrderServiceTests.cs
    startLine: 119
  assemblies:
  - MyApp.Sales.Application.Tests
  namespace: MyApp.Sales.Application.Tests.Services
  syntax:
    content: >-
      [Fact]

      public Task CreateSalesOrderAsync_WithValidCustomer_CreatesOrder()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Fact>

      Public Function CreateSalesOrderAsync_WithValidCustomer_CreatesOrder() As Task
  overload: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.CreateSalesOrderAsync_WithValidCustomer_CreatesOrder*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
- uid: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.CreateSalesOrderAsync_WithNonExistentCustomer_ThrowsInvalidOperationException
  commentId: M:MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.CreateSalesOrderAsync_WithNonExistentCustomer_ThrowsInvalidOperationException
  id: CreateSalesOrderAsync_WithNonExistentCustomer_ThrowsInvalidOperationException
  parent: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests
  langs:
  - csharp
  - vb
  name: CreateSalesOrderAsync_WithNonExistentCustomer_ThrowsInvalidOperationException()
  nameWithType: SalesOrderServiceTests.CreateSalesOrderAsync_WithNonExistentCustomer_ThrowsInvalidOperationException()
  fullName: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.CreateSalesOrderAsync_WithNonExistentCustomer_ThrowsInvalidOperationException()
  type: Method
  source:
    remote:
      path: src/MyApp.Sales/test/MyApp.Sales.Application.Tests/Services/SalesOrderServiceTests.cs
      branch: copilot/integrate-docfx-documentation
      repo: https://github.com/Ozymandros/ERP.Microservices.git
    id: CreateSalesOrderAsync_WithNonExistentCustomer_ThrowsInvalidOperationException
    path: src/MyApp.Sales/test/MyApp.Sales.Application.Tests/Services/SalesOrderServiceTests.cs
    startLine: 173
  assemblies:
  - MyApp.Sales.Application.Tests
  namespace: MyApp.Sales.Application.Tests.Services
  syntax:
    content: >-
      [Fact]

      public Task CreateSalesOrderAsync_WithNonExistentCustomer_ThrowsInvalidOperationException()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Fact>

      Public Function CreateSalesOrderAsync_WithNonExistentCustomer_ThrowsInvalidOperationException() As Task
  overload: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.CreateSalesOrderAsync_WithNonExistentCustomer_ThrowsInvalidOperationException*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
- uid: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.CreateSalesOrderAsync_CalculatesTotalFromLines
  commentId: M:MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.CreateSalesOrderAsync_CalculatesTotalFromLines
  id: CreateSalesOrderAsync_CalculatesTotalFromLines
  parent: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests
  langs:
  - csharp
  - vb
  name: CreateSalesOrderAsync_CalculatesTotalFromLines()
  nameWithType: SalesOrderServiceTests.CreateSalesOrderAsync_CalculatesTotalFromLines()
  fullName: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.CreateSalesOrderAsync_CalculatesTotalFromLines()
  type: Method
  source:
    remote:
      path: src/MyApp.Sales/test/MyApp.Sales.Application.Tests/Services/SalesOrderServiceTests.cs
      branch: copilot/integrate-docfx-documentation
      repo: https://github.com/Ozymandros/ERP.Microservices.git
    id: CreateSalesOrderAsync_CalculatesTotalFromLines
    path: src/MyApp.Sales/test/MyApp.Sales.Application.Tests/Services/SalesOrderServiceTests.cs
    startLine: 195
  assemblies:
  - MyApp.Sales.Application.Tests
  namespace: MyApp.Sales.Application.Tests.Services
  syntax:
    content: >-
      [Fact]

      public Task CreateSalesOrderAsync_CalculatesTotalFromLines()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Fact>

      Public Function CreateSalesOrderAsync_CalculatesTotalFromLines() As Task
  overload: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.CreateSalesOrderAsync_CalculatesTotalFromLines*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
- uid: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.CreateSalesOrderAsync_UsesUtcNowIfOrderDateIsDefault
  commentId: M:MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.CreateSalesOrderAsync_UsesUtcNowIfOrderDateIsDefault
  id: CreateSalesOrderAsync_UsesUtcNowIfOrderDateIsDefault
  parent: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests
  langs:
  - csharp
  - vb
  name: CreateSalesOrderAsync_UsesUtcNowIfOrderDateIsDefault()
  nameWithType: SalesOrderServiceTests.CreateSalesOrderAsync_UsesUtcNowIfOrderDateIsDefault()
  fullName: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.CreateSalesOrderAsync_UsesUtcNowIfOrderDateIsDefault()
  type: Method
  source:
    remote:
      path: src/MyApp.Sales/test/MyApp.Sales.Application.Tests/Services/SalesOrderServiceTests.cs
      branch: copilot/integrate-docfx-documentation
      repo: https://github.com/Ozymandros/ERP.Microservices.git
    id: CreateSalesOrderAsync_UsesUtcNowIfOrderDateIsDefault
    path: src/MyApp.Sales/test/MyApp.Sales.Application.Tests/Services/SalesOrderServiceTests.cs
    startLine: 235
  assemblies:
  - MyApp.Sales.Application.Tests
  namespace: MyApp.Sales.Application.Tests.Services
  syntax:
    content: >-
      [Fact]

      public Task CreateSalesOrderAsync_UsesUtcNowIfOrderDateIsDefault()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Fact>

      Public Function CreateSalesOrderAsync_UsesUtcNowIfOrderDateIsDefault() As Task
  overload: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.CreateSalesOrderAsync_UsesUtcNowIfOrderDateIsDefault*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
- uid: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.UpdateSalesOrderAsync_WithExistingOrder_UpdatesSuccessfully
  commentId: M:MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.UpdateSalesOrderAsync_WithExistingOrder_UpdatesSuccessfully
  id: UpdateSalesOrderAsync_WithExistingOrder_UpdatesSuccessfully
  parent: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests
  langs:
  - csharp
  - vb
  name: UpdateSalesOrderAsync_WithExistingOrder_UpdatesSuccessfully()
  nameWithType: SalesOrderServiceTests.UpdateSalesOrderAsync_WithExistingOrder_UpdatesSuccessfully()
  fullName: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.UpdateSalesOrderAsync_WithExistingOrder_UpdatesSuccessfully()
  type: Method
  source:
    remote:
      path: src/MyApp.Sales/test/MyApp.Sales.Application.Tests/Services/SalesOrderServiceTests.cs
      branch: copilot/integrate-docfx-documentation
      repo: https://github.com/Ozymandros/ERP.Microservices.git
    id: UpdateSalesOrderAsync_WithExistingOrder_UpdatesSuccessfully
    path: src/MyApp.Sales/test/MyApp.Sales.Application.Tests/Services/SalesOrderServiceTests.cs
    startLine: 269
  assemblies:
  - MyApp.Sales.Application.Tests
  namespace: MyApp.Sales.Application.Tests.Services
  syntax:
    content: >-
      [Fact]

      public Task UpdateSalesOrderAsync_WithExistingOrder_UpdatesSuccessfully()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Fact>

      Public Function UpdateSalesOrderAsync_WithExistingOrder_UpdatesSuccessfully() As Task
  overload: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.UpdateSalesOrderAsync_WithExistingOrder_UpdatesSuccessfully*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
- uid: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.UpdateSalesOrderAsync_WithNonExistentOrder_ThrowsInvalidOperationException
  commentId: M:MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.UpdateSalesOrderAsync_WithNonExistentOrder_ThrowsInvalidOperationException
  id: UpdateSalesOrderAsync_WithNonExistentOrder_ThrowsInvalidOperationException
  parent: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests
  langs:
  - csharp
  - vb
  name: UpdateSalesOrderAsync_WithNonExistentOrder_ThrowsInvalidOperationException()
  nameWithType: SalesOrderServiceTests.UpdateSalesOrderAsync_WithNonExistentOrder_ThrowsInvalidOperationException()
  fullName: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.UpdateSalesOrderAsync_WithNonExistentOrder_ThrowsInvalidOperationException()
  type: Method
  source:
    remote:
      path: src/MyApp.Sales/test/MyApp.Sales.Application.Tests/Services/SalesOrderServiceTests.cs
      branch: copilot/integrate-docfx-documentation
      repo: https://github.com/Ozymandros/ERP.Microservices.git
    id: UpdateSalesOrderAsync_WithNonExistentOrder_ThrowsInvalidOperationException
    path: src/MyApp.Sales/test/MyApp.Sales.Application.Tests/Services/SalesOrderServiceTests.cs
    startLine: 321
  assemblies:
  - MyApp.Sales.Application.Tests
  namespace: MyApp.Sales.Application.Tests.Services
  syntax:
    content: >-
      [Fact]

      public Task UpdateSalesOrderAsync_WithNonExistentOrder_ThrowsInvalidOperationException()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Fact>

      Public Function UpdateSalesOrderAsync_WithNonExistentOrder_ThrowsInvalidOperationException() As Task
  overload: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.UpdateSalesOrderAsync_WithNonExistentOrder_ThrowsInvalidOperationException*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
- uid: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.UpdateSalesOrderAsync_WithChangedCustomer_ValidatesNewCustomer
  commentId: M:MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.UpdateSalesOrderAsync_WithChangedCustomer_ValidatesNewCustomer
  id: UpdateSalesOrderAsync_WithChangedCustomer_ValidatesNewCustomer
  parent: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests
  langs:
  - csharp
  - vb
  name: UpdateSalesOrderAsync_WithChangedCustomer_ValidatesNewCustomer()
  nameWithType: SalesOrderServiceTests.UpdateSalesOrderAsync_WithChangedCustomer_ValidatesNewCustomer()
  fullName: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.UpdateSalesOrderAsync_WithChangedCustomer_ValidatesNewCustomer()
  type: Method
  source:
    remote:
      path: src/MyApp.Sales/test/MyApp.Sales.Application.Tests/Services/SalesOrderServiceTests.cs
      branch: copilot/integrate-docfx-documentation
      repo: https://github.com/Ozymandros/ERP.Microservices.git
    id: UpdateSalesOrderAsync_WithChangedCustomer_ValidatesNewCustomer
    path: src/MyApp.Sales/test/MyApp.Sales.Application.Tests/Services/SalesOrderServiceTests.cs
    startLine: 343
  assemblies:
  - MyApp.Sales.Application.Tests
  namespace: MyApp.Sales.Application.Tests.Services
  syntax:
    content: >-
      [Fact]

      public Task UpdateSalesOrderAsync_WithChangedCustomer_ValidatesNewCustomer()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Fact>

      Public Function UpdateSalesOrderAsync_WithChangedCustomer_ValidatesNewCustomer() As Task
  overload: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.UpdateSalesOrderAsync_WithChangedCustomer_ValidatesNewCustomer*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
- uid: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.UpdateSalesOrderAsync_WithChangedCustomerNotFound_ThrowsInvalidOperationException
  commentId: M:MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.UpdateSalesOrderAsync_WithChangedCustomerNotFound_ThrowsInvalidOperationException
  id: UpdateSalesOrderAsync_WithChangedCustomerNotFound_ThrowsInvalidOperationException
  parent: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests
  langs:
  - csharp
  - vb
  name: UpdateSalesOrderAsync_WithChangedCustomerNotFound_ThrowsInvalidOperationException()
  nameWithType: SalesOrderServiceTests.UpdateSalesOrderAsync_WithChangedCustomerNotFound_ThrowsInvalidOperationException()
  fullName: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.UpdateSalesOrderAsync_WithChangedCustomerNotFound_ThrowsInvalidOperationException()
  type: Method
  source:
    remote:
      path: src/MyApp.Sales/test/MyApp.Sales.Application.Tests/Services/SalesOrderServiceTests.cs
      branch: copilot/integrate-docfx-documentation
      repo: https://github.com/Ozymandros/ERP.Microservices.git
    id: UpdateSalesOrderAsync_WithChangedCustomerNotFound_ThrowsInvalidOperationException
    path: src/MyApp.Sales/test/MyApp.Sales.Application.Tests/Services/SalesOrderServiceTests.cs
    startLine: 377
  assemblies:
  - MyApp.Sales.Application.Tests
  namespace: MyApp.Sales.Application.Tests.Services
  syntax:
    content: >-
      [Fact]

      public Task UpdateSalesOrderAsync_WithChangedCustomerNotFound_ThrowsInvalidOperationException()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Fact>

      Public Function UpdateSalesOrderAsync_WithChangedCustomerNotFound_ThrowsInvalidOperationException() As Task
  overload: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.UpdateSalesOrderAsync_WithChangedCustomerNotFound_ThrowsInvalidOperationException*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
- uid: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.DeleteSalesOrderAsync_CallsRepositoryDeleteWithCorrectId
  commentId: M:MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.DeleteSalesOrderAsync_CallsRepositoryDeleteWithCorrectId
  id: DeleteSalesOrderAsync_CallsRepositoryDeleteWithCorrectId
  parent: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests
  langs:
  - csharp
  - vb
  name: DeleteSalesOrderAsync_CallsRepositoryDeleteWithCorrectId()
  nameWithType: SalesOrderServiceTests.DeleteSalesOrderAsync_CallsRepositoryDeleteWithCorrectId()
  fullName: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.DeleteSalesOrderAsync_CallsRepositoryDeleteWithCorrectId()
  type: Method
  source:
    remote:
      path: src/MyApp.Sales/test/MyApp.Sales.Application.Tests/Services/SalesOrderServiceTests.cs
      branch: copilot/integrate-docfx-documentation
      repo: https://github.com/Ozymandros/ERP.Microservices.git
    id: DeleteSalesOrderAsync_CallsRepositoryDeleteWithCorrectId
    path: src/MyApp.Sales/test/MyApp.Sales.Application.Tests/Services/SalesOrderServiceTests.cs
    startLine: 414
  assemblies:
  - MyApp.Sales.Application.Tests
  namespace: MyApp.Sales.Application.Tests.Services
  syntax:
    content: >-
      [Fact]

      public Task DeleteSalesOrderAsync_CallsRepositoryDeleteWithCorrectId()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Fact>

      Public Function DeleteSalesOrderAsync_CallsRepositoryDeleteWithCorrectId() As Task
  overload: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.DeleteSalesOrderAsync_CallsRepositoryDeleteWithCorrectId*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
references:
- uid: MyApp.Sales.Application.Tests.Services
  commentId: N:MyApp.Sales.Application.Tests.Services
  href: MyApp.html
  name: MyApp.Sales.Application.Tests.Services
  nameWithType: MyApp.Sales.Application.Tests.Services
  fullName: MyApp.Sales.Application.Tests.Services
  spec.csharp:
  - uid: MyApp
    name: MyApp
    href: MyApp.html
  - name: .
  - uid: MyApp.Sales
    name: Sales
    href: MyApp.Sales.html
  - name: .
  - uid: MyApp.Sales.Application
    name: Application
    href: MyApp.Sales.Application.html
  - name: .
  - uid: MyApp.Sales.Application.Tests
    name: Tests
    href: MyApp.Sales.Application.Tests.html
  - name: .
  - uid: MyApp.Sales.Application.Tests.Services
    name: Services
    href: MyApp.Sales.Application.Tests.Services.html
  spec.vb:
  - uid: MyApp
    name: MyApp
    href: MyApp.html
  - name: .
  - uid: MyApp.Sales
    name: Sales
    href: MyApp.Sales.html
  - name: .
  - uid: MyApp.Sales.Application
    name: Application
    href: MyApp.Sales.Application.html
  - name: .
  - uid: MyApp.Sales.Application.Tests
    name: Tests
    href: MyApp.Sales.Application.Tests.html
  - name: .
  - uid: MyApp.Sales.Application.Tests.Services
    name: Services
    href: MyApp.Sales.Application.Tests.Services.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.#ctor*
  commentId: Overload:MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.#ctor
  href: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.html#MyApp_Sales_Application_Tests_Services_SalesOrderServiceTests__ctor
  name: SalesOrderServiceTests
  nameWithType: SalesOrderServiceTests.SalesOrderServiceTests
  fullName: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.SalesOrderServiceTests
  nameWithType.vb: SalesOrderServiceTests.New
  fullName.vb: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.New
  name.vb: New
- uid: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.GetSalesOrderByIdAsync_WithExistingId_ReturnsOrderDto*
  commentId: Overload:MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.GetSalesOrderByIdAsync_WithExistingId_ReturnsOrderDto
  href: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.html#MyApp_Sales_Application_Tests_Services_SalesOrderServiceTests_GetSalesOrderByIdAsync_WithExistingId_ReturnsOrderDto
  name: GetSalesOrderByIdAsync_WithExistingId_ReturnsOrderDto
  nameWithType: SalesOrderServiceTests.GetSalesOrderByIdAsync_WithExistingId_ReturnsOrderDto
  fullName: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.GetSalesOrderByIdAsync_WithExistingId_ReturnsOrderDto
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.GetSalesOrderByIdAsync_WithNonExistentId_ReturnsNull*
  commentId: Overload:MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.GetSalesOrderByIdAsync_WithNonExistentId_ReturnsNull
  href: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.html#MyApp_Sales_Application_Tests_Services_SalesOrderServiceTests_GetSalesOrderByIdAsync_WithNonExistentId_ReturnsNull
  name: GetSalesOrderByIdAsync_WithNonExistentId_ReturnsNull
  nameWithType: SalesOrderServiceTests.GetSalesOrderByIdAsync_WithNonExistentId_ReturnsNull
  fullName: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.GetSalesOrderByIdAsync_WithNonExistentId_ReturnsNull
- uid: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.ListSalesOrdersAsync_ReturnsAllOrders*
  commentId: Overload:MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.ListSalesOrdersAsync_ReturnsAllOrders
  href: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.html#MyApp_Sales_Application_Tests_Services_SalesOrderServiceTests_ListSalesOrdersAsync_ReturnsAllOrders
  name: ListSalesOrdersAsync_ReturnsAllOrders
  nameWithType: SalesOrderServiceTests.ListSalesOrdersAsync_ReturnsAllOrders
  fullName: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.ListSalesOrdersAsync_ReturnsAllOrders
- uid: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.CreateSalesOrderAsync_WithValidCustomer_CreatesOrder*
  commentId: Overload:MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.CreateSalesOrderAsync_WithValidCustomer_CreatesOrder
  href: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.html#MyApp_Sales_Application_Tests_Services_SalesOrderServiceTests_CreateSalesOrderAsync_WithValidCustomer_CreatesOrder
  name: CreateSalesOrderAsync_WithValidCustomer_CreatesOrder
  nameWithType: SalesOrderServiceTests.CreateSalesOrderAsync_WithValidCustomer_CreatesOrder
  fullName: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.CreateSalesOrderAsync_WithValidCustomer_CreatesOrder
- uid: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.CreateSalesOrderAsync_WithNonExistentCustomer_ThrowsInvalidOperationException*
  commentId: Overload:MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.CreateSalesOrderAsync_WithNonExistentCustomer_ThrowsInvalidOperationException
  href: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.html#MyApp_Sales_Application_Tests_Services_SalesOrderServiceTests_CreateSalesOrderAsync_WithNonExistentCustomer_ThrowsInvalidOperationException
  name: CreateSalesOrderAsync_WithNonExistentCustomer_ThrowsInvalidOperationException
  nameWithType: SalesOrderServiceTests.CreateSalesOrderAsync_WithNonExistentCustomer_ThrowsInvalidOperationException
  fullName: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.CreateSalesOrderAsync_WithNonExistentCustomer_ThrowsInvalidOperationException
- uid: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.CreateSalesOrderAsync_CalculatesTotalFromLines*
  commentId: Overload:MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.CreateSalesOrderAsync_CalculatesTotalFromLines
  href: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.html#MyApp_Sales_Application_Tests_Services_SalesOrderServiceTests_CreateSalesOrderAsync_CalculatesTotalFromLines
  name: CreateSalesOrderAsync_CalculatesTotalFromLines
  nameWithType: SalesOrderServiceTests.CreateSalesOrderAsync_CalculatesTotalFromLines
  fullName: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.CreateSalesOrderAsync_CalculatesTotalFromLines
- uid: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.CreateSalesOrderAsync_UsesUtcNowIfOrderDateIsDefault*
  commentId: Overload:MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.CreateSalesOrderAsync_UsesUtcNowIfOrderDateIsDefault
  href: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.html#MyApp_Sales_Application_Tests_Services_SalesOrderServiceTests_CreateSalesOrderAsync_UsesUtcNowIfOrderDateIsDefault
  name: CreateSalesOrderAsync_UsesUtcNowIfOrderDateIsDefault
  nameWithType: SalesOrderServiceTests.CreateSalesOrderAsync_UsesUtcNowIfOrderDateIsDefault
  fullName: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.CreateSalesOrderAsync_UsesUtcNowIfOrderDateIsDefault
- uid: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.UpdateSalesOrderAsync_WithExistingOrder_UpdatesSuccessfully*
  commentId: Overload:MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.UpdateSalesOrderAsync_WithExistingOrder_UpdatesSuccessfully
  href: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.html#MyApp_Sales_Application_Tests_Services_SalesOrderServiceTests_UpdateSalesOrderAsync_WithExistingOrder_UpdatesSuccessfully
  name: UpdateSalesOrderAsync_WithExistingOrder_UpdatesSuccessfully
  nameWithType: SalesOrderServiceTests.UpdateSalesOrderAsync_WithExistingOrder_UpdatesSuccessfully
  fullName: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.UpdateSalesOrderAsync_WithExistingOrder_UpdatesSuccessfully
- uid: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.UpdateSalesOrderAsync_WithNonExistentOrder_ThrowsInvalidOperationException*
  commentId: Overload:MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.UpdateSalesOrderAsync_WithNonExistentOrder_ThrowsInvalidOperationException
  href: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.html#MyApp_Sales_Application_Tests_Services_SalesOrderServiceTests_UpdateSalesOrderAsync_WithNonExistentOrder_ThrowsInvalidOperationException
  name: UpdateSalesOrderAsync_WithNonExistentOrder_ThrowsInvalidOperationException
  nameWithType: SalesOrderServiceTests.UpdateSalesOrderAsync_WithNonExistentOrder_ThrowsInvalidOperationException
  fullName: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.UpdateSalesOrderAsync_WithNonExistentOrder_ThrowsInvalidOperationException
- uid: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.UpdateSalesOrderAsync_WithChangedCustomer_ValidatesNewCustomer*
  commentId: Overload:MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.UpdateSalesOrderAsync_WithChangedCustomer_ValidatesNewCustomer
  href: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.html#MyApp_Sales_Application_Tests_Services_SalesOrderServiceTests_UpdateSalesOrderAsync_WithChangedCustomer_ValidatesNewCustomer
  name: UpdateSalesOrderAsync_WithChangedCustomer_ValidatesNewCustomer
  nameWithType: SalesOrderServiceTests.UpdateSalesOrderAsync_WithChangedCustomer_ValidatesNewCustomer
  fullName: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.UpdateSalesOrderAsync_WithChangedCustomer_ValidatesNewCustomer
- uid: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.UpdateSalesOrderAsync_WithChangedCustomerNotFound_ThrowsInvalidOperationException*
  commentId: Overload:MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.UpdateSalesOrderAsync_WithChangedCustomerNotFound_ThrowsInvalidOperationException
  href: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.html#MyApp_Sales_Application_Tests_Services_SalesOrderServiceTests_UpdateSalesOrderAsync_WithChangedCustomerNotFound_ThrowsInvalidOperationException
  name: UpdateSalesOrderAsync_WithChangedCustomerNotFound_ThrowsInvalidOperationException
  nameWithType: SalesOrderServiceTests.UpdateSalesOrderAsync_WithChangedCustomerNotFound_ThrowsInvalidOperationException
  fullName: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.UpdateSalesOrderAsync_WithChangedCustomerNotFound_ThrowsInvalidOperationException
- uid: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.DeleteSalesOrderAsync_CallsRepositoryDeleteWithCorrectId*
  commentId: Overload:MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.DeleteSalesOrderAsync_CallsRepositoryDeleteWithCorrectId
  href: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.html#MyApp_Sales_Application_Tests_Services_SalesOrderServiceTests_DeleteSalesOrderAsync_CallsRepositoryDeleteWithCorrectId
  name: DeleteSalesOrderAsync_CallsRepositoryDeleteWithCorrectId
  nameWithType: SalesOrderServiceTests.DeleteSalesOrderAsync_CallsRepositoryDeleteWithCorrectId
  fullName: MyApp.Sales.Application.Tests.Services.SalesOrderServiceTests.DeleteSalesOrderAsync_CallsRepositoryDeleteWithCorrectId
