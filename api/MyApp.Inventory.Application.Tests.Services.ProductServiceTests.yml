### YamlMime:ManagedReference
items:
- uid: MyApp.Inventory.Application.Tests.Services.ProductServiceTests
  commentId: T:MyApp.Inventory.Application.Tests.Services.ProductServiceTests
  id: ProductServiceTests
  parent: MyApp.Inventory.Application.Tests.Services
  children:
  - MyApp.Inventory.Application.Tests.Services.ProductServiceTests.#ctor
  - MyApp.Inventory.Application.Tests.Services.ProductServiceTests.CreateProductAsync_WithDuplicateSku_ThrowsInvalidOperationException
  - MyApp.Inventory.Application.Tests.Services.ProductServiceTests.CreateProductAsync_WithUniqueSku_CreatesProduct
  - MyApp.Inventory.Application.Tests.Services.ProductServiceTests.DeleteProductAsync_WithExistingProduct_DeletesProduct
  - MyApp.Inventory.Application.Tests.Services.ProductServiceTests.DeleteProductAsync_WithNonExistentProduct_ThrowsKeyNotFoundException
  - MyApp.Inventory.Application.Tests.Services.ProductServiceTests.GetAllProductsAsync_ReturnsAllProducts
  - MyApp.Inventory.Application.Tests.Services.ProductServiceTests.GetLowStockProductsAsync_ReturnsLowStockProducts
  - MyApp.Inventory.Application.Tests.Services.ProductServiceTests.GetProductByIdAsync_WithExistingId_ReturnsProductDto
  - MyApp.Inventory.Application.Tests.Services.ProductServiceTests.GetProductByIdAsync_WithNonExistentId_ReturnsNull
  - MyApp.Inventory.Application.Tests.Services.ProductServiceTests.GetProductBySkuAsync_WithExistingSku_ReturnsProductDto
  - MyApp.Inventory.Application.Tests.Services.ProductServiceTests.GetProductBySkuAsync_WithNonExistentSku_ReturnsNull
  - MyApp.Inventory.Application.Tests.Services.ProductServiceTests.UpdateProductAsync_WithDuplicateSku_ThrowsInvalidOperationException
  - MyApp.Inventory.Application.Tests.Services.ProductServiceTests.UpdateProductAsync_WithExistingProduct_UpdatesSuccessfully
  - MyApp.Inventory.Application.Tests.Services.ProductServiceTests.UpdateProductAsync_WithNonExistentProduct_ThrowsKeyNotFoundException
  langs:
  - csharp
  - vb
  name: ProductServiceTests
  nameWithType: ProductServiceTests
  fullName: MyApp.Inventory.Application.Tests.Services.ProductServiceTests
  type: Class
  source:
    remote:
      path: src/MyApp.Inventory/test/MyApp.Inventory.Application.Tests/Services/ProductServiceTests.cs
      branch: copilot/integrate-docfx-documentation
      repo: https://github.com/Ozymandros/ERP.Microservices.git
    id: ProductServiceTests
    path: src/MyApp.Inventory/test/MyApp.Inventory.Application.Tests/Services/ProductServiceTests.cs
    startLine: 10
  assemblies:
  - MyApp.Inventory.Application.Tests
  namespace: MyApp.Inventory.Application.Tests.Services
  syntax:
    content: public class ProductServiceTests
    content.vb: Public Class ProductServiceTests
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.#ctor
  commentId: M:MyApp.Inventory.Application.Tests.Services.ProductServiceTests.#ctor
  id: '#ctor'
  parent: MyApp.Inventory.Application.Tests.Services.ProductServiceTests
  langs:
  - csharp
  - vb
  name: ProductServiceTests()
  nameWithType: ProductServiceTests.ProductServiceTests()
  fullName: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.ProductServiceTests()
  type: Constructor
  source:
    remote:
      path: src/MyApp.Inventory/test/MyApp.Inventory.Application.Tests/Services/ProductServiceTests.cs
      branch: copilot/integrate-docfx-documentation
      repo: https://github.com/Ozymandros/ERP.Microservices.git
    id: .ctor
    path: src/MyApp.Inventory/test/MyApp.Inventory.Application.Tests/Services/ProductServiceTests.cs
    startLine: 16
  assemblies:
  - MyApp.Inventory.Application.Tests
  namespace: MyApp.Inventory.Application.Tests.Services
  syntax:
    content: public ProductServiceTests()
    content.vb: Public Sub New()
  overload: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.#ctor*
  nameWithType.vb: ProductServiceTests.New()
  fullName.vb: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.New()
  name.vb: New()
- uid: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.GetProductByIdAsync_WithExistingId_ReturnsProductDto
  commentId: M:MyApp.Inventory.Application.Tests.Services.ProductServiceTests.GetProductByIdAsync_WithExistingId_ReturnsProductDto
  id: GetProductByIdAsync_WithExistingId_ReturnsProductDto
  parent: MyApp.Inventory.Application.Tests.Services.ProductServiceTests
  langs:
  - csharp
  - vb
  name: GetProductByIdAsync_WithExistingId_ReturnsProductDto()
  nameWithType: ProductServiceTests.GetProductByIdAsync_WithExistingId_ReturnsProductDto()
  fullName: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.GetProductByIdAsync_WithExistingId_ReturnsProductDto()
  type: Method
  source:
    remote:
      path: src/MyApp.Inventory/test/MyApp.Inventory.Application.Tests/Services/ProductServiceTests.cs
      branch: copilot/integrate-docfx-documentation
      repo: https://github.com/Ozymandros/ERP.Microservices.git
    id: GetProductByIdAsync_WithExistingId_ReturnsProductDto
    path: src/MyApp.Inventory/test/MyApp.Inventory.Application.Tests/Services/ProductServiceTests.cs
    startLine: 28
  assemblies:
  - MyApp.Inventory.Application.Tests
  namespace: MyApp.Inventory.Application.Tests.Services
  syntax:
    content: >-
      [Fact]

      public Task GetProductByIdAsync_WithExistingId_ReturnsProductDto()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Fact>

      Public Function GetProductByIdAsync_WithExistingId_ReturnsProductDto() As Task
  overload: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.GetProductByIdAsync_WithExistingId_ReturnsProductDto*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
- uid: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.GetProductByIdAsync_WithNonExistentId_ReturnsNull
  commentId: M:MyApp.Inventory.Application.Tests.Services.ProductServiceTests.GetProductByIdAsync_WithNonExistentId_ReturnsNull
  id: GetProductByIdAsync_WithNonExistentId_ReturnsNull
  parent: MyApp.Inventory.Application.Tests.Services.ProductServiceTests
  langs:
  - csharp
  - vb
  name: GetProductByIdAsync_WithNonExistentId_ReturnsNull()
  nameWithType: ProductServiceTests.GetProductByIdAsync_WithNonExistentId_ReturnsNull()
  fullName: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.GetProductByIdAsync_WithNonExistentId_ReturnsNull()
  type: Method
  source:
    remote:
      path: src/MyApp.Inventory/test/MyApp.Inventory.Application.Tests/Services/ProductServiceTests.cs
      branch: copilot/integrate-docfx-documentation
      repo: https://github.com/Ozymandros/ERP.Microservices.git
    id: GetProductByIdAsync_WithNonExistentId_ReturnsNull
    path: src/MyApp.Inventory/test/MyApp.Inventory.Application.Tests/Services/ProductServiceTests.cs
    startLine: 48
  assemblies:
  - MyApp.Inventory.Application.Tests
  namespace: MyApp.Inventory.Application.Tests.Services
  syntax:
    content: >-
      [Fact]

      public Task GetProductByIdAsync_WithNonExistentId_ReturnsNull()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Fact>

      Public Function GetProductByIdAsync_WithNonExistentId_ReturnsNull() As Task
  overload: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.GetProductByIdAsync_WithNonExistentId_ReturnsNull*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
- uid: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.GetProductBySkuAsync_WithExistingSku_ReturnsProductDto
  commentId: M:MyApp.Inventory.Application.Tests.Services.ProductServiceTests.GetProductBySkuAsync_WithExistingSku_ReturnsProductDto
  id: GetProductBySkuAsync_WithExistingSku_ReturnsProductDto
  parent: MyApp.Inventory.Application.Tests.Services.ProductServiceTests
  langs:
  - csharp
  - vb
  name: GetProductBySkuAsync_WithExistingSku_ReturnsProductDto()
  nameWithType: ProductServiceTests.GetProductBySkuAsync_WithExistingSku_ReturnsProductDto()
  fullName: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.GetProductBySkuAsync_WithExistingSku_ReturnsProductDto()
  type: Method
  source:
    remote:
      path: src/MyApp.Inventory/test/MyApp.Inventory.Application.Tests/Services/ProductServiceTests.cs
      branch: copilot/integrate-docfx-documentation
      repo: https://github.com/Ozymandros/ERP.Microservices.git
    id: GetProductBySkuAsync_WithExistingSku_ReturnsProductDto
    path: src/MyApp.Inventory/test/MyApp.Inventory.Application.Tests/Services/ProductServiceTests.cs
    startLine: 67
  assemblies:
  - MyApp.Inventory.Application.Tests
  namespace: MyApp.Inventory.Application.Tests.Services
  syntax:
    content: >-
      [Fact]

      public Task GetProductBySkuAsync_WithExistingSku_ReturnsProductDto()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Fact>

      Public Function GetProductBySkuAsync_WithExistingSku_ReturnsProductDto() As Task
  overload: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.GetProductBySkuAsync_WithExistingSku_ReturnsProductDto*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
- uid: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.GetProductBySkuAsync_WithNonExistentSku_ReturnsNull
  commentId: M:MyApp.Inventory.Application.Tests.Services.ProductServiceTests.GetProductBySkuAsync_WithNonExistentSku_ReturnsNull
  id: GetProductBySkuAsync_WithNonExistentSku_ReturnsNull
  parent: MyApp.Inventory.Application.Tests.Services.ProductServiceTests
  langs:
  - csharp
  - vb
  name: GetProductBySkuAsync_WithNonExistentSku_ReturnsNull()
  nameWithType: ProductServiceTests.GetProductBySkuAsync_WithNonExistentSku_ReturnsNull()
  fullName: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.GetProductBySkuAsync_WithNonExistentSku_ReturnsNull()
  type: Method
  source:
    remote:
      path: src/MyApp.Inventory/test/MyApp.Inventory.Application.Tests/Services/ProductServiceTests.cs
      branch: copilot/integrate-docfx-documentation
      repo: https://github.com/Ozymandros/ERP.Microservices.git
    id: GetProductBySkuAsync_WithNonExistentSku_ReturnsNull
    path: src/MyApp.Inventory/test/MyApp.Inventory.Application.Tests/Services/ProductServiceTests.cs
    startLine: 87
  assemblies:
  - MyApp.Inventory.Application.Tests
  namespace: MyApp.Inventory.Application.Tests.Services
  syntax:
    content: >-
      [Fact]

      public Task GetProductBySkuAsync_WithNonExistentSku_ReturnsNull()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Fact>

      Public Function GetProductBySkuAsync_WithNonExistentSku_ReturnsNull() As Task
  overload: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.GetProductBySkuAsync_WithNonExistentSku_ReturnsNull*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
- uid: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.GetAllProductsAsync_ReturnsAllProducts
  commentId: M:MyApp.Inventory.Application.Tests.Services.ProductServiceTests.GetAllProductsAsync_ReturnsAllProducts
  id: GetAllProductsAsync_ReturnsAllProducts
  parent: MyApp.Inventory.Application.Tests.Services.ProductServiceTests
  langs:
  - csharp
  - vb
  name: GetAllProductsAsync_ReturnsAllProducts()
  nameWithType: ProductServiceTests.GetAllProductsAsync_ReturnsAllProducts()
  fullName: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.GetAllProductsAsync_ReturnsAllProducts()
  type: Method
  source:
    remote:
      path: src/MyApp.Inventory/test/MyApp.Inventory.Application.Tests/Services/ProductServiceTests.cs
      branch: copilot/integrate-docfx-documentation
      repo: https://github.com/Ozymandros/ERP.Microservices.git
    id: GetAllProductsAsync_ReturnsAllProducts
    path: src/MyApp.Inventory/test/MyApp.Inventory.Application.Tests/Services/ProductServiceTests.cs
    startLine: 106
  assemblies:
  - MyApp.Inventory.Application.Tests
  namespace: MyApp.Inventory.Application.Tests.Services
  syntax:
    content: >-
      [Fact]

      public Task GetAllProductsAsync_ReturnsAllProducts()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Fact>

      Public Function GetAllProductsAsync_ReturnsAllProducts() As Task
  overload: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.GetAllProductsAsync_ReturnsAllProducts*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
- uid: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.GetLowStockProductsAsync_ReturnsLowStockProducts
  commentId: M:MyApp.Inventory.Application.Tests.Services.ProductServiceTests.GetLowStockProductsAsync_ReturnsLowStockProducts
  id: GetLowStockProductsAsync_ReturnsLowStockProducts
  parent: MyApp.Inventory.Application.Tests.Services.ProductServiceTests
  langs:
  - csharp
  - vb
  name: GetLowStockProductsAsync_ReturnsLowStockProducts()
  nameWithType: ProductServiceTests.GetLowStockProductsAsync_ReturnsLowStockProducts()
  fullName: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.GetLowStockProductsAsync_ReturnsLowStockProducts()
  type: Method
  source:
    remote:
      path: src/MyApp.Inventory/test/MyApp.Inventory.Application.Tests/Services/ProductServiceTests.cs
      branch: copilot/integrate-docfx-documentation
      repo: https://github.com/Ozymandros/ERP.Microservices.git
    id: GetLowStockProductsAsync_ReturnsLowStockProducts
    path: src/MyApp.Inventory/test/MyApp.Inventory.Application.Tests/Services/ProductServiceTests.cs
    startLine: 139
  assemblies:
  - MyApp.Inventory.Application.Tests
  namespace: MyApp.Inventory.Application.Tests.Services
  syntax:
    content: >-
      [Fact]

      public Task GetLowStockProductsAsync_ReturnsLowStockProducts()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Fact>

      Public Function GetLowStockProductsAsync_ReturnsLowStockProducts() As Task
  overload: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.GetLowStockProductsAsync_ReturnsLowStockProducts*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
- uid: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.CreateProductAsync_WithUniqueSku_CreatesProduct
  commentId: M:MyApp.Inventory.Application.Tests.Services.ProductServiceTests.CreateProductAsync_WithUniqueSku_CreatesProduct
  id: CreateProductAsync_WithUniqueSku_CreatesProduct
  parent: MyApp.Inventory.Application.Tests.Services.ProductServiceTests
  langs:
  - csharp
  - vb
  name: CreateProductAsync_WithUniqueSku_CreatesProduct()
  nameWithType: ProductServiceTests.CreateProductAsync_WithUniqueSku_CreatesProduct()
  fullName: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.CreateProductAsync_WithUniqueSku_CreatesProduct()
  type: Method
  source:
    remote:
      path: src/MyApp.Inventory/test/MyApp.Inventory.Application.Tests/Services/ProductServiceTests.cs
      branch: copilot/integrate-docfx-documentation
      repo: https://github.com/Ozymandros/ERP.Microservices.git
    id: CreateProductAsync_WithUniqueSku_CreatesProduct
    path: src/MyApp.Inventory/test/MyApp.Inventory.Application.Tests/Services/ProductServiceTests.cs
    startLine: 168
  assemblies:
  - MyApp.Inventory.Application.Tests
  namespace: MyApp.Inventory.Application.Tests.Services
  syntax:
    content: >-
      [Fact]

      public Task CreateProductAsync_WithUniqueSku_CreatesProduct()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Fact>

      Public Function CreateProductAsync_WithUniqueSku_CreatesProduct() As Task
  overload: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.CreateProductAsync_WithUniqueSku_CreatesProduct*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
- uid: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.CreateProductAsync_WithDuplicateSku_ThrowsInvalidOperationException
  commentId: M:MyApp.Inventory.Application.Tests.Services.ProductServiceTests.CreateProductAsync_WithDuplicateSku_ThrowsInvalidOperationException
  id: CreateProductAsync_WithDuplicateSku_ThrowsInvalidOperationException
  parent: MyApp.Inventory.Application.Tests.Services.ProductServiceTests
  langs:
  - csharp
  - vb
  name: CreateProductAsync_WithDuplicateSku_ThrowsInvalidOperationException()
  nameWithType: ProductServiceTests.CreateProductAsync_WithDuplicateSku_ThrowsInvalidOperationException()
  fullName: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.CreateProductAsync_WithDuplicateSku_ThrowsInvalidOperationException()
  type: Method
  source:
    remote:
      path: src/MyApp.Inventory/test/MyApp.Inventory.Application.Tests/Services/ProductServiceTests.cs
      branch: copilot/integrate-docfx-documentation
      repo: https://github.com/Ozymandros/ERP.Microservices.git
    id: CreateProductAsync_WithDuplicateSku_ThrowsInvalidOperationException
    path: src/MyApp.Inventory/test/MyApp.Inventory.Application.Tests/Services/ProductServiceTests.cs
    startLine: 192
  assemblies:
  - MyApp.Inventory.Application.Tests
  namespace: MyApp.Inventory.Application.Tests.Services
  syntax:
    content: >-
      [Fact]

      public Task CreateProductAsync_WithDuplicateSku_ThrowsInvalidOperationException()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Fact>

      Public Function CreateProductAsync_WithDuplicateSku_ThrowsInvalidOperationException() As Task
  overload: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.CreateProductAsync_WithDuplicateSku_ThrowsInvalidOperationException*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
- uid: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.UpdateProductAsync_WithExistingProduct_UpdatesSuccessfully
  commentId: M:MyApp.Inventory.Application.Tests.Services.ProductServiceTests.UpdateProductAsync_WithExistingProduct_UpdatesSuccessfully
  id: UpdateProductAsync_WithExistingProduct_UpdatesSuccessfully
  parent: MyApp.Inventory.Application.Tests.Services.ProductServiceTests
  langs:
  - csharp
  - vb
  name: UpdateProductAsync_WithExistingProduct_UpdatesSuccessfully()
  nameWithType: ProductServiceTests.UpdateProductAsync_WithExistingProduct_UpdatesSuccessfully()
  fullName: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.UpdateProductAsync_WithExistingProduct_UpdatesSuccessfully()
  type: Method
  source:
    remote:
      path: src/MyApp.Inventory/test/MyApp.Inventory.Application.Tests/Services/ProductServiceTests.cs
      branch: copilot/integrate-docfx-documentation
      repo: https://github.com/Ozymandros/ERP.Microservices.git
    id: UpdateProductAsync_WithExistingProduct_UpdatesSuccessfully
    path: src/MyApp.Inventory/test/MyApp.Inventory.Application.Tests/Services/ProductServiceTests.cs
    startLine: 213
  assemblies:
  - MyApp.Inventory.Application.Tests
  namespace: MyApp.Inventory.Application.Tests.Services
  syntax:
    content: >-
      [Fact]

      public Task UpdateProductAsync_WithExistingProduct_UpdatesSuccessfully()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Fact>

      Public Function UpdateProductAsync_WithExistingProduct_UpdatesSuccessfully() As Task
  overload: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.UpdateProductAsync_WithExistingProduct_UpdatesSuccessfully*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
- uid: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.UpdateProductAsync_WithNonExistentProduct_ThrowsKeyNotFoundException
  commentId: M:MyApp.Inventory.Application.Tests.Services.ProductServiceTests.UpdateProductAsync_WithNonExistentProduct_ThrowsKeyNotFoundException
  id: UpdateProductAsync_WithNonExistentProduct_ThrowsKeyNotFoundException
  parent: MyApp.Inventory.Application.Tests.Services.ProductServiceTests
  langs:
  - csharp
  - vb
  name: UpdateProductAsync_WithNonExistentProduct_ThrowsKeyNotFoundException()
  nameWithType: ProductServiceTests.UpdateProductAsync_WithNonExistentProduct_ThrowsKeyNotFoundException()
  fullName: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.UpdateProductAsync_WithNonExistentProduct_ThrowsKeyNotFoundException()
  type: Method
  source:
    remote:
      path: src/MyApp.Inventory/test/MyApp.Inventory.Application.Tests/Services/ProductServiceTests.cs
      branch: copilot/integrate-docfx-documentation
      repo: https://github.com/Ozymandros/ERP.Microservices.git
    id: UpdateProductAsync_WithNonExistentProduct_ThrowsKeyNotFoundException
    path: src/MyApp.Inventory/test/MyApp.Inventory.Application.Tests/Services/ProductServiceTests.cs
    startLine: 237
  assemblies:
  - MyApp.Inventory.Application.Tests
  namespace: MyApp.Inventory.Application.Tests.Services
  syntax:
    content: >-
      [Fact]

      public Task UpdateProductAsync_WithNonExistentProduct_ThrowsKeyNotFoundException()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Fact>

      Public Function UpdateProductAsync_WithNonExistentProduct_ThrowsKeyNotFoundException() As Task
  overload: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.UpdateProductAsync_WithNonExistentProduct_ThrowsKeyNotFoundException*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
- uid: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.UpdateProductAsync_WithDuplicateSku_ThrowsInvalidOperationException
  commentId: M:MyApp.Inventory.Application.Tests.Services.ProductServiceTests.UpdateProductAsync_WithDuplicateSku_ThrowsInvalidOperationException
  id: UpdateProductAsync_WithDuplicateSku_ThrowsInvalidOperationException
  parent: MyApp.Inventory.Application.Tests.Services.ProductServiceTests
  langs:
  - csharp
  - vb
  name: UpdateProductAsync_WithDuplicateSku_ThrowsInvalidOperationException()
  nameWithType: ProductServiceTests.UpdateProductAsync_WithDuplicateSku_ThrowsInvalidOperationException()
  fullName: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.UpdateProductAsync_WithDuplicateSku_ThrowsInvalidOperationException()
  type: Method
  source:
    remote:
      path: src/MyApp.Inventory/test/MyApp.Inventory.Application.Tests/Services/ProductServiceTests.cs
      branch: copilot/integrate-docfx-documentation
      repo: https://github.com/Ozymandros/ERP.Microservices.git
    id: UpdateProductAsync_WithDuplicateSku_ThrowsInvalidOperationException
    path: src/MyApp.Inventory/test/MyApp.Inventory.Application.Tests/Services/ProductServiceTests.cs
    startLine: 254
  assemblies:
  - MyApp.Inventory.Application.Tests
  namespace: MyApp.Inventory.Application.Tests.Services
  syntax:
    content: >-
      [Fact]

      public Task UpdateProductAsync_WithDuplicateSku_ThrowsInvalidOperationException()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Fact>

      Public Function UpdateProductAsync_WithDuplicateSku_ThrowsInvalidOperationException() As Task
  overload: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.UpdateProductAsync_WithDuplicateSku_ThrowsInvalidOperationException*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
- uid: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.DeleteProductAsync_WithExistingProduct_DeletesProduct
  commentId: M:MyApp.Inventory.Application.Tests.Services.ProductServiceTests.DeleteProductAsync_WithExistingProduct_DeletesProduct
  id: DeleteProductAsync_WithExistingProduct_DeletesProduct
  parent: MyApp.Inventory.Application.Tests.Services.ProductServiceTests
  langs:
  - csharp
  - vb
  name: DeleteProductAsync_WithExistingProduct_DeletesProduct()
  nameWithType: ProductServiceTests.DeleteProductAsync_WithExistingProduct_DeletesProduct()
  fullName: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.DeleteProductAsync_WithExistingProduct_DeletesProduct()
  type: Method
  source:
    remote:
      path: src/MyApp.Inventory/test/MyApp.Inventory.Application.Tests/Services/ProductServiceTests.cs
      branch: copilot/integrate-docfx-documentation
      repo: https://github.com/Ozymandros/ERP.Microservices.git
    id: DeleteProductAsync_WithExistingProduct_DeletesProduct
    path: src/MyApp.Inventory/test/MyApp.Inventory.Application.Tests/Services/ProductServiceTests.cs
    startLine: 278
  assemblies:
  - MyApp.Inventory.Application.Tests
  namespace: MyApp.Inventory.Application.Tests.Services
  syntax:
    content: >-
      [Fact]

      public Task DeleteProductAsync_WithExistingProduct_DeletesProduct()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Fact>

      Public Function DeleteProductAsync_WithExistingProduct_DeletesProduct() As Task
  overload: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.DeleteProductAsync_WithExistingProduct_DeletesProduct*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
- uid: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.DeleteProductAsync_WithNonExistentProduct_ThrowsKeyNotFoundException
  commentId: M:MyApp.Inventory.Application.Tests.Services.ProductServiceTests.DeleteProductAsync_WithNonExistentProduct_ThrowsKeyNotFoundException
  id: DeleteProductAsync_WithNonExistentProduct_ThrowsKeyNotFoundException
  parent: MyApp.Inventory.Application.Tests.Services.ProductServiceTests
  langs:
  - csharp
  - vb
  name: DeleteProductAsync_WithNonExistentProduct_ThrowsKeyNotFoundException()
  nameWithType: ProductServiceTests.DeleteProductAsync_WithNonExistentProduct_ThrowsKeyNotFoundException()
  fullName: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.DeleteProductAsync_WithNonExistentProduct_ThrowsKeyNotFoundException()
  type: Method
  source:
    remote:
      path: src/MyApp.Inventory/test/MyApp.Inventory.Application.Tests/Services/ProductServiceTests.cs
      branch: copilot/integrate-docfx-documentation
      repo: https://github.com/Ozymandros/ERP.Microservices.git
    id: DeleteProductAsync_WithNonExistentProduct_ThrowsKeyNotFoundException
    path: src/MyApp.Inventory/test/MyApp.Inventory.Application.Tests/Services/ProductServiceTests.cs
    startLine: 295
  assemblies:
  - MyApp.Inventory.Application.Tests
  namespace: MyApp.Inventory.Application.Tests.Services
  syntax:
    content: >-
      [Fact]

      public Task DeleteProductAsync_WithNonExistentProduct_ThrowsKeyNotFoundException()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Fact>

      Public Function DeleteProductAsync_WithNonExistentProduct_ThrowsKeyNotFoundException() As Task
  overload: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.DeleteProductAsync_WithNonExistentProduct_ThrowsKeyNotFoundException*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
references:
- uid: MyApp.Inventory.Application.Tests.Services
  commentId: N:MyApp.Inventory.Application.Tests.Services
  href: MyApp.html
  name: MyApp.Inventory.Application.Tests.Services
  nameWithType: MyApp.Inventory.Application.Tests.Services
  fullName: MyApp.Inventory.Application.Tests.Services
  spec.csharp:
  - uid: MyApp
    name: MyApp
    href: MyApp.html
  - name: .
  - uid: MyApp.Inventory
    name: Inventory
    href: MyApp.Inventory.html
  - name: .
  - uid: MyApp.Inventory.Application
    name: Application
    href: MyApp.Inventory.Application.html
  - name: .
  - uid: MyApp.Inventory.Application.Tests
    name: Tests
    href: MyApp.Inventory.Application.Tests.html
  - name: .
  - uid: MyApp.Inventory.Application.Tests.Services
    name: Services
    href: MyApp.Inventory.Application.Tests.Services.html
  spec.vb:
  - uid: MyApp
    name: MyApp
    href: MyApp.html
  - name: .
  - uid: MyApp.Inventory
    name: Inventory
    href: MyApp.Inventory.html
  - name: .
  - uid: MyApp.Inventory.Application
    name: Application
    href: MyApp.Inventory.Application.html
  - name: .
  - uid: MyApp.Inventory.Application.Tests
    name: Tests
    href: MyApp.Inventory.Application.Tests.html
  - name: .
  - uid: MyApp.Inventory.Application.Tests.Services
    name: Services
    href: MyApp.Inventory.Application.Tests.Services.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.#ctor*
  commentId: Overload:MyApp.Inventory.Application.Tests.Services.ProductServiceTests.#ctor
  href: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.html#MyApp_Inventory_Application_Tests_Services_ProductServiceTests__ctor
  name: ProductServiceTests
  nameWithType: ProductServiceTests.ProductServiceTests
  fullName: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.ProductServiceTests
  nameWithType.vb: ProductServiceTests.New
  fullName.vb: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.New
  name.vb: New
- uid: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.GetProductByIdAsync_WithExistingId_ReturnsProductDto*
  commentId: Overload:MyApp.Inventory.Application.Tests.Services.ProductServiceTests.GetProductByIdAsync_WithExistingId_ReturnsProductDto
  href: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.html#MyApp_Inventory_Application_Tests_Services_ProductServiceTests_GetProductByIdAsync_WithExistingId_ReturnsProductDto
  name: GetProductByIdAsync_WithExistingId_ReturnsProductDto
  nameWithType: ProductServiceTests.GetProductByIdAsync_WithExistingId_ReturnsProductDto
  fullName: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.GetProductByIdAsync_WithExistingId_ReturnsProductDto
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.GetProductByIdAsync_WithNonExistentId_ReturnsNull*
  commentId: Overload:MyApp.Inventory.Application.Tests.Services.ProductServiceTests.GetProductByIdAsync_WithNonExistentId_ReturnsNull
  href: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.html#MyApp_Inventory_Application_Tests_Services_ProductServiceTests_GetProductByIdAsync_WithNonExistentId_ReturnsNull
  name: GetProductByIdAsync_WithNonExistentId_ReturnsNull
  nameWithType: ProductServiceTests.GetProductByIdAsync_WithNonExistentId_ReturnsNull
  fullName: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.GetProductByIdAsync_WithNonExistentId_ReturnsNull
- uid: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.GetProductBySkuAsync_WithExistingSku_ReturnsProductDto*
  commentId: Overload:MyApp.Inventory.Application.Tests.Services.ProductServiceTests.GetProductBySkuAsync_WithExistingSku_ReturnsProductDto
  href: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.html#MyApp_Inventory_Application_Tests_Services_ProductServiceTests_GetProductBySkuAsync_WithExistingSku_ReturnsProductDto
  name: GetProductBySkuAsync_WithExistingSku_ReturnsProductDto
  nameWithType: ProductServiceTests.GetProductBySkuAsync_WithExistingSku_ReturnsProductDto
  fullName: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.GetProductBySkuAsync_WithExistingSku_ReturnsProductDto
- uid: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.GetProductBySkuAsync_WithNonExistentSku_ReturnsNull*
  commentId: Overload:MyApp.Inventory.Application.Tests.Services.ProductServiceTests.GetProductBySkuAsync_WithNonExistentSku_ReturnsNull
  href: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.html#MyApp_Inventory_Application_Tests_Services_ProductServiceTests_GetProductBySkuAsync_WithNonExistentSku_ReturnsNull
  name: GetProductBySkuAsync_WithNonExistentSku_ReturnsNull
  nameWithType: ProductServiceTests.GetProductBySkuAsync_WithNonExistentSku_ReturnsNull
  fullName: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.GetProductBySkuAsync_WithNonExistentSku_ReturnsNull
- uid: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.GetAllProductsAsync_ReturnsAllProducts*
  commentId: Overload:MyApp.Inventory.Application.Tests.Services.ProductServiceTests.GetAllProductsAsync_ReturnsAllProducts
  href: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.html#MyApp_Inventory_Application_Tests_Services_ProductServiceTests_GetAllProductsAsync_ReturnsAllProducts
  name: GetAllProductsAsync_ReturnsAllProducts
  nameWithType: ProductServiceTests.GetAllProductsAsync_ReturnsAllProducts
  fullName: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.GetAllProductsAsync_ReturnsAllProducts
- uid: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.GetLowStockProductsAsync_ReturnsLowStockProducts*
  commentId: Overload:MyApp.Inventory.Application.Tests.Services.ProductServiceTests.GetLowStockProductsAsync_ReturnsLowStockProducts
  href: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.html#MyApp_Inventory_Application_Tests_Services_ProductServiceTests_GetLowStockProductsAsync_ReturnsLowStockProducts
  name: GetLowStockProductsAsync_ReturnsLowStockProducts
  nameWithType: ProductServiceTests.GetLowStockProductsAsync_ReturnsLowStockProducts
  fullName: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.GetLowStockProductsAsync_ReturnsLowStockProducts
- uid: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.CreateProductAsync_WithUniqueSku_CreatesProduct*
  commentId: Overload:MyApp.Inventory.Application.Tests.Services.ProductServiceTests.CreateProductAsync_WithUniqueSku_CreatesProduct
  href: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.html#MyApp_Inventory_Application_Tests_Services_ProductServiceTests_CreateProductAsync_WithUniqueSku_CreatesProduct
  name: CreateProductAsync_WithUniqueSku_CreatesProduct
  nameWithType: ProductServiceTests.CreateProductAsync_WithUniqueSku_CreatesProduct
  fullName: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.CreateProductAsync_WithUniqueSku_CreatesProduct
- uid: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.CreateProductAsync_WithDuplicateSku_ThrowsInvalidOperationException*
  commentId: Overload:MyApp.Inventory.Application.Tests.Services.ProductServiceTests.CreateProductAsync_WithDuplicateSku_ThrowsInvalidOperationException
  href: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.html#MyApp_Inventory_Application_Tests_Services_ProductServiceTests_CreateProductAsync_WithDuplicateSku_ThrowsInvalidOperationException
  name: CreateProductAsync_WithDuplicateSku_ThrowsInvalidOperationException
  nameWithType: ProductServiceTests.CreateProductAsync_WithDuplicateSku_ThrowsInvalidOperationException
  fullName: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.CreateProductAsync_WithDuplicateSku_ThrowsInvalidOperationException
- uid: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.UpdateProductAsync_WithExistingProduct_UpdatesSuccessfully*
  commentId: Overload:MyApp.Inventory.Application.Tests.Services.ProductServiceTests.UpdateProductAsync_WithExistingProduct_UpdatesSuccessfully
  href: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.html#MyApp_Inventory_Application_Tests_Services_ProductServiceTests_UpdateProductAsync_WithExistingProduct_UpdatesSuccessfully
  name: UpdateProductAsync_WithExistingProduct_UpdatesSuccessfully
  nameWithType: ProductServiceTests.UpdateProductAsync_WithExistingProduct_UpdatesSuccessfully
  fullName: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.UpdateProductAsync_WithExistingProduct_UpdatesSuccessfully
- uid: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.UpdateProductAsync_WithNonExistentProduct_ThrowsKeyNotFoundException*
  commentId: Overload:MyApp.Inventory.Application.Tests.Services.ProductServiceTests.UpdateProductAsync_WithNonExistentProduct_ThrowsKeyNotFoundException
  href: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.html#MyApp_Inventory_Application_Tests_Services_ProductServiceTests_UpdateProductAsync_WithNonExistentProduct_ThrowsKeyNotFoundException
  name: UpdateProductAsync_WithNonExistentProduct_ThrowsKeyNotFoundException
  nameWithType: ProductServiceTests.UpdateProductAsync_WithNonExistentProduct_ThrowsKeyNotFoundException
  fullName: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.UpdateProductAsync_WithNonExistentProduct_ThrowsKeyNotFoundException
- uid: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.UpdateProductAsync_WithDuplicateSku_ThrowsInvalidOperationException*
  commentId: Overload:MyApp.Inventory.Application.Tests.Services.ProductServiceTests.UpdateProductAsync_WithDuplicateSku_ThrowsInvalidOperationException
  href: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.html#MyApp_Inventory_Application_Tests_Services_ProductServiceTests_UpdateProductAsync_WithDuplicateSku_ThrowsInvalidOperationException
  name: UpdateProductAsync_WithDuplicateSku_ThrowsInvalidOperationException
  nameWithType: ProductServiceTests.UpdateProductAsync_WithDuplicateSku_ThrowsInvalidOperationException
  fullName: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.UpdateProductAsync_WithDuplicateSku_ThrowsInvalidOperationException
- uid: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.DeleteProductAsync_WithExistingProduct_DeletesProduct*
  commentId: Overload:MyApp.Inventory.Application.Tests.Services.ProductServiceTests.DeleteProductAsync_WithExistingProduct_DeletesProduct
  href: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.html#MyApp_Inventory_Application_Tests_Services_ProductServiceTests_DeleteProductAsync_WithExistingProduct_DeletesProduct
  name: DeleteProductAsync_WithExistingProduct_DeletesProduct
  nameWithType: ProductServiceTests.DeleteProductAsync_WithExistingProduct_DeletesProduct
  fullName: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.DeleteProductAsync_WithExistingProduct_DeletesProduct
- uid: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.DeleteProductAsync_WithNonExistentProduct_ThrowsKeyNotFoundException*
  commentId: Overload:MyApp.Inventory.Application.Tests.Services.ProductServiceTests.DeleteProductAsync_WithNonExistentProduct_ThrowsKeyNotFoundException
  href: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.html#MyApp_Inventory_Application_Tests_Services_ProductServiceTests_DeleteProductAsync_WithNonExistentProduct_ThrowsKeyNotFoundException
  name: DeleteProductAsync_WithNonExistentProduct_ThrowsKeyNotFoundException
  nameWithType: ProductServiceTests.DeleteProductAsync_WithNonExistentProduct_ThrowsKeyNotFoundException
  fullName: MyApp.Inventory.Application.Tests.Services.ProductServiceTests.DeleteProductAsync_WithNonExistentProduct_ThrowsKeyNotFoundException
