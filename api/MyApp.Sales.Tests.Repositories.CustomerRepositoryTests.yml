### YamlMime:ManagedReference
items:
- uid: MyApp.Sales.Tests.Repositories.CustomerRepositoryTests
  commentId: T:MyApp.Sales.Tests.Repositories.CustomerRepositoryTests
  id: CustomerRepositoryTests
  parent: MyApp.Sales.Tests.Repositories
  children:
  - MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.#ctor
  - MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.AddAsync_WithValidCustomer_CreatesCustomer
  - MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.DeleteAsync_WithNonExistentId_DoesNotThrowException
  - MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.DeleteAsync_WithValidId_DeletesCustomer
  - MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.GetByIdAsync_IncludesOrders
  - MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.GetByIdAsync_WithNonExistentId_ReturnsNull
  - MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.GetByIdAsync_WithValidId_ReturnsCustomer
  - MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.ListAsync_ReturnsAllCustomers
  - MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.ListAsync_ReturnsEmptyList_WhenNoCustomers
  - MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.UpdateAsync_WithExistingCustomer_UpdatesCustomerData
  langs:
  - csharp
  - vb
  name: CustomerRepositoryTests
  nameWithType: CustomerRepositoryTests
  fullName: MyApp.Sales.Tests.Repositories.CustomerRepositoryTests
  type: Class
  source:
    remote:
      path: src/MyApp.Sales/test/MyApp.Sales.Infrastructure.Tests/Repositories/CustomerRepositoryTests.cs
      branch: copilot/integrate-docfx-documentation
      repo: https://github.com/Ozymandros/ERP.Microservices.git
    id: CustomerRepositoryTests
    path: src/MyApp.Sales/test/MyApp.Sales.Infrastructure.Tests/Repositories/CustomerRepositoryTests.cs
    startLine: 9
  assemblies:
  - MyApp.Sales.Infrastructure.Tests
  namespace: MyApp.Sales.Tests.Repositories
  syntax:
    content: public class CustomerRepositoryTests
    content.vb: Public Class CustomerRepositoryTests
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.#ctor
  commentId: M:MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.#ctor
  id: '#ctor'
  parent: MyApp.Sales.Tests.Repositories.CustomerRepositoryTests
  langs:
  - csharp
  - vb
  name: CustomerRepositoryTests()
  nameWithType: CustomerRepositoryTests.CustomerRepositoryTests()
  fullName: MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.CustomerRepositoryTests()
  type: Constructor
  source:
    remote:
      path: src/MyApp.Sales/test/MyApp.Sales.Infrastructure.Tests/Repositories/CustomerRepositoryTests.cs
      branch: copilot/integrate-docfx-documentation
      repo: https://github.com/Ozymandros/ERP.Microservices.git
    id: .ctor
    path: src/MyApp.Sales/test/MyApp.Sales.Infrastructure.Tests/Repositories/CustomerRepositoryTests.cs
    startLine: 14
  assemblies:
  - MyApp.Sales.Infrastructure.Tests
  namespace: MyApp.Sales.Tests.Repositories
  syntax:
    content: public CustomerRepositoryTests()
    content.vb: Public Sub New()
  overload: MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.#ctor*
  nameWithType.vb: CustomerRepositoryTests.New()
  fullName.vb: MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.New()
  name.vb: New()
- uid: MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.GetByIdAsync_WithValidId_ReturnsCustomer
  commentId: M:MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.GetByIdAsync_WithValidId_ReturnsCustomer
  id: GetByIdAsync_WithValidId_ReturnsCustomer
  parent: MyApp.Sales.Tests.Repositories.CustomerRepositoryTests
  langs:
  - csharp
  - vb
  name: GetByIdAsync_WithValidId_ReturnsCustomer()
  nameWithType: CustomerRepositoryTests.GetByIdAsync_WithValidId_ReturnsCustomer()
  fullName: MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.GetByIdAsync_WithValidId_ReturnsCustomer()
  type: Method
  source:
    remote:
      path: src/MyApp.Sales/test/MyApp.Sales.Infrastructure.Tests/Repositories/CustomerRepositoryTests.cs
      branch: copilot/integrate-docfx-documentation
      repo: https://github.com/Ozymandros/ERP.Microservices.git
    id: GetByIdAsync_WithValidId_ReturnsCustomer
    path: src/MyApp.Sales/test/MyApp.Sales.Infrastructure.Tests/Repositories/CustomerRepositoryTests.cs
    startLine: 38
  assemblies:
  - MyApp.Sales.Infrastructure.Tests
  namespace: MyApp.Sales.Tests.Repositories
  syntax:
    content: >-
      [Fact]

      public Task GetByIdAsync_WithValidId_ReturnsCustomer()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Fact>

      Public Function GetByIdAsync_WithValidId_ReturnsCustomer() As Task
  overload: MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.GetByIdAsync_WithValidId_ReturnsCustomer*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
- uid: MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.GetByIdAsync_WithNonExistentId_ReturnsNull
  commentId: M:MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.GetByIdAsync_WithNonExistentId_ReturnsNull
  id: GetByIdAsync_WithNonExistentId_ReturnsNull
  parent: MyApp.Sales.Tests.Repositories.CustomerRepositoryTests
  langs:
  - csharp
  - vb
  name: GetByIdAsync_WithNonExistentId_ReturnsNull()
  nameWithType: CustomerRepositoryTests.GetByIdAsync_WithNonExistentId_ReturnsNull()
  fullName: MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.GetByIdAsync_WithNonExistentId_ReturnsNull()
  type: Method
  source:
    remote:
      path: src/MyApp.Sales/test/MyApp.Sales.Infrastructure.Tests/Repositories/CustomerRepositoryTests.cs
      branch: copilot/integrate-docfx-documentation
      repo: https://github.com/Ozymandros/ERP.Microservices.git
    id: GetByIdAsync_WithNonExistentId_ReturnsNull
    path: src/MyApp.Sales/test/MyApp.Sales.Infrastructure.Tests/Repositories/CustomerRepositoryTests.cs
    startLine: 54
  assemblies:
  - MyApp.Sales.Infrastructure.Tests
  namespace: MyApp.Sales.Tests.Repositories
  syntax:
    content: >-
      [Fact]

      public Task GetByIdAsync_WithNonExistentId_ReturnsNull()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Fact>

      Public Function GetByIdAsync_WithNonExistentId_ReturnsNull() As Task
  overload: MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.GetByIdAsync_WithNonExistentId_ReturnsNull*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
- uid: MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.GetByIdAsync_IncludesOrders
  commentId: M:MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.GetByIdAsync_IncludesOrders
  id: GetByIdAsync_IncludesOrders
  parent: MyApp.Sales.Tests.Repositories.CustomerRepositoryTests
  langs:
  - csharp
  - vb
  name: GetByIdAsync_IncludesOrders()
  nameWithType: CustomerRepositoryTests.GetByIdAsync_IncludesOrders()
  fullName: MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.GetByIdAsync_IncludesOrders()
  type: Method
  source:
    remote:
      path: src/MyApp.Sales/test/MyApp.Sales.Infrastructure.Tests/Repositories/CustomerRepositoryTests.cs
      branch: copilot/integrate-docfx-documentation
      repo: https://github.com/Ozymandros/ERP.Microservices.git
    id: GetByIdAsync_IncludesOrders
    path: src/MyApp.Sales/test/MyApp.Sales.Infrastructure.Tests/Repositories/CustomerRepositoryTests.cs
    startLine: 67
  assemblies:
  - MyApp.Sales.Infrastructure.Tests
  namespace: MyApp.Sales.Tests.Repositories
  syntax:
    content: >-
      [Fact]

      public Task GetByIdAsync_IncludesOrders()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Fact>

      Public Function GetByIdAsync_IncludesOrders() As Task
  overload: MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.GetByIdAsync_IncludesOrders*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
- uid: MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.ListAsync_ReturnsAllCustomers
  commentId: M:MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.ListAsync_ReturnsAllCustomers
  id: ListAsync_ReturnsAllCustomers
  parent: MyApp.Sales.Tests.Repositories.CustomerRepositoryTests
  langs:
  - csharp
  - vb
  name: ListAsync_ReturnsAllCustomers()
  nameWithType: CustomerRepositoryTests.ListAsync_ReturnsAllCustomers()
  fullName: MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.ListAsync_ReturnsAllCustomers()
  type: Method
  source:
    remote:
      path: src/MyApp.Sales/test/MyApp.Sales.Infrastructure.Tests/Repositories/CustomerRepositoryTests.cs
      branch: copilot/integrate-docfx-documentation
      repo: https://github.com/Ozymandros/ERP.Microservices.git
    id: ListAsync_ReturnsAllCustomers
    path: src/MyApp.Sales/test/MyApp.Sales.Infrastructure.Tests/Repositories/CustomerRepositoryTests.cs
    startLine: 95
  assemblies:
  - MyApp.Sales.Infrastructure.Tests
  namespace: MyApp.Sales.Tests.Repositories
  syntax:
    content: >-
      [Fact]

      public Task ListAsync_ReturnsAllCustomers()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Fact>

      Public Function ListAsync_ReturnsAllCustomers() As Task
  overload: MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.ListAsync_ReturnsAllCustomers*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
- uid: MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.ListAsync_ReturnsEmptyList_WhenNoCustomers
  commentId: M:MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.ListAsync_ReturnsEmptyList_WhenNoCustomers
  id: ListAsync_ReturnsEmptyList_WhenNoCustomers
  parent: MyApp.Sales.Tests.Repositories.CustomerRepositoryTests
  langs:
  - csharp
  - vb
  name: ListAsync_ReturnsEmptyList_WhenNoCustomers()
  nameWithType: CustomerRepositoryTests.ListAsync_ReturnsEmptyList_WhenNoCustomers()
  fullName: MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.ListAsync_ReturnsEmptyList_WhenNoCustomers()
  type: Method
  source:
    remote:
      path: src/MyApp.Sales/test/MyApp.Sales.Infrastructure.Tests/Repositories/CustomerRepositoryTests.cs
      branch: copilot/integrate-docfx-documentation
      repo: https://github.com/Ozymandros/ERP.Microservices.git
    id: ListAsync_ReturnsEmptyList_WhenNoCustomers
    path: src/MyApp.Sales/test/MyApp.Sales.Infrastructure.Tests/Repositories/CustomerRepositoryTests.cs
    startLine: 111
  assemblies:
  - MyApp.Sales.Infrastructure.Tests
  namespace: MyApp.Sales.Tests.Repositories
  syntax:
    content: >-
      [Fact]

      public Task ListAsync_ReturnsEmptyList_WhenNoCustomers()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Fact>

      Public Function ListAsync_ReturnsEmptyList_WhenNoCustomers() As Task
  overload: MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.ListAsync_ReturnsEmptyList_WhenNoCustomers*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
- uid: MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.AddAsync_WithValidCustomer_CreatesCustomer
  commentId: M:MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.AddAsync_WithValidCustomer_CreatesCustomer
  id: AddAsync_WithValidCustomer_CreatesCustomer
  parent: MyApp.Sales.Tests.Repositories.CustomerRepositoryTests
  langs:
  - csharp
  - vb
  name: AddAsync_WithValidCustomer_CreatesCustomer()
  nameWithType: CustomerRepositoryTests.AddAsync_WithValidCustomer_CreatesCustomer()
  fullName: MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.AddAsync_WithValidCustomer_CreatesCustomer()
  type: Method
  source:
    remote:
      path: src/MyApp.Sales/test/MyApp.Sales.Infrastructure.Tests/Repositories/CustomerRepositoryTests.cs
      branch: copilot/integrate-docfx-documentation
      repo: https://github.com/Ozymandros/ERP.Microservices.git
    id: AddAsync_WithValidCustomer_CreatesCustomer
    path: src/MyApp.Sales/test/MyApp.Sales.Infrastructure.Tests/Repositories/CustomerRepositoryTests.cs
    startLine: 130
  assemblies:
  - MyApp.Sales.Infrastructure.Tests
  namespace: MyApp.Sales.Tests.Repositories
  syntax:
    content: >-
      [Fact]

      public Task AddAsync_WithValidCustomer_CreatesCustomer()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Fact>

      Public Function AddAsync_WithValidCustomer_CreatesCustomer() As Task
  overload: MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.AddAsync_WithValidCustomer_CreatesCustomer*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
- uid: MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.UpdateAsync_WithExistingCustomer_UpdatesCustomerData
  commentId: M:MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.UpdateAsync_WithExistingCustomer_UpdatesCustomerData
  id: UpdateAsync_WithExistingCustomer_UpdatesCustomerData
  parent: MyApp.Sales.Tests.Repositories.CustomerRepositoryTests
  langs:
  - csharp
  - vb
  name: UpdateAsync_WithExistingCustomer_UpdatesCustomerData()
  nameWithType: CustomerRepositoryTests.UpdateAsync_WithExistingCustomer_UpdatesCustomerData()
  fullName: MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.UpdateAsync_WithExistingCustomer_UpdatesCustomerData()
  type: Method
  source:
    remote:
      path: src/MyApp.Sales/test/MyApp.Sales.Infrastructure.Tests/Repositories/CustomerRepositoryTests.cs
      branch: copilot/integrate-docfx-documentation
      repo: https://github.com/Ozymandros/ERP.Microservices.git
    id: UpdateAsync_WithExistingCustomer_UpdatesCustomerData
    path: src/MyApp.Sales/test/MyApp.Sales.Infrastructure.Tests/Repositories/CustomerRepositoryTests.cs
    startLine: 157
  assemblies:
  - MyApp.Sales.Infrastructure.Tests
  namespace: MyApp.Sales.Tests.Repositories
  syntax:
    content: >-
      [Fact]

      public Task UpdateAsync_WithExistingCustomer_UpdatesCustomerData()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Fact>

      Public Function UpdateAsync_WithExistingCustomer_UpdatesCustomerData() As Task
  overload: MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.UpdateAsync_WithExistingCustomer_UpdatesCustomerData*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
- uid: MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.DeleteAsync_WithValidId_DeletesCustomer
  commentId: M:MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.DeleteAsync_WithValidId_DeletesCustomer
  id: DeleteAsync_WithValidId_DeletesCustomer
  parent: MyApp.Sales.Tests.Repositories.CustomerRepositoryTests
  langs:
  - csharp
  - vb
  name: DeleteAsync_WithValidId_DeletesCustomer()
  nameWithType: CustomerRepositoryTests.DeleteAsync_WithValidId_DeletesCustomer()
  fullName: MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.DeleteAsync_WithValidId_DeletesCustomer()
  type: Method
  source:
    remote:
      path: src/MyApp.Sales/test/MyApp.Sales.Infrastructure.Tests/Repositories/CustomerRepositoryTests.cs
      branch: copilot/integrate-docfx-documentation
      repo: https://github.com/Ozymandros/ERP.Microservices.git
    id: DeleteAsync_WithValidId_DeletesCustomer
    path: src/MyApp.Sales/test/MyApp.Sales.Infrastructure.Tests/Repositories/CustomerRepositoryTests.cs
    startLine: 179
  assemblies:
  - MyApp.Sales.Infrastructure.Tests
  namespace: MyApp.Sales.Tests.Repositories
  syntax:
    content: >-
      [Fact]

      public Task DeleteAsync_WithValidId_DeletesCustomer()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Fact>

      Public Function DeleteAsync_WithValidId_DeletesCustomer() As Task
  overload: MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.DeleteAsync_WithValidId_DeletesCustomer*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
- uid: MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.DeleteAsync_WithNonExistentId_DoesNotThrowException
  commentId: M:MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.DeleteAsync_WithNonExistentId_DoesNotThrowException
  id: DeleteAsync_WithNonExistentId_DoesNotThrowException
  parent: MyApp.Sales.Tests.Repositories.CustomerRepositoryTests
  langs:
  - csharp
  - vb
  name: DeleteAsync_WithNonExistentId_DoesNotThrowException()
  nameWithType: CustomerRepositoryTests.DeleteAsync_WithNonExistentId_DoesNotThrowException()
  fullName: MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.DeleteAsync_WithNonExistentId_DoesNotThrowException()
  type: Method
  source:
    remote:
      path: src/MyApp.Sales/test/MyApp.Sales.Infrastructure.Tests/Repositories/CustomerRepositoryTests.cs
      branch: copilot/integrate-docfx-documentation
      repo: https://github.com/Ozymandros/ERP.Microservices.git
    id: DeleteAsync_WithNonExistentId_DoesNotThrowException
    path: src/MyApp.Sales/test/MyApp.Sales.Infrastructure.Tests/Repositories/CustomerRepositoryTests.cs
    startLine: 193
  assemblies:
  - MyApp.Sales.Infrastructure.Tests
  namespace: MyApp.Sales.Tests.Repositories
  syntax:
    content: >-
      [Fact]

      public Task DeleteAsync_WithNonExistentId_DoesNotThrowException()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Fact>

      Public Function DeleteAsync_WithNonExistentId_DoesNotThrowException() As Task
  overload: MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.DeleteAsync_WithNonExistentId_DoesNotThrowException*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
references:
- uid: MyApp.Sales.Tests.Repositories
  commentId: N:MyApp.Sales.Tests.Repositories
  href: MyApp.html
  name: MyApp.Sales.Tests.Repositories
  nameWithType: MyApp.Sales.Tests.Repositories
  fullName: MyApp.Sales.Tests.Repositories
  spec.csharp:
  - uid: MyApp
    name: MyApp
    href: MyApp.html
  - name: .
  - uid: MyApp.Sales
    name: Sales
    href: MyApp.Sales.html
  - name: .
  - uid: MyApp.Sales.Tests
    name: Tests
    href: MyApp.Sales.Tests.html
  - name: .
  - uid: MyApp.Sales.Tests.Repositories
    name: Repositories
    href: MyApp.Sales.Tests.Repositories.html
  spec.vb:
  - uid: MyApp
    name: MyApp
    href: MyApp.html
  - name: .
  - uid: MyApp.Sales
    name: Sales
    href: MyApp.Sales.html
  - name: .
  - uid: MyApp.Sales.Tests
    name: Tests
    href: MyApp.Sales.Tests.html
  - name: .
  - uid: MyApp.Sales.Tests.Repositories
    name: Repositories
    href: MyApp.Sales.Tests.Repositories.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.#ctor*
  commentId: Overload:MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.#ctor
  href: MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.html#MyApp_Sales_Tests_Repositories_CustomerRepositoryTests__ctor
  name: CustomerRepositoryTests
  nameWithType: CustomerRepositoryTests.CustomerRepositoryTests
  fullName: MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.CustomerRepositoryTests
  nameWithType.vb: CustomerRepositoryTests.New
  fullName.vb: MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.New
  name.vb: New
- uid: MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.GetByIdAsync_WithValidId_ReturnsCustomer*
  commentId: Overload:MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.GetByIdAsync_WithValidId_ReturnsCustomer
  href: MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.html#MyApp_Sales_Tests_Repositories_CustomerRepositoryTests_GetByIdAsync_WithValidId_ReturnsCustomer
  name: GetByIdAsync_WithValidId_ReturnsCustomer
  nameWithType: CustomerRepositoryTests.GetByIdAsync_WithValidId_ReturnsCustomer
  fullName: MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.GetByIdAsync_WithValidId_ReturnsCustomer
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.GetByIdAsync_WithNonExistentId_ReturnsNull*
  commentId: Overload:MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.GetByIdAsync_WithNonExistentId_ReturnsNull
  href: MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.html#MyApp_Sales_Tests_Repositories_CustomerRepositoryTests_GetByIdAsync_WithNonExistentId_ReturnsNull
  name: GetByIdAsync_WithNonExistentId_ReturnsNull
  nameWithType: CustomerRepositoryTests.GetByIdAsync_WithNonExistentId_ReturnsNull
  fullName: MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.GetByIdAsync_WithNonExistentId_ReturnsNull
- uid: MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.GetByIdAsync_IncludesOrders*
  commentId: Overload:MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.GetByIdAsync_IncludesOrders
  href: MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.html#MyApp_Sales_Tests_Repositories_CustomerRepositoryTests_GetByIdAsync_IncludesOrders
  name: GetByIdAsync_IncludesOrders
  nameWithType: CustomerRepositoryTests.GetByIdAsync_IncludesOrders
  fullName: MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.GetByIdAsync_IncludesOrders
- uid: MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.ListAsync_ReturnsAllCustomers*
  commentId: Overload:MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.ListAsync_ReturnsAllCustomers
  href: MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.html#MyApp_Sales_Tests_Repositories_CustomerRepositoryTests_ListAsync_ReturnsAllCustomers
  name: ListAsync_ReturnsAllCustomers
  nameWithType: CustomerRepositoryTests.ListAsync_ReturnsAllCustomers
  fullName: MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.ListAsync_ReturnsAllCustomers
- uid: MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.ListAsync_ReturnsEmptyList_WhenNoCustomers*
  commentId: Overload:MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.ListAsync_ReturnsEmptyList_WhenNoCustomers
  href: MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.html#MyApp_Sales_Tests_Repositories_CustomerRepositoryTests_ListAsync_ReturnsEmptyList_WhenNoCustomers
  name: ListAsync_ReturnsEmptyList_WhenNoCustomers
  nameWithType: CustomerRepositoryTests.ListAsync_ReturnsEmptyList_WhenNoCustomers
  fullName: MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.ListAsync_ReturnsEmptyList_WhenNoCustomers
- uid: MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.AddAsync_WithValidCustomer_CreatesCustomer*
  commentId: Overload:MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.AddAsync_WithValidCustomer_CreatesCustomer
  href: MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.html#MyApp_Sales_Tests_Repositories_CustomerRepositoryTests_AddAsync_WithValidCustomer_CreatesCustomer
  name: AddAsync_WithValidCustomer_CreatesCustomer
  nameWithType: CustomerRepositoryTests.AddAsync_WithValidCustomer_CreatesCustomer
  fullName: MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.AddAsync_WithValidCustomer_CreatesCustomer
- uid: MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.UpdateAsync_WithExistingCustomer_UpdatesCustomerData*
  commentId: Overload:MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.UpdateAsync_WithExistingCustomer_UpdatesCustomerData
  href: MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.html#MyApp_Sales_Tests_Repositories_CustomerRepositoryTests_UpdateAsync_WithExistingCustomer_UpdatesCustomerData
  name: UpdateAsync_WithExistingCustomer_UpdatesCustomerData
  nameWithType: CustomerRepositoryTests.UpdateAsync_WithExistingCustomer_UpdatesCustomerData
  fullName: MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.UpdateAsync_WithExistingCustomer_UpdatesCustomerData
- uid: MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.DeleteAsync_WithValidId_DeletesCustomer*
  commentId: Overload:MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.DeleteAsync_WithValidId_DeletesCustomer
  href: MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.html#MyApp_Sales_Tests_Repositories_CustomerRepositoryTests_DeleteAsync_WithValidId_DeletesCustomer
  name: DeleteAsync_WithValidId_DeletesCustomer
  nameWithType: CustomerRepositoryTests.DeleteAsync_WithValidId_DeletesCustomer
  fullName: MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.DeleteAsync_WithValidId_DeletesCustomer
- uid: MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.DeleteAsync_WithNonExistentId_DoesNotThrowException*
  commentId: Overload:MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.DeleteAsync_WithNonExistentId_DoesNotThrowException
  href: MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.html#MyApp_Sales_Tests_Repositories_CustomerRepositoryTests_DeleteAsync_WithNonExistentId_DoesNotThrowException
  name: DeleteAsync_WithNonExistentId_DoesNotThrowException
  nameWithType: CustomerRepositoryTests.DeleteAsync_WithNonExistentId_DoesNotThrowException
  fullName: MyApp.Sales.Tests.Repositories.CustomerRepositoryTests.DeleteAsync_WithNonExistentId_DoesNotThrowException
