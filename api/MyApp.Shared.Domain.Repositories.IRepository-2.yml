### YamlMime:ManagedReference
items:
- uid: MyApp.Shared.Domain.Repositories.IRepository`2
  commentId: T:MyApp.Shared.Domain.Repositories.IRepository`2
  id: IRepository`2
  parent: MyApp.Shared.Domain.Repositories
  children:
  - MyApp.Shared.Domain.Repositories.IRepository`2.AddAsync(`0)
  - MyApp.Shared.Domain.Repositories.IRepository`2.DeleteAsync(`0)
  - MyApp.Shared.Domain.Repositories.IRepository`2.GetAllAsync
  - MyApp.Shared.Domain.Repositories.IRepository`2.GetAllPaginatedAsync(System.Int32,System.Int32)
  - MyApp.Shared.Domain.Repositories.IRepository`2.GetByIdAsync(`1)
  - MyApp.Shared.Domain.Repositories.IRepository`2.UpdateAsync(`0)
  langs:
  - csharp
  - vb
  name: IRepository<TEntity, TKey>
  nameWithType: IRepository<TEntity, TKey>
  fullName: MyApp.Shared.Domain.Repositories.IRepository<TEntity, TKey>
  type: Interface
  source:
    remote:
      path: src/MyApp.Shared/MyApp.Shared.Domain/Repositories/IRepository.cs
      branch: copilot/integrate-docfx-documentation
      repo: https://github.com/Ozymandros/ERP.Microservices.git
    id: IRepository
    path: src/MyApp.Shared/MyApp.Shared.Domain/Repositories/IRepository.cs
    startLine: 7
  assemblies:
  - MyApp.Shared.Domain
  namespace: MyApp.Shared.Domain.Repositories
  syntax:
    content: 'public interface IRepository<TEntity, TKey> where TEntity : class'
    typeParameters:
    - id: TEntity
    - id: TKey
    content.vb: Public Interface IRepository(Of TEntity As Class, TKey)
  nameWithType.vb: IRepository(Of TEntity, TKey)
  fullName.vb: MyApp.Shared.Domain.Repositories.IRepository(Of TEntity, TKey)
  name.vb: IRepository(Of TEntity, TKey)
- uid: MyApp.Shared.Domain.Repositories.IRepository`2.GetByIdAsync(`1)
  commentId: M:MyApp.Shared.Domain.Repositories.IRepository`2.GetByIdAsync(`1)
  id: GetByIdAsync(`1)
  parent: MyApp.Shared.Domain.Repositories.IRepository`2
  langs:
  - csharp
  - vb
  name: GetByIdAsync(TKey)
  nameWithType: IRepository<TEntity, TKey>.GetByIdAsync(TKey)
  fullName: MyApp.Shared.Domain.Repositories.IRepository<TEntity, TKey>.GetByIdAsync(TKey)
  type: Method
  source:
    remote:
      path: src/MyApp.Shared/MyApp.Shared.Domain/Repositories/IRepository.cs
      branch: copilot/integrate-docfx-documentation
      repo: https://github.com/Ozymandros/ERP.Microservices.git
    id: GetByIdAsync
    path: src/MyApp.Shared/MyApp.Shared.Domain/Repositories/IRepository.cs
    startLine: 9
  assemblies:
  - MyApp.Shared.Domain
  namespace: MyApp.Shared.Domain.Repositories
  syntax:
    content: Task<TEntity?> GetByIdAsync(TKey id)
    parameters:
    - id: id
      type: '{TKey}'
    return:
      type: System.Threading.Tasks.Task{{TEntity}}
    content.vb: Function GetByIdAsync(id As TKey) As Task(Of TEntity)
  overload: MyApp.Shared.Domain.Repositories.IRepository`2.GetByIdAsync*
  nameWithType.vb: IRepository(Of TEntity, TKey).GetByIdAsync(TKey)
  fullName.vb: MyApp.Shared.Domain.Repositories.IRepository(Of TEntity, TKey).GetByIdAsync(TKey)
- uid: MyApp.Shared.Domain.Repositories.IRepository`2.GetAllAsync
  commentId: M:MyApp.Shared.Domain.Repositories.IRepository`2.GetAllAsync
  id: GetAllAsync
  parent: MyApp.Shared.Domain.Repositories.IRepository`2
  langs:
  - csharp
  - vb
  name: GetAllAsync()
  nameWithType: IRepository<TEntity, TKey>.GetAllAsync()
  fullName: MyApp.Shared.Domain.Repositories.IRepository<TEntity, TKey>.GetAllAsync()
  type: Method
  source:
    remote:
      path: src/MyApp.Shared/MyApp.Shared.Domain/Repositories/IRepository.cs
      branch: copilot/integrate-docfx-documentation
      repo: https://github.com/Ozymandros/ERP.Microservices.git
    id: GetAllAsync
    path: src/MyApp.Shared/MyApp.Shared.Domain/Repositories/IRepository.cs
    startLine: 10
  assemblies:
  - MyApp.Shared.Domain
  namespace: MyApp.Shared.Domain.Repositories
  syntax:
    content: Task<IEnumerable<TEntity>> GetAllAsync()
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{{TEntity}}}
    content.vb: Function GetAllAsync() As Task(Of IEnumerable(Of TEntity))
  overload: MyApp.Shared.Domain.Repositories.IRepository`2.GetAllAsync*
  nameWithType.vb: IRepository(Of TEntity, TKey).GetAllAsync()
  fullName.vb: MyApp.Shared.Domain.Repositories.IRepository(Of TEntity, TKey).GetAllAsync()
- uid: MyApp.Shared.Domain.Repositories.IRepository`2.GetAllPaginatedAsync(System.Int32,System.Int32)
  commentId: M:MyApp.Shared.Domain.Repositories.IRepository`2.GetAllPaginatedAsync(System.Int32,System.Int32)
  id: GetAllPaginatedAsync(System.Int32,System.Int32)
  parent: MyApp.Shared.Domain.Repositories.IRepository`2
  langs:
  - csharp
  - vb
  name: GetAllPaginatedAsync(int, int)
  nameWithType: IRepository<TEntity, TKey>.GetAllPaginatedAsync(int, int)
  fullName: MyApp.Shared.Domain.Repositories.IRepository<TEntity, TKey>.GetAllPaginatedAsync(int, int)
  type: Method
  source:
    remote:
      path: src/MyApp.Shared/MyApp.Shared.Domain/Repositories/IRepository.cs
      branch: copilot/integrate-docfx-documentation
      repo: https://github.com/Ozymandros/ERP.Microservices.git
    id: GetAllPaginatedAsync
    path: src/MyApp.Shared/MyApp.Shared.Domain/Repositories/IRepository.cs
    startLine: 11
  assemblies:
  - MyApp.Shared.Domain
  namespace: MyApp.Shared.Domain.Repositories
  syntax:
    content: Task<PaginatedResult<TEntity>> GetAllPaginatedAsync(int pageNumber, int pageSize)
    parameters:
    - id: pageNumber
      type: System.Int32
    - id: pageSize
      type: System.Int32
    return:
      type: System.Threading.Tasks.Task{MyApp.Shared.Domain.Pagination.PaginatedResult{{TEntity}}}
    content.vb: Function GetAllPaginatedAsync(pageNumber As Integer, pageSize As Integer) As Task(Of PaginatedResult(Of TEntity))
  overload: MyApp.Shared.Domain.Repositories.IRepository`2.GetAllPaginatedAsync*
  nameWithType.vb: IRepository(Of TEntity, TKey).GetAllPaginatedAsync(Integer, Integer)
  fullName.vb: MyApp.Shared.Domain.Repositories.IRepository(Of TEntity, TKey).GetAllPaginatedAsync(Integer, Integer)
  name.vb: GetAllPaginatedAsync(Integer, Integer)
- uid: MyApp.Shared.Domain.Repositories.IRepository`2.AddAsync(`0)
  commentId: M:MyApp.Shared.Domain.Repositories.IRepository`2.AddAsync(`0)
  id: AddAsync(`0)
  parent: MyApp.Shared.Domain.Repositories.IRepository`2
  langs:
  - csharp
  - vb
  name: AddAsync(TEntity)
  nameWithType: IRepository<TEntity, TKey>.AddAsync(TEntity)
  fullName: MyApp.Shared.Domain.Repositories.IRepository<TEntity, TKey>.AddAsync(TEntity)
  type: Method
  source:
    remote:
      path: src/MyApp.Shared/MyApp.Shared.Domain/Repositories/IRepository.cs
      branch: copilot/integrate-docfx-documentation
      repo: https://github.com/Ozymandros/ERP.Microservices.git
    id: AddAsync
    path: src/MyApp.Shared/MyApp.Shared.Domain/Repositories/IRepository.cs
    startLine: 12
  assemblies:
  - MyApp.Shared.Domain
  namespace: MyApp.Shared.Domain.Repositories
  syntax:
    content: Task<TEntity> AddAsync(TEntity entity)
    parameters:
    - id: entity
      type: '{TEntity}'
    return:
      type: System.Threading.Tasks.Task{{TEntity}}
    content.vb: Function AddAsync(entity As TEntity) As Task(Of TEntity)
  overload: MyApp.Shared.Domain.Repositories.IRepository`2.AddAsync*
  nameWithType.vb: IRepository(Of TEntity, TKey).AddAsync(TEntity)
  fullName.vb: MyApp.Shared.Domain.Repositories.IRepository(Of TEntity, TKey).AddAsync(TEntity)
- uid: MyApp.Shared.Domain.Repositories.IRepository`2.UpdateAsync(`0)
  commentId: M:MyApp.Shared.Domain.Repositories.IRepository`2.UpdateAsync(`0)
  id: UpdateAsync(`0)
  parent: MyApp.Shared.Domain.Repositories.IRepository`2
  langs:
  - csharp
  - vb
  name: UpdateAsync(TEntity)
  nameWithType: IRepository<TEntity, TKey>.UpdateAsync(TEntity)
  fullName: MyApp.Shared.Domain.Repositories.IRepository<TEntity, TKey>.UpdateAsync(TEntity)
  type: Method
  source:
    remote:
      path: src/MyApp.Shared/MyApp.Shared.Domain/Repositories/IRepository.cs
      branch: copilot/integrate-docfx-documentation
      repo: https://github.com/Ozymandros/ERP.Microservices.git
    id: UpdateAsync
    path: src/MyApp.Shared/MyApp.Shared.Domain/Repositories/IRepository.cs
    startLine: 13
  assemblies:
  - MyApp.Shared.Domain
  namespace: MyApp.Shared.Domain.Repositories
  syntax:
    content: Task<TEntity> UpdateAsync(TEntity entity)
    parameters:
    - id: entity
      type: '{TEntity}'
    return:
      type: System.Threading.Tasks.Task{{TEntity}}
    content.vb: Function UpdateAsync(entity As TEntity) As Task(Of TEntity)
  overload: MyApp.Shared.Domain.Repositories.IRepository`2.UpdateAsync*
  nameWithType.vb: IRepository(Of TEntity, TKey).UpdateAsync(TEntity)
  fullName.vb: MyApp.Shared.Domain.Repositories.IRepository(Of TEntity, TKey).UpdateAsync(TEntity)
- uid: MyApp.Shared.Domain.Repositories.IRepository`2.DeleteAsync(`0)
  commentId: M:MyApp.Shared.Domain.Repositories.IRepository`2.DeleteAsync(`0)
  id: DeleteAsync(`0)
  parent: MyApp.Shared.Domain.Repositories.IRepository`2
  langs:
  - csharp
  - vb
  name: DeleteAsync(TEntity)
  nameWithType: IRepository<TEntity, TKey>.DeleteAsync(TEntity)
  fullName: MyApp.Shared.Domain.Repositories.IRepository<TEntity, TKey>.DeleteAsync(TEntity)
  type: Method
  source:
    remote:
      path: src/MyApp.Shared/MyApp.Shared.Domain/Repositories/IRepository.cs
      branch: copilot/integrate-docfx-documentation
      repo: https://github.com/Ozymandros/ERP.Microservices.git
    id: DeleteAsync
    path: src/MyApp.Shared/MyApp.Shared.Domain/Repositories/IRepository.cs
    startLine: 14
  assemblies:
  - MyApp.Shared.Domain
  namespace: MyApp.Shared.Domain.Repositories
  syntax:
    content: Task DeleteAsync(TEntity entity)
    parameters:
    - id: entity
      type: '{TEntity}'
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function DeleteAsync(entity As TEntity) As Task
  overload: MyApp.Shared.Domain.Repositories.IRepository`2.DeleteAsync*
  nameWithType.vb: IRepository(Of TEntity, TKey).DeleteAsync(TEntity)
  fullName.vb: MyApp.Shared.Domain.Repositories.IRepository(Of TEntity, TKey).DeleteAsync(TEntity)
references:
- uid: MyApp.Shared.Domain.Repositories
  commentId: N:MyApp.Shared.Domain.Repositories
  href: MyApp.html
  name: MyApp.Shared.Domain.Repositories
  nameWithType: MyApp.Shared.Domain.Repositories
  fullName: MyApp.Shared.Domain.Repositories
  spec.csharp:
  - uid: MyApp
    name: MyApp
    href: MyApp.html
  - name: .
  - uid: MyApp.Shared
    name: Shared
    href: MyApp.Shared.html
  - name: .
  - uid: MyApp.Shared.Domain
    name: Domain
    href: MyApp.Shared.Domain.html
  - name: .
  - uid: MyApp.Shared.Domain.Repositories
    name: Repositories
    href: MyApp.Shared.Domain.Repositories.html
  spec.vb:
  - uid: MyApp
    name: MyApp
    href: MyApp.html
  - name: .
  - uid: MyApp.Shared
    name: Shared
    href: MyApp.Shared.html
  - name: .
  - uid: MyApp.Shared.Domain
    name: Domain
    href: MyApp.Shared.Domain.html
  - name: .
  - uid: MyApp.Shared.Domain.Repositories
    name: Repositories
    href: MyApp.Shared.Domain.Repositories.html
- uid: MyApp.Shared.Domain.Repositories.IRepository`2.GetByIdAsync*
  commentId: Overload:MyApp.Shared.Domain.Repositories.IRepository`2.GetByIdAsync
  href: MyApp.Shared.Domain.Repositories.IRepository-2.html#MyApp_Shared_Domain_Repositories_IRepository_2_GetByIdAsync__1_
  name: GetByIdAsync
  nameWithType: IRepository<TEntity, TKey>.GetByIdAsync
  fullName: MyApp.Shared.Domain.Repositories.IRepository<TEntity, TKey>.GetByIdAsync
  nameWithType.vb: IRepository(Of TEntity, TKey).GetByIdAsync
  fullName.vb: MyApp.Shared.Domain.Repositories.IRepository(Of TEntity, TKey).GetByIdAsync
- uid: '{TKey}'
  commentId: '!:TKey'
  definition: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: System.Threading.Tasks.Task{{TEntity}}
  commentId: T:System.Threading.Tasks.Task{`0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TEntity>
  nameWithType: Task<TEntity>
  fullName: System.Threading.Tasks.Task<TEntity>
  nameWithType.vb: Task(Of TEntity)
  fullName.vb: System.Threading.Tasks.Task(Of TEntity)
  name.vb: Task(Of TEntity)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TEntity
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TEntity
  - name: )
- uid: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: MyApp.Shared.Domain.Repositories.IRepository`2.GetAllAsync*
  commentId: Overload:MyApp.Shared.Domain.Repositories.IRepository`2.GetAllAsync
  href: MyApp.Shared.Domain.Repositories.IRepository-2.html#MyApp_Shared_Domain_Repositories_IRepository_2_GetAllAsync
  name: GetAllAsync
  nameWithType: IRepository<TEntity, TKey>.GetAllAsync
  fullName: MyApp.Shared.Domain.Repositories.IRepository<TEntity, TKey>.GetAllAsync
  nameWithType.vb: IRepository(Of TEntity, TKey).GetAllAsync
  fullName.vb: MyApp.Shared.Domain.Repositories.IRepository(Of TEntity, TKey).GetAllAsync
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{{TEntity}}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{`0}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<IEnumerable<TEntity>>
  nameWithType: Task<IEnumerable<TEntity>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<TEntity>>
  nameWithType.vb: Task(Of IEnumerable(Of TEntity))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IEnumerable(Of TEntity))
  name.vb: Task(Of IEnumerable(Of TEntity))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: TEntity
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: TEntity
  - name: )
  - name: )
- uid: MyApp.Shared.Domain.Repositories.IRepository`2.GetAllPaginatedAsync*
  commentId: Overload:MyApp.Shared.Domain.Repositories.IRepository`2.GetAllPaginatedAsync
  href: MyApp.Shared.Domain.Repositories.IRepository-2.html#MyApp_Shared_Domain_Repositories_IRepository_2_GetAllPaginatedAsync_System_Int32_System_Int32_
  name: GetAllPaginatedAsync
  nameWithType: IRepository<TEntity, TKey>.GetAllPaginatedAsync
  fullName: MyApp.Shared.Domain.Repositories.IRepository<TEntity, TKey>.GetAllPaginatedAsync
  nameWithType.vb: IRepository(Of TEntity, TKey).GetAllPaginatedAsync
  fullName.vb: MyApp.Shared.Domain.Repositories.IRepository(Of TEntity, TKey).GetAllPaginatedAsync
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.Threading.Tasks.Task{MyApp.Shared.Domain.Pagination.PaginatedResult{{TEntity}}}
  commentId: T:System.Threading.Tasks.Task{MyApp.Shared.Domain.Pagination.PaginatedResult{`0}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<PaginatedResult<TEntity>>
  nameWithType: Task<PaginatedResult<TEntity>>
  fullName: System.Threading.Tasks.Task<MyApp.Shared.Domain.Pagination.PaginatedResult<TEntity>>
  nameWithType.vb: Task(Of PaginatedResult(Of TEntity))
  fullName.vb: System.Threading.Tasks.Task(Of MyApp.Shared.Domain.Pagination.PaginatedResult(Of TEntity))
  name.vb: Task(Of PaginatedResult(Of TEntity))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: MyApp.Shared.Domain.Pagination.PaginatedResult`1
    name: PaginatedResult
    href: MyApp.Shared.Domain.Pagination.PaginatedResult-1.html
  - name: <
  - name: TEntity
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: MyApp.Shared.Domain.Pagination.PaginatedResult`1
    name: PaginatedResult
    href: MyApp.Shared.Domain.Pagination.PaginatedResult-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TEntity
  - name: )
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: MyApp.Shared.Domain.Repositories.IRepository`2.AddAsync*
  commentId: Overload:MyApp.Shared.Domain.Repositories.IRepository`2.AddAsync
  href: MyApp.Shared.Domain.Repositories.IRepository-2.html#MyApp_Shared_Domain_Repositories_IRepository_2_AddAsync__0_
  name: AddAsync
  nameWithType: IRepository<TEntity, TKey>.AddAsync
  fullName: MyApp.Shared.Domain.Repositories.IRepository<TEntity, TKey>.AddAsync
  nameWithType.vb: IRepository(Of TEntity, TKey).AddAsync
  fullName.vb: MyApp.Shared.Domain.Repositories.IRepository(Of TEntity, TKey).AddAsync
- uid: '{TEntity}'
  commentId: '!:TEntity'
  definition: TEntity
  name: TEntity
  nameWithType: TEntity
  fullName: TEntity
- uid: TEntity
  name: TEntity
  nameWithType: TEntity
  fullName: TEntity
- uid: MyApp.Shared.Domain.Repositories.IRepository`2.UpdateAsync*
  commentId: Overload:MyApp.Shared.Domain.Repositories.IRepository`2.UpdateAsync
  href: MyApp.Shared.Domain.Repositories.IRepository-2.html#MyApp_Shared_Domain_Repositories_IRepository_2_UpdateAsync__0_
  name: UpdateAsync
  nameWithType: IRepository<TEntity, TKey>.UpdateAsync
  fullName: MyApp.Shared.Domain.Repositories.IRepository<TEntity, TKey>.UpdateAsync
  nameWithType.vb: IRepository(Of TEntity, TKey).UpdateAsync
  fullName.vb: MyApp.Shared.Domain.Repositories.IRepository(Of TEntity, TKey).UpdateAsync
- uid: MyApp.Shared.Domain.Repositories.IRepository`2.DeleteAsync*
  commentId: Overload:MyApp.Shared.Domain.Repositories.IRepository`2.DeleteAsync
  href: MyApp.Shared.Domain.Repositories.IRepository-2.html#MyApp_Shared_Domain_Repositories_IRepository_2_DeleteAsync__0_
  name: DeleteAsync
  nameWithType: IRepository<TEntity, TKey>.DeleteAsync
  fullName: MyApp.Shared.Domain.Repositories.IRepository<TEntity, TKey>.DeleteAsync
  nameWithType.vb: IRepository(Of TEntity, TKey).DeleteAsync
  fullName.vb: MyApp.Shared.Domain.Repositories.IRepository(Of TEntity, TKey).DeleteAsync
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
