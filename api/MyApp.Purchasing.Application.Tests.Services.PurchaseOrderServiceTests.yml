### YamlMime:ManagedReference
items:
- uid: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests
  commentId: T:MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests
  id: PurchaseOrderServiceTests
  parent: MyApp.Purchasing.Application.Tests.Services
  children:
  - MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.#ctor
  - MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.CreatePurchaseOrderAsync_WithNonExistentSupplier_ThrowsKeyNotFoundException
  - MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.CreatePurchaseOrderAsync_WithValidSupplier_CreatesOrder
  - MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.DeletePurchaseOrderAsync_WithExistingOrder_DeletesOrder
  - MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.DeletePurchaseOrderAsync_WithNonExistentOrder_ThrowsKeyNotFoundException
  - MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.GetAllPurchaseOrdersAsync_ReturnsAllOrders
  - MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.GetPurchaseOrderByIdAsync_WithExistingId_ReturnsOrderDto
  - MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.GetPurchaseOrderByIdAsync_WithNonExistentId_ReturnsNull
  - MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.GetPurchaseOrdersByStatusAsync_ReturnsOrdersWithStatus
  - MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.GetPurchaseOrdersBySupplierAsync_ReturnsSupplierOrders
  - MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.UpdatePurchaseOrderAsync_WithChangedSupplier_ValidatesNewSupplier
  - MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.UpdatePurchaseOrderAsync_WithExistingOrder_UpdatesSuccessfully
  - MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.UpdatePurchaseOrderAsync_WithNonExistentOrder_ThrowsKeyNotFoundException
  - MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.UpdatePurchaseOrderStatusAsync_WithExistingOrder_UpdatesStatus
  - MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.UpdatePurchaseOrderStatusAsync_WithNonExistentOrder_ThrowsKeyNotFoundException
  langs:
  - csharp
  - vb
  name: PurchaseOrderServiceTests
  nameWithType: PurchaseOrderServiceTests
  fullName: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests
  type: Class
  source:
    remote:
      path: src/MyApp.Purchasing/test/MyApp.Purchasing.Application.Tests/Services/PurchaseOrderServiceTests.cs
      branch: copilot/integrate-docfx-documentation
      repo: https://github.com/Ozymandros/ERP.Microservices.git
    id: PurchaseOrderServiceTests
    path: src/MyApp.Purchasing/test/MyApp.Purchasing.Application.Tests/Services/PurchaseOrderServiceTests.cs
    startLine: 10
  assemblies:
  - MyApp.Purchasing.Application.Tests
  namespace: MyApp.Purchasing.Application.Tests.Services
  syntax:
    content: public class PurchaseOrderServiceTests
    content.vb: Public Class PurchaseOrderServiceTests
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.#ctor
  commentId: M:MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.#ctor
  id: '#ctor'
  parent: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests
  langs:
  - csharp
  - vb
  name: PurchaseOrderServiceTests()
  nameWithType: PurchaseOrderServiceTests.PurchaseOrderServiceTests()
  fullName: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.PurchaseOrderServiceTests()
  type: Constructor
  source:
    remote:
      path: src/MyApp.Purchasing/test/MyApp.Purchasing.Application.Tests/Services/PurchaseOrderServiceTests.cs
      branch: copilot/integrate-docfx-documentation
      repo: https://github.com/Ozymandros/ERP.Microservices.git
    id: .ctor
    path: src/MyApp.Purchasing/test/MyApp.Purchasing.Application.Tests/Services/PurchaseOrderServiceTests.cs
    startLine: 18
  assemblies:
  - MyApp.Purchasing.Application.Tests
  namespace: MyApp.Purchasing.Application.Tests.Services
  syntax:
    content: public PurchaseOrderServiceTests()
    content.vb: Public Sub New()
  overload: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.#ctor*
  nameWithType.vb: PurchaseOrderServiceTests.New()
  fullName.vb: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.New()
  name.vb: New()
- uid: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.GetPurchaseOrderByIdAsync_WithExistingId_ReturnsOrderDto
  commentId: M:MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.GetPurchaseOrderByIdAsync_WithExistingId_ReturnsOrderDto
  id: GetPurchaseOrderByIdAsync_WithExistingId_ReturnsOrderDto
  parent: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests
  langs:
  - csharp
  - vb
  name: GetPurchaseOrderByIdAsync_WithExistingId_ReturnsOrderDto()
  nameWithType: PurchaseOrderServiceTests.GetPurchaseOrderByIdAsync_WithExistingId_ReturnsOrderDto()
  fullName: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.GetPurchaseOrderByIdAsync_WithExistingId_ReturnsOrderDto()
  type: Method
  source:
    remote:
      path: src/MyApp.Purchasing/test/MyApp.Purchasing.Application.Tests/Services/PurchaseOrderServiceTests.cs
      branch: copilot/integrate-docfx-documentation
      repo: https://github.com/Ozymandros/ERP.Microservices.git
    id: GetPurchaseOrderByIdAsync_WithExistingId_ReturnsOrderDto
    path: src/MyApp.Purchasing/test/MyApp.Purchasing.Application.Tests/Services/PurchaseOrderServiceTests.cs
    startLine: 32
  assemblies:
  - MyApp.Purchasing.Application.Tests
  namespace: MyApp.Purchasing.Application.Tests.Services
  syntax:
    content: >-
      [Fact]

      public Task GetPurchaseOrderByIdAsync_WithExistingId_ReturnsOrderDto()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Fact>

      Public Function GetPurchaseOrderByIdAsync_WithExistingId_ReturnsOrderDto() As Task
  overload: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.GetPurchaseOrderByIdAsync_WithExistingId_ReturnsOrderDto*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
- uid: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.GetPurchaseOrderByIdAsync_WithNonExistentId_ReturnsNull
  commentId: M:MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.GetPurchaseOrderByIdAsync_WithNonExistentId_ReturnsNull
  id: GetPurchaseOrderByIdAsync_WithNonExistentId_ReturnsNull
  parent: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests
  langs:
  - csharp
  - vb
  name: GetPurchaseOrderByIdAsync_WithNonExistentId_ReturnsNull()
  nameWithType: PurchaseOrderServiceTests.GetPurchaseOrderByIdAsync_WithNonExistentId_ReturnsNull()
  fullName: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.GetPurchaseOrderByIdAsync_WithNonExistentId_ReturnsNull()
  type: Method
  source:
    remote:
      path: src/MyApp.Purchasing/test/MyApp.Purchasing.Application.Tests/Services/PurchaseOrderServiceTests.cs
      branch: copilot/integrate-docfx-documentation
      repo: https://github.com/Ozymandros/ERP.Microservices.git
    id: GetPurchaseOrderByIdAsync_WithNonExistentId_ReturnsNull
    path: src/MyApp.Purchasing/test/MyApp.Purchasing.Application.Tests/Services/PurchaseOrderServiceTests.cs
    startLine: 51
  assemblies:
  - MyApp.Purchasing.Application.Tests
  namespace: MyApp.Purchasing.Application.Tests.Services
  syntax:
    content: >-
      [Fact]

      public Task GetPurchaseOrderByIdAsync_WithNonExistentId_ReturnsNull()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Fact>

      Public Function GetPurchaseOrderByIdAsync_WithNonExistentId_ReturnsNull() As Task
  overload: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.GetPurchaseOrderByIdAsync_WithNonExistentId_ReturnsNull*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
- uid: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.GetAllPurchaseOrdersAsync_ReturnsAllOrders
  commentId: M:MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.GetAllPurchaseOrdersAsync_ReturnsAllOrders
  id: GetAllPurchaseOrdersAsync_ReturnsAllOrders
  parent: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests
  langs:
  - csharp
  - vb
  name: GetAllPurchaseOrdersAsync_ReturnsAllOrders()
  nameWithType: PurchaseOrderServiceTests.GetAllPurchaseOrdersAsync_ReturnsAllOrders()
  fullName: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.GetAllPurchaseOrdersAsync_ReturnsAllOrders()
  type: Method
  source:
    remote:
      path: src/MyApp.Purchasing/test/MyApp.Purchasing.Application.Tests/Services/PurchaseOrderServiceTests.cs
      branch: copilot/integrate-docfx-documentation
      repo: https://github.com/Ozymandros/ERP.Microservices.git
    id: GetAllPurchaseOrdersAsync_ReturnsAllOrders
    path: src/MyApp.Purchasing/test/MyApp.Purchasing.Application.Tests/Services/PurchaseOrderServiceTests.cs
    startLine: 65
  assemblies:
  - MyApp.Purchasing.Application.Tests
  namespace: MyApp.Purchasing.Application.Tests.Services
  syntax:
    content: >-
      [Fact]

      public Task GetAllPurchaseOrdersAsync_ReturnsAllOrders()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Fact>

      Public Function GetAllPurchaseOrdersAsync_ReturnsAllOrders() As Task
  overload: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.GetAllPurchaseOrdersAsync_ReturnsAllOrders*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
- uid: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.GetPurchaseOrdersBySupplierAsync_ReturnsSupplierOrders
  commentId: M:MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.GetPurchaseOrdersBySupplierAsync_ReturnsSupplierOrders
  id: GetPurchaseOrdersBySupplierAsync_ReturnsSupplierOrders
  parent: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests
  langs:
  - csharp
  - vb
  name: GetPurchaseOrdersBySupplierAsync_ReturnsSupplierOrders()
  nameWithType: PurchaseOrderServiceTests.GetPurchaseOrdersBySupplierAsync_ReturnsSupplierOrders()
  fullName: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.GetPurchaseOrdersBySupplierAsync_ReturnsSupplierOrders()
  type: Method
  source:
    remote:
      path: src/MyApp.Purchasing/test/MyApp.Purchasing.Application.Tests/Services/PurchaseOrderServiceTests.cs
      branch: copilot/integrate-docfx-documentation
      repo: https://github.com/Ozymandros/ERP.Microservices.git
    id: GetPurchaseOrdersBySupplierAsync_ReturnsSupplierOrders
    path: src/MyApp.Purchasing/test/MyApp.Purchasing.Application.Tests/Services/PurchaseOrderServiceTests.cs
    startLine: 90
  assemblies:
  - MyApp.Purchasing.Application.Tests
  namespace: MyApp.Purchasing.Application.Tests.Services
  syntax:
    content: >-
      [Fact]

      public Task GetPurchaseOrdersBySupplierAsync_ReturnsSupplierOrders()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Fact>

      Public Function GetPurchaseOrdersBySupplierAsync_ReturnsSupplierOrders() As Task
  overload: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.GetPurchaseOrdersBySupplierAsync_ReturnsSupplierOrders*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
- uid: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.GetPurchaseOrdersByStatusAsync_ReturnsOrdersWithStatus
  commentId: M:MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.GetPurchaseOrdersByStatusAsync_ReturnsOrdersWithStatus
  id: GetPurchaseOrdersByStatusAsync_ReturnsOrdersWithStatus
  parent: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests
  langs:
  - csharp
  - vb
  name: GetPurchaseOrdersByStatusAsync_ReturnsOrdersWithStatus()
  nameWithType: PurchaseOrderServiceTests.GetPurchaseOrdersByStatusAsync_ReturnsOrdersWithStatus()
  fullName: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.GetPurchaseOrdersByStatusAsync_ReturnsOrdersWithStatus()
  type: Method
  source:
    remote:
      path: src/MyApp.Purchasing/test/MyApp.Purchasing.Application.Tests/Services/PurchaseOrderServiceTests.cs
      branch: copilot/integrate-docfx-documentation
      repo: https://github.com/Ozymandros/ERP.Microservices.git
    id: GetPurchaseOrdersByStatusAsync_ReturnsOrdersWithStatus
    path: src/MyApp.Purchasing/test/MyApp.Purchasing.Application.Tests/Services/PurchaseOrderServiceTests.cs
    startLine: 114
  assemblies:
  - MyApp.Purchasing.Application.Tests
  namespace: MyApp.Purchasing.Application.Tests.Services
  syntax:
    content: >-
      [Fact]

      public Task GetPurchaseOrdersByStatusAsync_ReturnsOrdersWithStatus()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Fact>

      Public Function GetPurchaseOrdersByStatusAsync_ReturnsOrdersWithStatus() As Task
  overload: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.GetPurchaseOrdersByStatusAsync_ReturnsOrdersWithStatus*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
- uid: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.CreatePurchaseOrderAsync_WithValidSupplier_CreatesOrder
  commentId: M:MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.CreatePurchaseOrderAsync_WithValidSupplier_CreatesOrder
  id: CreatePurchaseOrderAsync_WithValidSupplier_CreatesOrder
  parent: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests
  langs:
  - csharp
  - vb
  name: CreatePurchaseOrderAsync_WithValidSupplier_CreatesOrder()
  nameWithType: PurchaseOrderServiceTests.CreatePurchaseOrderAsync_WithValidSupplier_CreatesOrder()
  fullName: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.CreatePurchaseOrderAsync_WithValidSupplier_CreatesOrder()
  type: Method
  source:
    remote:
      path: src/MyApp.Purchasing/test/MyApp.Purchasing.Application.Tests/Services/PurchaseOrderServiceTests.cs
      branch: copilot/integrate-docfx-documentation
      repo: https://github.com/Ozymandros/ERP.Microservices.git
    id: CreatePurchaseOrderAsync_WithValidSupplier_CreatesOrder
    path: src/MyApp.Purchasing/test/MyApp.Purchasing.Application.Tests/Services/PurchaseOrderServiceTests.cs
    startLine: 138
  assemblies:
  - MyApp.Purchasing.Application.Tests
  namespace: MyApp.Purchasing.Application.Tests.Services
  syntax:
    content: >-
      [Fact]

      public Task CreatePurchaseOrderAsync_WithValidSupplier_CreatesOrder()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Fact>

      Public Function CreatePurchaseOrderAsync_WithValidSupplier_CreatesOrder() As Task
  overload: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.CreatePurchaseOrderAsync_WithValidSupplier_CreatesOrder*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
- uid: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.CreatePurchaseOrderAsync_WithNonExistentSupplier_ThrowsKeyNotFoundException
  commentId: M:MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.CreatePurchaseOrderAsync_WithNonExistentSupplier_ThrowsKeyNotFoundException
  id: CreatePurchaseOrderAsync_WithNonExistentSupplier_ThrowsKeyNotFoundException
  parent: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests
  langs:
  - csharp
  - vb
  name: CreatePurchaseOrderAsync_WithNonExistentSupplier_ThrowsKeyNotFoundException()
  nameWithType: PurchaseOrderServiceTests.CreatePurchaseOrderAsync_WithNonExistentSupplier_ThrowsKeyNotFoundException()
  fullName: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.CreatePurchaseOrderAsync_WithNonExistentSupplier_ThrowsKeyNotFoundException()
  type: Method
  source:
    remote:
      path: src/MyApp.Purchasing/test/MyApp.Purchasing.Application.Tests/Services/PurchaseOrderServiceTests.cs
      branch: copilot/integrate-docfx-documentation
      repo: https://github.com/Ozymandros/ERP.Microservices.git
    id: CreatePurchaseOrderAsync_WithNonExistentSupplier_ThrowsKeyNotFoundException
    path: src/MyApp.Purchasing/test/MyApp.Purchasing.Application.Tests/Services/PurchaseOrderServiceTests.cs
    startLine: 174
  assemblies:
  - MyApp.Purchasing.Application.Tests
  namespace: MyApp.Purchasing.Application.Tests.Services
  syntax:
    content: >-
      [Fact]

      public Task CreatePurchaseOrderAsync_WithNonExistentSupplier_ThrowsKeyNotFoundException()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Fact>

      Public Function CreatePurchaseOrderAsync_WithNonExistentSupplier_ThrowsKeyNotFoundException() As Task
  overload: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.CreatePurchaseOrderAsync_WithNonExistentSupplier_ThrowsKeyNotFoundException*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
- uid: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.UpdatePurchaseOrderAsync_WithExistingOrder_UpdatesSuccessfully
  commentId: M:MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.UpdatePurchaseOrderAsync_WithExistingOrder_UpdatesSuccessfully
  id: UpdatePurchaseOrderAsync_WithExistingOrder_UpdatesSuccessfully
  parent: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests
  langs:
  - csharp
  - vb
  name: UpdatePurchaseOrderAsync_WithExistingOrder_UpdatesSuccessfully()
  nameWithType: PurchaseOrderServiceTests.UpdatePurchaseOrderAsync_WithExistingOrder_UpdatesSuccessfully()
  fullName: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.UpdatePurchaseOrderAsync_WithExistingOrder_UpdatesSuccessfully()
  type: Method
  source:
    remote:
      path: src/MyApp.Purchasing/test/MyApp.Purchasing.Application.Tests/Services/PurchaseOrderServiceTests.cs
      branch: copilot/integrate-docfx-documentation
      repo: https://github.com/Ozymandros/ERP.Microservices.git
    id: UpdatePurchaseOrderAsync_WithExistingOrder_UpdatesSuccessfully
    path: src/MyApp.Purchasing/test/MyApp.Purchasing.Application.Tests/Services/PurchaseOrderServiceTests.cs
    startLine: 191
  assemblies:
  - MyApp.Purchasing.Application.Tests
  namespace: MyApp.Purchasing.Application.Tests.Services
  syntax:
    content: >-
      [Fact]

      public Task UpdatePurchaseOrderAsync_WithExistingOrder_UpdatesSuccessfully()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Fact>

      Public Function UpdatePurchaseOrderAsync_WithExistingOrder_UpdatesSuccessfully() As Task
  overload: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.UpdatePurchaseOrderAsync_WithExistingOrder_UpdatesSuccessfully*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
- uid: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.UpdatePurchaseOrderAsync_WithNonExistentOrder_ThrowsKeyNotFoundException
  commentId: M:MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.UpdatePurchaseOrderAsync_WithNonExistentOrder_ThrowsKeyNotFoundException
  id: UpdatePurchaseOrderAsync_WithNonExistentOrder_ThrowsKeyNotFoundException
  parent: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests
  langs:
  - csharp
  - vb
  name: UpdatePurchaseOrderAsync_WithNonExistentOrder_ThrowsKeyNotFoundException()
  nameWithType: PurchaseOrderServiceTests.UpdatePurchaseOrderAsync_WithNonExistentOrder_ThrowsKeyNotFoundException()
  fullName: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.UpdatePurchaseOrderAsync_WithNonExistentOrder_ThrowsKeyNotFoundException()
  type: Method
  source:
    remote:
      path: src/MyApp.Purchasing/test/MyApp.Purchasing.Application.Tests/Services/PurchaseOrderServiceTests.cs
      branch: copilot/integrate-docfx-documentation
      repo: https://github.com/Ozymandros/ERP.Microservices.git
    id: UpdatePurchaseOrderAsync_WithNonExistentOrder_ThrowsKeyNotFoundException
    path: src/MyApp.Purchasing/test/MyApp.Purchasing.Application.Tests/Services/PurchaseOrderServiceTests.cs
    startLine: 228
  assemblies:
  - MyApp.Purchasing.Application.Tests
  namespace: MyApp.Purchasing.Application.Tests.Services
  syntax:
    content: >-
      [Fact]

      public Task UpdatePurchaseOrderAsync_WithNonExistentOrder_ThrowsKeyNotFoundException()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Fact>

      Public Function UpdatePurchaseOrderAsync_WithNonExistentOrder_ThrowsKeyNotFoundException() As Task
  overload: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.UpdatePurchaseOrderAsync_WithNonExistentOrder_ThrowsKeyNotFoundException*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
- uid: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.UpdatePurchaseOrderAsync_WithChangedSupplier_ValidatesNewSupplier
  commentId: M:MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.UpdatePurchaseOrderAsync_WithChangedSupplier_ValidatesNewSupplier
  id: UpdatePurchaseOrderAsync_WithChangedSupplier_ValidatesNewSupplier
  parent: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests
  langs:
  - csharp
  - vb
  name: UpdatePurchaseOrderAsync_WithChangedSupplier_ValidatesNewSupplier()
  nameWithType: PurchaseOrderServiceTests.UpdatePurchaseOrderAsync_WithChangedSupplier_ValidatesNewSupplier()
  fullName: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.UpdatePurchaseOrderAsync_WithChangedSupplier_ValidatesNewSupplier()
  type: Method
  source:
    remote:
      path: src/MyApp.Purchasing/test/MyApp.Purchasing.Application.Tests/Services/PurchaseOrderServiceTests.cs
      branch: copilot/integrate-docfx-documentation
      repo: https://github.com/Ozymandros/ERP.Microservices.git
    id: UpdatePurchaseOrderAsync_WithChangedSupplier_ValidatesNewSupplier
    path: src/MyApp.Purchasing/test/MyApp.Purchasing.Application.Tests/Services/PurchaseOrderServiceTests.cs
    startLine: 245
  assemblies:
  - MyApp.Purchasing.Application.Tests
  namespace: MyApp.Purchasing.Application.Tests.Services
  syntax:
    content: >-
      [Fact]

      public Task UpdatePurchaseOrderAsync_WithChangedSupplier_ValidatesNewSupplier()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Fact>

      Public Function UpdatePurchaseOrderAsync_WithChangedSupplier_ValidatesNewSupplier() As Task
  overload: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.UpdatePurchaseOrderAsync_WithChangedSupplier_ValidatesNewSupplier*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
- uid: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.UpdatePurchaseOrderStatusAsync_WithExistingOrder_UpdatesStatus
  commentId: M:MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.UpdatePurchaseOrderStatusAsync_WithExistingOrder_UpdatesStatus
  id: UpdatePurchaseOrderStatusAsync_WithExistingOrder_UpdatesStatus
  parent: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests
  langs:
  - csharp
  - vb
  name: UpdatePurchaseOrderStatusAsync_WithExistingOrder_UpdatesStatus()
  nameWithType: PurchaseOrderServiceTests.UpdatePurchaseOrderStatusAsync_WithExistingOrder_UpdatesStatus()
  fullName: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.UpdatePurchaseOrderStatusAsync_WithExistingOrder_UpdatesStatus()
  type: Method
  source:
    remote:
      path: src/MyApp.Purchasing/test/MyApp.Purchasing.Application.Tests/Services/PurchaseOrderServiceTests.cs
      branch: copilot/integrate-docfx-documentation
      repo: https://github.com/Ozymandros/ERP.Microservices.git
    id: UpdatePurchaseOrderStatusAsync_WithExistingOrder_UpdatesStatus
    path: src/MyApp.Purchasing/test/MyApp.Purchasing.Application.Tests/Services/PurchaseOrderServiceTests.cs
    startLine: 278
  assemblies:
  - MyApp.Purchasing.Application.Tests
  namespace: MyApp.Purchasing.Application.Tests.Services
  syntax:
    content: >-
      [Fact]

      public Task UpdatePurchaseOrderStatusAsync_WithExistingOrder_UpdatesStatus()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Fact>

      Public Function UpdatePurchaseOrderStatusAsync_WithExistingOrder_UpdatesStatus() As Task
  overload: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.UpdatePurchaseOrderStatusAsync_WithExistingOrder_UpdatesStatus*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
- uid: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.UpdatePurchaseOrderStatusAsync_WithNonExistentOrder_ThrowsKeyNotFoundException
  commentId: M:MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.UpdatePurchaseOrderStatusAsync_WithNonExistentOrder_ThrowsKeyNotFoundException
  id: UpdatePurchaseOrderStatusAsync_WithNonExistentOrder_ThrowsKeyNotFoundException
  parent: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests
  langs:
  - csharp
  - vb
  name: UpdatePurchaseOrderStatusAsync_WithNonExistentOrder_ThrowsKeyNotFoundException()
  nameWithType: PurchaseOrderServiceTests.UpdatePurchaseOrderStatusAsync_WithNonExistentOrder_ThrowsKeyNotFoundException()
  fullName: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.UpdatePurchaseOrderStatusAsync_WithNonExistentOrder_ThrowsKeyNotFoundException()
  type: Method
  source:
    remote:
      path: src/MyApp.Purchasing/test/MyApp.Purchasing.Application.Tests/Services/PurchaseOrderServiceTests.cs
      branch: copilot/integrate-docfx-documentation
      repo: https://github.com/Ozymandros/ERP.Microservices.git
    id: UpdatePurchaseOrderStatusAsync_WithNonExistentOrder_ThrowsKeyNotFoundException
    path: src/MyApp.Purchasing/test/MyApp.Purchasing.Application.Tests/Services/PurchaseOrderServiceTests.cs
    startLine: 301
  assemblies:
  - MyApp.Purchasing.Application.Tests
  namespace: MyApp.Purchasing.Application.Tests.Services
  syntax:
    content: >-
      [Fact]

      public Task UpdatePurchaseOrderStatusAsync_WithNonExistentOrder_ThrowsKeyNotFoundException()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Fact>

      Public Function UpdatePurchaseOrderStatusAsync_WithNonExistentOrder_ThrowsKeyNotFoundException() As Task
  overload: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.UpdatePurchaseOrderStatusAsync_WithNonExistentOrder_ThrowsKeyNotFoundException*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
- uid: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.DeletePurchaseOrderAsync_WithExistingOrder_DeletesOrder
  commentId: M:MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.DeletePurchaseOrderAsync_WithExistingOrder_DeletesOrder
  id: DeletePurchaseOrderAsync_WithExistingOrder_DeletesOrder
  parent: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests
  langs:
  - csharp
  - vb
  name: DeletePurchaseOrderAsync_WithExistingOrder_DeletesOrder()
  nameWithType: PurchaseOrderServiceTests.DeletePurchaseOrderAsync_WithExistingOrder_DeletesOrder()
  fullName: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.DeletePurchaseOrderAsync_WithExistingOrder_DeletesOrder()
  type: Method
  source:
    remote:
      path: src/MyApp.Purchasing/test/MyApp.Purchasing.Application.Tests/Services/PurchaseOrderServiceTests.cs
      branch: copilot/integrate-docfx-documentation
      repo: https://github.com/Ozymandros/ERP.Microservices.git
    id: DeletePurchaseOrderAsync_WithExistingOrder_DeletesOrder
    path: src/MyApp.Purchasing/test/MyApp.Purchasing.Application.Tests/Services/PurchaseOrderServiceTests.cs
    startLine: 317
  assemblies:
  - MyApp.Purchasing.Application.Tests
  namespace: MyApp.Purchasing.Application.Tests.Services
  syntax:
    content: >-
      [Fact]

      public Task DeletePurchaseOrderAsync_WithExistingOrder_DeletesOrder()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Fact>

      Public Function DeletePurchaseOrderAsync_WithExistingOrder_DeletesOrder() As Task
  overload: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.DeletePurchaseOrderAsync_WithExistingOrder_DeletesOrder*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
- uid: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.DeletePurchaseOrderAsync_WithNonExistentOrder_ThrowsKeyNotFoundException
  commentId: M:MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.DeletePurchaseOrderAsync_WithNonExistentOrder_ThrowsKeyNotFoundException
  id: DeletePurchaseOrderAsync_WithNonExistentOrder_ThrowsKeyNotFoundException
  parent: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests
  langs:
  - csharp
  - vb
  name: DeletePurchaseOrderAsync_WithNonExistentOrder_ThrowsKeyNotFoundException()
  nameWithType: PurchaseOrderServiceTests.DeletePurchaseOrderAsync_WithNonExistentOrder_ThrowsKeyNotFoundException()
  fullName: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.DeletePurchaseOrderAsync_WithNonExistentOrder_ThrowsKeyNotFoundException()
  type: Method
  source:
    remote:
      path: src/MyApp.Purchasing/test/MyApp.Purchasing.Application.Tests/Services/PurchaseOrderServiceTests.cs
      branch: copilot/integrate-docfx-documentation
      repo: https://github.com/Ozymandros/ERP.Microservices.git
    id: DeletePurchaseOrderAsync_WithNonExistentOrder_ThrowsKeyNotFoundException
    path: src/MyApp.Purchasing/test/MyApp.Purchasing.Application.Tests/Services/PurchaseOrderServiceTests.cs
    startLine: 333
  assemblies:
  - MyApp.Purchasing.Application.Tests
  namespace: MyApp.Purchasing.Application.Tests.Services
  syntax:
    content: >-
      [Fact]

      public Task DeletePurchaseOrderAsync_WithNonExistentOrder_ThrowsKeyNotFoundException()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Fact>

      Public Function DeletePurchaseOrderAsync_WithNonExistentOrder_ThrowsKeyNotFoundException() As Task
  overload: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.DeletePurchaseOrderAsync_WithNonExistentOrder_ThrowsKeyNotFoundException*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
references:
- uid: MyApp.Purchasing.Application.Tests.Services
  commentId: N:MyApp.Purchasing.Application.Tests.Services
  href: MyApp.html
  name: MyApp.Purchasing.Application.Tests.Services
  nameWithType: MyApp.Purchasing.Application.Tests.Services
  fullName: MyApp.Purchasing.Application.Tests.Services
  spec.csharp:
  - uid: MyApp
    name: MyApp
    href: MyApp.html
  - name: .
  - uid: MyApp.Purchasing
    name: Purchasing
    href: MyApp.Purchasing.html
  - name: .
  - uid: MyApp.Purchasing.Application
    name: Application
    href: MyApp.Purchasing.Application.html
  - name: .
  - uid: MyApp.Purchasing.Application.Tests
    name: Tests
    href: MyApp.Purchasing.Application.Tests.html
  - name: .
  - uid: MyApp.Purchasing.Application.Tests.Services
    name: Services
    href: MyApp.Purchasing.Application.Tests.Services.html
  spec.vb:
  - uid: MyApp
    name: MyApp
    href: MyApp.html
  - name: .
  - uid: MyApp.Purchasing
    name: Purchasing
    href: MyApp.Purchasing.html
  - name: .
  - uid: MyApp.Purchasing.Application
    name: Application
    href: MyApp.Purchasing.Application.html
  - name: .
  - uid: MyApp.Purchasing.Application.Tests
    name: Tests
    href: MyApp.Purchasing.Application.Tests.html
  - name: .
  - uid: MyApp.Purchasing.Application.Tests.Services
    name: Services
    href: MyApp.Purchasing.Application.Tests.Services.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.#ctor*
  commentId: Overload:MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.#ctor
  href: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.html#MyApp_Purchasing_Application_Tests_Services_PurchaseOrderServiceTests__ctor
  name: PurchaseOrderServiceTests
  nameWithType: PurchaseOrderServiceTests.PurchaseOrderServiceTests
  fullName: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.PurchaseOrderServiceTests
  nameWithType.vb: PurchaseOrderServiceTests.New
  fullName.vb: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.New
  name.vb: New
- uid: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.GetPurchaseOrderByIdAsync_WithExistingId_ReturnsOrderDto*
  commentId: Overload:MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.GetPurchaseOrderByIdAsync_WithExistingId_ReturnsOrderDto
  href: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.html#MyApp_Purchasing_Application_Tests_Services_PurchaseOrderServiceTests_GetPurchaseOrderByIdAsync_WithExistingId_ReturnsOrderDto
  name: GetPurchaseOrderByIdAsync_WithExistingId_ReturnsOrderDto
  nameWithType: PurchaseOrderServiceTests.GetPurchaseOrderByIdAsync_WithExistingId_ReturnsOrderDto
  fullName: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.GetPurchaseOrderByIdAsync_WithExistingId_ReturnsOrderDto
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.GetPurchaseOrderByIdAsync_WithNonExistentId_ReturnsNull*
  commentId: Overload:MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.GetPurchaseOrderByIdAsync_WithNonExistentId_ReturnsNull
  href: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.html#MyApp_Purchasing_Application_Tests_Services_PurchaseOrderServiceTests_GetPurchaseOrderByIdAsync_WithNonExistentId_ReturnsNull
  name: GetPurchaseOrderByIdAsync_WithNonExistentId_ReturnsNull
  nameWithType: PurchaseOrderServiceTests.GetPurchaseOrderByIdAsync_WithNonExistentId_ReturnsNull
  fullName: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.GetPurchaseOrderByIdAsync_WithNonExistentId_ReturnsNull
- uid: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.GetAllPurchaseOrdersAsync_ReturnsAllOrders*
  commentId: Overload:MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.GetAllPurchaseOrdersAsync_ReturnsAllOrders
  href: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.html#MyApp_Purchasing_Application_Tests_Services_PurchaseOrderServiceTests_GetAllPurchaseOrdersAsync_ReturnsAllOrders
  name: GetAllPurchaseOrdersAsync_ReturnsAllOrders
  nameWithType: PurchaseOrderServiceTests.GetAllPurchaseOrdersAsync_ReturnsAllOrders
  fullName: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.GetAllPurchaseOrdersAsync_ReturnsAllOrders
- uid: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.GetPurchaseOrdersBySupplierAsync_ReturnsSupplierOrders*
  commentId: Overload:MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.GetPurchaseOrdersBySupplierAsync_ReturnsSupplierOrders
  href: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.html#MyApp_Purchasing_Application_Tests_Services_PurchaseOrderServiceTests_GetPurchaseOrdersBySupplierAsync_ReturnsSupplierOrders
  name: GetPurchaseOrdersBySupplierAsync_ReturnsSupplierOrders
  nameWithType: PurchaseOrderServiceTests.GetPurchaseOrdersBySupplierAsync_ReturnsSupplierOrders
  fullName: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.GetPurchaseOrdersBySupplierAsync_ReturnsSupplierOrders
- uid: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.GetPurchaseOrdersByStatusAsync_ReturnsOrdersWithStatus*
  commentId: Overload:MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.GetPurchaseOrdersByStatusAsync_ReturnsOrdersWithStatus
  href: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.html#MyApp_Purchasing_Application_Tests_Services_PurchaseOrderServiceTests_GetPurchaseOrdersByStatusAsync_ReturnsOrdersWithStatus
  name: GetPurchaseOrdersByStatusAsync_ReturnsOrdersWithStatus
  nameWithType: PurchaseOrderServiceTests.GetPurchaseOrdersByStatusAsync_ReturnsOrdersWithStatus
  fullName: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.GetPurchaseOrdersByStatusAsync_ReturnsOrdersWithStatus
- uid: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.CreatePurchaseOrderAsync_WithValidSupplier_CreatesOrder*
  commentId: Overload:MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.CreatePurchaseOrderAsync_WithValidSupplier_CreatesOrder
  href: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.html#MyApp_Purchasing_Application_Tests_Services_PurchaseOrderServiceTests_CreatePurchaseOrderAsync_WithValidSupplier_CreatesOrder
  name: CreatePurchaseOrderAsync_WithValidSupplier_CreatesOrder
  nameWithType: PurchaseOrderServiceTests.CreatePurchaseOrderAsync_WithValidSupplier_CreatesOrder
  fullName: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.CreatePurchaseOrderAsync_WithValidSupplier_CreatesOrder
- uid: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.CreatePurchaseOrderAsync_WithNonExistentSupplier_ThrowsKeyNotFoundException*
  commentId: Overload:MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.CreatePurchaseOrderAsync_WithNonExistentSupplier_ThrowsKeyNotFoundException
  href: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.html#MyApp_Purchasing_Application_Tests_Services_PurchaseOrderServiceTests_CreatePurchaseOrderAsync_WithNonExistentSupplier_ThrowsKeyNotFoundException
  name: CreatePurchaseOrderAsync_WithNonExistentSupplier_ThrowsKeyNotFoundException
  nameWithType: PurchaseOrderServiceTests.CreatePurchaseOrderAsync_WithNonExistentSupplier_ThrowsKeyNotFoundException
  fullName: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.CreatePurchaseOrderAsync_WithNonExistentSupplier_ThrowsKeyNotFoundException
- uid: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.UpdatePurchaseOrderAsync_WithExistingOrder_UpdatesSuccessfully*
  commentId: Overload:MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.UpdatePurchaseOrderAsync_WithExistingOrder_UpdatesSuccessfully
  href: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.html#MyApp_Purchasing_Application_Tests_Services_PurchaseOrderServiceTests_UpdatePurchaseOrderAsync_WithExistingOrder_UpdatesSuccessfully
  name: UpdatePurchaseOrderAsync_WithExistingOrder_UpdatesSuccessfully
  nameWithType: PurchaseOrderServiceTests.UpdatePurchaseOrderAsync_WithExistingOrder_UpdatesSuccessfully
  fullName: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.UpdatePurchaseOrderAsync_WithExistingOrder_UpdatesSuccessfully
- uid: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.UpdatePurchaseOrderAsync_WithNonExistentOrder_ThrowsKeyNotFoundException*
  commentId: Overload:MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.UpdatePurchaseOrderAsync_WithNonExistentOrder_ThrowsKeyNotFoundException
  href: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.html#MyApp_Purchasing_Application_Tests_Services_PurchaseOrderServiceTests_UpdatePurchaseOrderAsync_WithNonExistentOrder_ThrowsKeyNotFoundException
  name: UpdatePurchaseOrderAsync_WithNonExistentOrder_ThrowsKeyNotFoundException
  nameWithType: PurchaseOrderServiceTests.UpdatePurchaseOrderAsync_WithNonExistentOrder_ThrowsKeyNotFoundException
  fullName: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.UpdatePurchaseOrderAsync_WithNonExistentOrder_ThrowsKeyNotFoundException
- uid: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.UpdatePurchaseOrderAsync_WithChangedSupplier_ValidatesNewSupplier*
  commentId: Overload:MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.UpdatePurchaseOrderAsync_WithChangedSupplier_ValidatesNewSupplier
  href: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.html#MyApp_Purchasing_Application_Tests_Services_PurchaseOrderServiceTests_UpdatePurchaseOrderAsync_WithChangedSupplier_ValidatesNewSupplier
  name: UpdatePurchaseOrderAsync_WithChangedSupplier_ValidatesNewSupplier
  nameWithType: PurchaseOrderServiceTests.UpdatePurchaseOrderAsync_WithChangedSupplier_ValidatesNewSupplier
  fullName: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.UpdatePurchaseOrderAsync_WithChangedSupplier_ValidatesNewSupplier
- uid: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.UpdatePurchaseOrderStatusAsync_WithExistingOrder_UpdatesStatus*
  commentId: Overload:MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.UpdatePurchaseOrderStatusAsync_WithExistingOrder_UpdatesStatus
  href: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.html#MyApp_Purchasing_Application_Tests_Services_PurchaseOrderServiceTests_UpdatePurchaseOrderStatusAsync_WithExistingOrder_UpdatesStatus
  name: UpdatePurchaseOrderStatusAsync_WithExistingOrder_UpdatesStatus
  nameWithType: PurchaseOrderServiceTests.UpdatePurchaseOrderStatusAsync_WithExistingOrder_UpdatesStatus
  fullName: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.UpdatePurchaseOrderStatusAsync_WithExistingOrder_UpdatesStatus
- uid: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.UpdatePurchaseOrderStatusAsync_WithNonExistentOrder_ThrowsKeyNotFoundException*
  commentId: Overload:MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.UpdatePurchaseOrderStatusAsync_WithNonExistentOrder_ThrowsKeyNotFoundException
  href: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.html#MyApp_Purchasing_Application_Tests_Services_PurchaseOrderServiceTests_UpdatePurchaseOrderStatusAsync_WithNonExistentOrder_ThrowsKeyNotFoundException
  name: UpdatePurchaseOrderStatusAsync_WithNonExistentOrder_ThrowsKeyNotFoundException
  nameWithType: PurchaseOrderServiceTests.UpdatePurchaseOrderStatusAsync_WithNonExistentOrder_ThrowsKeyNotFoundException
  fullName: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.UpdatePurchaseOrderStatusAsync_WithNonExistentOrder_ThrowsKeyNotFoundException
- uid: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.DeletePurchaseOrderAsync_WithExistingOrder_DeletesOrder*
  commentId: Overload:MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.DeletePurchaseOrderAsync_WithExistingOrder_DeletesOrder
  href: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.html#MyApp_Purchasing_Application_Tests_Services_PurchaseOrderServiceTests_DeletePurchaseOrderAsync_WithExistingOrder_DeletesOrder
  name: DeletePurchaseOrderAsync_WithExistingOrder_DeletesOrder
  nameWithType: PurchaseOrderServiceTests.DeletePurchaseOrderAsync_WithExistingOrder_DeletesOrder
  fullName: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.DeletePurchaseOrderAsync_WithExistingOrder_DeletesOrder
- uid: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.DeletePurchaseOrderAsync_WithNonExistentOrder_ThrowsKeyNotFoundException*
  commentId: Overload:MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.DeletePurchaseOrderAsync_WithNonExistentOrder_ThrowsKeyNotFoundException
  href: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.html#MyApp_Purchasing_Application_Tests_Services_PurchaseOrderServiceTests_DeletePurchaseOrderAsync_WithNonExistentOrder_ThrowsKeyNotFoundException
  name: DeletePurchaseOrderAsync_WithNonExistentOrder_ThrowsKeyNotFoundException
  nameWithType: PurchaseOrderServiceTests.DeletePurchaseOrderAsync_WithNonExistentOrder_ThrowsKeyNotFoundException
  fullName: MyApp.Purchasing.Application.Tests.Services.PurchaseOrderServiceTests.DeletePurchaseOrderAsync_WithNonExistentOrder_ThrowsKeyNotFoundException
