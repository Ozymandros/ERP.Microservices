### YamlMime:ManagedReference
items:
- uid: MyApp.Orders.Domain.IRepository`2
  commentId: T:MyApp.Orders.Domain.IRepository`2
  id: IRepository`2
  parent: MyApp.Orders.Domain
  children:
  - MyApp.Orders.Domain.IRepository`2.AddAsync(`0)
  - MyApp.Orders.Domain.IRepository`2.DeleteAsync(`1)
  - MyApp.Orders.Domain.IRepository`2.GetByIdAsync(`1)
  - MyApp.Orders.Domain.IRepository`2.ListAsync
  - MyApp.Orders.Domain.IRepository`2.UpdateAsync(`0)
  langs:
  - csharp
  - vb
  name: IRepository<TEntity, TKey>
  nameWithType: IRepository<TEntity, TKey>
  fullName: MyApp.Orders.Domain.IRepository<TEntity, TKey>
  type: Interface
  source:
    remote:
      path: src/MyApp.Orders/MyApp.Orders.Domain/IRepository.cs
      branch: copilot/integrate-docfx-documentation
      repo: https://github.com/Ozymandros/ERP.Microservices.git
    id: IRepository
    path: src/MyApp.Orders/MyApp.Orders.Domain/IRepository.cs
    startLine: 6
  assemblies:
  - MyApp.Orders.Domain
  namespace: MyApp.Orders.Domain
  syntax:
    content: 'public interface IRepository<TEntity, TKey> where TEntity : class'
    typeParameters:
    - id: TEntity
    - id: TKey
    content.vb: Public Interface IRepository(Of TEntity As Class, TKey)
  nameWithType.vb: IRepository(Of TEntity, TKey)
  fullName.vb: MyApp.Orders.Domain.IRepository(Of TEntity, TKey)
  name.vb: IRepository(Of TEntity, TKey)
- uid: MyApp.Orders.Domain.IRepository`2.GetByIdAsync(`1)
  commentId: M:MyApp.Orders.Domain.IRepository`2.GetByIdAsync(`1)
  id: GetByIdAsync(`1)
  parent: MyApp.Orders.Domain.IRepository`2
  langs:
  - csharp
  - vb
  name: GetByIdAsync(TKey)
  nameWithType: IRepository<TEntity, TKey>.GetByIdAsync(TKey)
  fullName: MyApp.Orders.Domain.IRepository<TEntity, TKey>.GetByIdAsync(TKey)
  type: Method
  source:
    remote:
      path: src/MyApp.Orders/MyApp.Orders.Domain/IRepository.cs
      branch: copilot/integrate-docfx-documentation
      repo: https://github.com/Ozymandros/ERP.Microservices.git
    id: GetByIdAsync
    path: src/MyApp.Orders/MyApp.Orders.Domain/IRepository.cs
    startLine: 8
  assemblies:
  - MyApp.Orders.Domain
  namespace: MyApp.Orders.Domain
  syntax:
    content: Task<TEntity?> GetByIdAsync(TKey id)
    parameters:
    - id: id
      type: '{TKey}'
    return:
      type: System.Threading.Tasks.Task{{TEntity}}
    content.vb: Function GetByIdAsync(id As TKey) As Task(Of TEntity)
  overload: MyApp.Orders.Domain.IRepository`2.GetByIdAsync*
  nameWithType.vb: IRepository(Of TEntity, TKey).GetByIdAsync(TKey)
  fullName.vb: MyApp.Orders.Domain.IRepository(Of TEntity, TKey).GetByIdAsync(TKey)
- uid: MyApp.Orders.Domain.IRepository`2.ListAsync
  commentId: M:MyApp.Orders.Domain.IRepository`2.ListAsync
  id: ListAsync
  parent: MyApp.Orders.Domain.IRepository`2
  langs:
  - csharp
  - vb
  name: ListAsync()
  nameWithType: IRepository<TEntity, TKey>.ListAsync()
  fullName: MyApp.Orders.Domain.IRepository<TEntity, TKey>.ListAsync()
  type: Method
  source:
    remote:
      path: src/MyApp.Orders/MyApp.Orders.Domain/IRepository.cs
      branch: copilot/integrate-docfx-documentation
      repo: https://github.com/Ozymandros/ERP.Microservices.git
    id: ListAsync
    path: src/MyApp.Orders/MyApp.Orders.Domain/IRepository.cs
    startLine: 9
  assemblies:
  - MyApp.Orders.Domain
  namespace: MyApp.Orders.Domain
  syntax:
    content: Task<IEnumerable<TEntity>> ListAsync()
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{{TEntity}}}
    content.vb: Function ListAsync() As Task(Of IEnumerable(Of TEntity))
  overload: MyApp.Orders.Domain.IRepository`2.ListAsync*
  nameWithType.vb: IRepository(Of TEntity, TKey).ListAsync()
  fullName.vb: MyApp.Orders.Domain.IRepository(Of TEntity, TKey).ListAsync()
- uid: MyApp.Orders.Domain.IRepository`2.AddAsync(`0)
  commentId: M:MyApp.Orders.Domain.IRepository`2.AddAsync(`0)
  id: AddAsync(`0)
  parent: MyApp.Orders.Domain.IRepository`2
  langs:
  - csharp
  - vb
  name: AddAsync(TEntity)
  nameWithType: IRepository<TEntity, TKey>.AddAsync(TEntity)
  fullName: MyApp.Orders.Domain.IRepository<TEntity, TKey>.AddAsync(TEntity)
  type: Method
  source:
    remote:
      path: src/MyApp.Orders/MyApp.Orders.Domain/IRepository.cs
      branch: copilot/integrate-docfx-documentation
      repo: https://github.com/Ozymandros/ERP.Microservices.git
    id: AddAsync
    path: src/MyApp.Orders/MyApp.Orders.Domain/IRepository.cs
    startLine: 10
  assemblies:
  - MyApp.Orders.Domain
  namespace: MyApp.Orders.Domain
  syntax:
    content: Task AddAsync(TEntity entity)
    parameters:
    - id: entity
      type: '{TEntity}'
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function AddAsync(entity As TEntity) As Task
  overload: MyApp.Orders.Domain.IRepository`2.AddAsync*
  nameWithType.vb: IRepository(Of TEntity, TKey).AddAsync(TEntity)
  fullName.vb: MyApp.Orders.Domain.IRepository(Of TEntity, TKey).AddAsync(TEntity)
- uid: MyApp.Orders.Domain.IRepository`2.UpdateAsync(`0)
  commentId: M:MyApp.Orders.Domain.IRepository`2.UpdateAsync(`0)
  id: UpdateAsync(`0)
  parent: MyApp.Orders.Domain.IRepository`2
  langs:
  - csharp
  - vb
  name: UpdateAsync(TEntity)
  nameWithType: IRepository<TEntity, TKey>.UpdateAsync(TEntity)
  fullName: MyApp.Orders.Domain.IRepository<TEntity, TKey>.UpdateAsync(TEntity)
  type: Method
  source:
    remote:
      path: src/MyApp.Orders/MyApp.Orders.Domain/IRepository.cs
      branch: copilot/integrate-docfx-documentation
      repo: https://github.com/Ozymandros/ERP.Microservices.git
    id: UpdateAsync
    path: src/MyApp.Orders/MyApp.Orders.Domain/IRepository.cs
    startLine: 11
  assemblies:
  - MyApp.Orders.Domain
  namespace: MyApp.Orders.Domain
  syntax:
    content: Task UpdateAsync(TEntity entity)
    parameters:
    - id: entity
      type: '{TEntity}'
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function UpdateAsync(entity As TEntity) As Task
  overload: MyApp.Orders.Domain.IRepository`2.UpdateAsync*
  nameWithType.vb: IRepository(Of TEntity, TKey).UpdateAsync(TEntity)
  fullName.vb: MyApp.Orders.Domain.IRepository(Of TEntity, TKey).UpdateAsync(TEntity)
- uid: MyApp.Orders.Domain.IRepository`2.DeleteAsync(`1)
  commentId: M:MyApp.Orders.Domain.IRepository`2.DeleteAsync(`1)
  id: DeleteAsync(`1)
  parent: MyApp.Orders.Domain.IRepository`2
  langs:
  - csharp
  - vb
  name: DeleteAsync(TKey)
  nameWithType: IRepository<TEntity, TKey>.DeleteAsync(TKey)
  fullName: MyApp.Orders.Domain.IRepository<TEntity, TKey>.DeleteAsync(TKey)
  type: Method
  source:
    remote:
      path: src/MyApp.Orders/MyApp.Orders.Domain/IRepository.cs
      branch: copilot/integrate-docfx-documentation
      repo: https://github.com/Ozymandros/ERP.Microservices.git
    id: DeleteAsync
    path: src/MyApp.Orders/MyApp.Orders.Domain/IRepository.cs
    startLine: 12
  assemblies:
  - MyApp.Orders.Domain
  namespace: MyApp.Orders.Domain
  syntax:
    content: Task DeleteAsync(TKey id)
    parameters:
    - id: id
      type: '{TKey}'
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function DeleteAsync(id As TKey) As Task
  overload: MyApp.Orders.Domain.IRepository`2.DeleteAsync*
  nameWithType.vb: IRepository(Of TEntity, TKey).DeleteAsync(TKey)
  fullName.vb: MyApp.Orders.Domain.IRepository(Of TEntity, TKey).DeleteAsync(TKey)
references:
- uid: MyApp.Orders.Domain
  commentId: N:MyApp.Orders.Domain
  href: MyApp.html
  name: MyApp.Orders.Domain
  nameWithType: MyApp.Orders.Domain
  fullName: MyApp.Orders.Domain
  spec.csharp:
  - uid: MyApp
    name: MyApp
    href: MyApp.html
  - name: .
  - uid: MyApp.Orders
    name: Orders
    href: MyApp.Orders.html
  - name: .
  - uid: MyApp.Orders.Domain
    name: Domain
    href: MyApp.Orders.Domain.html
  spec.vb:
  - uid: MyApp
    name: MyApp
    href: MyApp.html
  - name: .
  - uid: MyApp.Orders
    name: Orders
    href: MyApp.Orders.html
  - name: .
  - uid: MyApp.Orders.Domain
    name: Domain
    href: MyApp.Orders.Domain.html
- uid: MyApp.Orders.Domain.IRepository`2.GetByIdAsync*
  commentId: Overload:MyApp.Orders.Domain.IRepository`2.GetByIdAsync
  href: MyApp.Orders.Domain.IRepository-2.html#MyApp_Orders_Domain_IRepository_2_GetByIdAsync__1_
  name: GetByIdAsync
  nameWithType: IRepository<TEntity, TKey>.GetByIdAsync
  fullName: MyApp.Orders.Domain.IRepository<TEntity, TKey>.GetByIdAsync
  nameWithType.vb: IRepository(Of TEntity, TKey).GetByIdAsync
  fullName.vb: MyApp.Orders.Domain.IRepository(Of TEntity, TKey).GetByIdAsync
- uid: '{TKey}'
  commentId: '!:TKey'
  definition: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: System.Threading.Tasks.Task{{TEntity}}
  commentId: T:System.Threading.Tasks.Task{`0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TEntity>
  nameWithType: Task<TEntity>
  fullName: System.Threading.Tasks.Task<TEntity>
  nameWithType.vb: Task(Of TEntity)
  fullName.vb: System.Threading.Tasks.Task(Of TEntity)
  name.vb: Task(Of TEntity)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TEntity
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TEntity
  - name: )
- uid: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: MyApp.Orders.Domain.IRepository`2.ListAsync*
  commentId: Overload:MyApp.Orders.Domain.IRepository`2.ListAsync
  href: MyApp.Orders.Domain.IRepository-2.html#MyApp_Orders_Domain_IRepository_2_ListAsync
  name: ListAsync
  nameWithType: IRepository<TEntity, TKey>.ListAsync
  fullName: MyApp.Orders.Domain.IRepository<TEntity, TKey>.ListAsync
  nameWithType.vb: IRepository(Of TEntity, TKey).ListAsync
  fullName.vb: MyApp.Orders.Domain.IRepository(Of TEntity, TKey).ListAsync
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{{TEntity}}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{`0}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<IEnumerable<TEntity>>
  nameWithType: Task<IEnumerable<TEntity>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<TEntity>>
  nameWithType.vb: Task(Of IEnumerable(Of TEntity))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IEnumerable(Of TEntity))
  name.vb: Task(Of IEnumerable(Of TEntity))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: TEntity
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: TEntity
  - name: )
  - name: )
- uid: MyApp.Orders.Domain.IRepository`2.AddAsync*
  commentId: Overload:MyApp.Orders.Domain.IRepository`2.AddAsync
  href: MyApp.Orders.Domain.IRepository-2.html#MyApp_Orders_Domain_IRepository_2_AddAsync__0_
  name: AddAsync
  nameWithType: IRepository<TEntity, TKey>.AddAsync
  fullName: MyApp.Orders.Domain.IRepository<TEntity, TKey>.AddAsync
  nameWithType.vb: IRepository(Of TEntity, TKey).AddAsync
  fullName.vb: MyApp.Orders.Domain.IRepository(Of TEntity, TKey).AddAsync
- uid: '{TEntity}'
  commentId: '!:TEntity'
  definition: TEntity
  name: TEntity
  nameWithType: TEntity
  fullName: TEntity
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: TEntity
  name: TEntity
  nameWithType: TEntity
  fullName: TEntity
- uid: MyApp.Orders.Domain.IRepository`2.UpdateAsync*
  commentId: Overload:MyApp.Orders.Domain.IRepository`2.UpdateAsync
  href: MyApp.Orders.Domain.IRepository-2.html#MyApp_Orders_Domain_IRepository_2_UpdateAsync__0_
  name: UpdateAsync
  nameWithType: IRepository<TEntity, TKey>.UpdateAsync
  fullName: MyApp.Orders.Domain.IRepository<TEntity, TKey>.UpdateAsync
  nameWithType.vb: IRepository(Of TEntity, TKey).UpdateAsync
  fullName.vb: MyApp.Orders.Domain.IRepository(Of TEntity, TKey).UpdateAsync
- uid: MyApp.Orders.Domain.IRepository`2.DeleteAsync*
  commentId: Overload:MyApp.Orders.Domain.IRepository`2.DeleteAsync
  href: MyApp.Orders.Domain.IRepository-2.html#MyApp_Orders_Domain_IRepository_2_DeleteAsync__1_
  name: DeleteAsync
  nameWithType: IRepository<TEntity, TKey>.DeleteAsync
  fullName: MyApp.Orders.Domain.IRepository<TEntity, TKey>.DeleteAsync
  nameWithType.vb: IRepository(Of TEntity, TKey).DeleteAsync
  fullName.vb: MyApp.Orders.Domain.IRepository(Of TEntity, TKey).DeleteAsync
