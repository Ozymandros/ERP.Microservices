### YamlMime:ManagedReference
items:
- uid: MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests
  commentId: T:MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests
  id: WarehouseServiceTests
  parent: MyApp.Inventory.Application.Tests.Services
  children:
  - MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.#ctor
  - MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.CreateWarehouseAsync_WithDuplicateName_ThrowsInvalidOperationException
  - MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.CreateWarehouseAsync_WithUniqueName_CreatesWarehouse
  - MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.DeleteWarehouseAsync_WithExistingWarehouse_DeletesWarehouse
  - MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.DeleteWarehouseAsync_WithNonExistentWarehouse_ThrowsKeyNotFoundException
  - MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.GetAllWarehousesAsync_ReturnsAllWarehouses
  - MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.GetWarehouseByIdAsync_WithExistingId_ReturnsWarehouseDto
  - MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.GetWarehouseByIdAsync_WithNonExistentId_ReturnsNull
  - MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.UpdateWarehouseAsync_WithDuplicateName_ThrowsInvalidOperationException
  - MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.UpdateWarehouseAsync_WithExistingWarehouse_UpdatesSuccessfully
  - MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.UpdateWarehouseAsync_WithNonExistentWarehouse_ThrowsKeyNotFoundException
  langs:
  - csharp
  - vb
  name: WarehouseServiceTests
  nameWithType: WarehouseServiceTests
  fullName: MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests
  type: Class
  source:
    remote:
      path: src/MyApp.Inventory/test/MyApp.Inventory.Application.Tests/Services/WarehouseServiceTests.cs
      branch: copilot/integrate-docfx-documentation
      repo: https://github.com/Ozymandros/ERP.Microservices.git
    id: WarehouseServiceTests
    path: src/MyApp.Inventory/test/MyApp.Inventory.Application.Tests/Services/WarehouseServiceTests.cs
    startLine: 10
  assemblies:
  - MyApp.Inventory.Application.Tests
  namespace: MyApp.Inventory.Application.Tests.Services
  syntax:
    content: public class WarehouseServiceTests
    content.vb: Public Class WarehouseServiceTests
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.#ctor
  commentId: M:MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.#ctor
  id: '#ctor'
  parent: MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests
  langs:
  - csharp
  - vb
  name: WarehouseServiceTests()
  nameWithType: WarehouseServiceTests.WarehouseServiceTests()
  fullName: MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.WarehouseServiceTests()
  type: Constructor
  source:
    remote:
      path: src/MyApp.Inventory/test/MyApp.Inventory.Application.Tests/Services/WarehouseServiceTests.cs
      branch: copilot/integrate-docfx-documentation
      repo: https://github.com/Ozymandros/ERP.Microservices.git
    id: .ctor
    path: src/MyApp.Inventory/test/MyApp.Inventory.Application.Tests/Services/WarehouseServiceTests.cs
    startLine: 16
  assemblies:
  - MyApp.Inventory.Application.Tests
  namespace: MyApp.Inventory.Application.Tests.Services
  syntax:
    content: public WarehouseServiceTests()
    content.vb: Public Sub New()
  overload: MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.#ctor*
  nameWithType.vb: WarehouseServiceTests.New()
  fullName.vb: MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.New()
  name.vb: New()
- uid: MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.GetWarehouseByIdAsync_WithExistingId_ReturnsWarehouseDto
  commentId: M:MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.GetWarehouseByIdAsync_WithExistingId_ReturnsWarehouseDto
  id: GetWarehouseByIdAsync_WithExistingId_ReturnsWarehouseDto
  parent: MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests
  langs:
  - csharp
  - vb
  name: GetWarehouseByIdAsync_WithExistingId_ReturnsWarehouseDto()
  nameWithType: WarehouseServiceTests.GetWarehouseByIdAsync_WithExistingId_ReturnsWarehouseDto()
  fullName: MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.GetWarehouseByIdAsync_WithExistingId_ReturnsWarehouseDto()
  type: Method
  source:
    remote:
      path: src/MyApp.Inventory/test/MyApp.Inventory.Application.Tests/Services/WarehouseServiceTests.cs
      branch: copilot/integrate-docfx-documentation
      repo: https://github.com/Ozymandros/ERP.Microservices.git
    id: GetWarehouseByIdAsync_WithExistingId_ReturnsWarehouseDto
    path: src/MyApp.Inventory/test/MyApp.Inventory.Application.Tests/Services/WarehouseServiceTests.cs
    startLine: 26
  assemblies:
  - MyApp.Inventory.Application.Tests
  namespace: MyApp.Inventory.Application.Tests.Services
  syntax:
    content: >-
      [Fact]

      public Task GetWarehouseByIdAsync_WithExistingId_ReturnsWarehouseDto()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Fact>

      Public Function GetWarehouseByIdAsync_WithExistingId_ReturnsWarehouseDto() As Task
  overload: MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.GetWarehouseByIdAsync_WithExistingId_ReturnsWarehouseDto*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
- uid: MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.GetWarehouseByIdAsync_WithNonExistentId_ReturnsNull
  commentId: M:MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.GetWarehouseByIdAsync_WithNonExistentId_ReturnsNull
  id: GetWarehouseByIdAsync_WithNonExistentId_ReturnsNull
  parent: MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests
  langs:
  - csharp
  - vb
  name: GetWarehouseByIdAsync_WithNonExistentId_ReturnsNull()
  nameWithType: WarehouseServiceTests.GetWarehouseByIdAsync_WithNonExistentId_ReturnsNull()
  fullName: MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.GetWarehouseByIdAsync_WithNonExistentId_ReturnsNull()
  type: Method
  source:
    remote:
      path: src/MyApp.Inventory/test/MyApp.Inventory.Application.Tests/Services/WarehouseServiceTests.cs
      branch: copilot/integrate-docfx-documentation
      repo: https://github.com/Ozymandros/ERP.Microservices.git
    id: GetWarehouseByIdAsync_WithNonExistentId_ReturnsNull
    path: src/MyApp.Inventory/test/MyApp.Inventory.Application.Tests/Services/WarehouseServiceTests.cs
    startLine: 46
  assemblies:
  - MyApp.Inventory.Application.Tests
  namespace: MyApp.Inventory.Application.Tests.Services
  syntax:
    content: >-
      [Fact]

      public Task GetWarehouseByIdAsync_WithNonExistentId_ReturnsNull()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Fact>

      Public Function GetWarehouseByIdAsync_WithNonExistentId_ReturnsNull() As Task
  overload: MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.GetWarehouseByIdAsync_WithNonExistentId_ReturnsNull*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
- uid: MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.GetAllWarehousesAsync_ReturnsAllWarehouses
  commentId: M:MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.GetAllWarehousesAsync_ReturnsAllWarehouses
  id: GetAllWarehousesAsync_ReturnsAllWarehouses
  parent: MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests
  langs:
  - csharp
  - vb
  name: GetAllWarehousesAsync_ReturnsAllWarehouses()
  nameWithType: WarehouseServiceTests.GetAllWarehousesAsync_ReturnsAllWarehouses()
  fullName: MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.GetAllWarehousesAsync_ReturnsAllWarehouses()
  type: Method
  source:
    remote:
      path: src/MyApp.Inventory/test/MyApp.Inventory.Application.Tests/Services/WarehouseServiceTests.cs
      branch: copilot/integrate-docfx-documentation
      repo: https://github.com/Ozymandros/ERP.Microservices.git
    id: GetAllWarehousesAsync_ReturnsAllWarehouses
    path: src/MyApp.Inventory/test/MyApp.Inventory.Application.Tests/Services/WarehouseServiceTests.cs
    startLine: 60
  assemblies:
  - MyApp.Inventory.Application.Tests
  namespace: MyApp.Inventory.Application.Tests.Services
  syntax:
    content: >-
      [Fact]

      public Task GetAllWarehousesAsync_ReturnsAllWarehouses()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Fact>

      Public Function GetAllWarehousesAsync_ReturnsAllWarehouses() As Task
  overload: MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.GetAllWarehousesAsync_ReturnsAllWarehouses*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
- uid: MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.CreateWarehouseAsync_WithUniqueName_CreatesWarehouse
  commentId: M:MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.CreateWarehouseAsync_WithUniqueName_CreatesWarehouse
  id: CreateWarehouseAsync_WithUniqueName_CreatesWarehouse
  parent: MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests
  langs:
  - csharp
  - vb
  name: CreateWarehouseAsync_WithUniqueName_CreatesWarehouse()
  nameWithType: WarehouseServiceTests.CreateWarehouseAsync_WithUniqueName_CreatesWarehouse()
  fullName: MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.CreateWarehouseAsync_WithUniqueName_CreatesWarehouse()
  type: Method
  source:
    remote:
      path: src/MyApp.Inventory/test/MyApp.Inventory.Application.Tests/Services/WarehouseServiceTests.cs
      branch: copilot/integrate-docfx-documentation
      repo: https://github.com/Ozymandros/ERP.Microservices.git
    id: CreateWarehouseAsync_WithUniqueName_CreatesWarehouse
    path: src/MyApp.Inventory/test/MyApp.Inventory.Application.Tests/Services/WarehouseServiceTests.cs
    startLine: 87
  assemblies:
  - MyApp.Inventory.Application.Tests
  namespace: MyApp.Inventory.Application.Tests.Services
  syntax:
    content: >-
      [Fact]

      public Task CreateWarehouseAsync_WithUniqueName_CreatesWarehouse()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Fact>

      Public Function CreateWarehouseAsync_WithUniqueName_CreatesWarehouse() As Task
  overload: MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.CreateWarehouseAsync_WithUniqueName_CreatesWarehouse*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
- uid: MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.CreateWarehouseAsync_WithDuplicateName_ThrowsInvalidOperationException
  commentId: M:MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.CreateWarehouseAsync_WithDuplicateName_ThrowsInvalidOperationException
  id: CreateWarehouseAsync_WithDuplicateName_ThrowsInvalidOperationException
  parent: MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests
  langs:
  - csharp
  - vb
  name: CreateWarehouseAsync_WithDuplicateName_ThrowsInvalidOperationException()
  nameWithType: WarehouseServiceTests.CreateWarehouseAsync_WithDuplicateName_ThrowsInvalidOperationException()
  fullName: MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.CreateWarehouseAsync_WithDuplicateName_ThrowsInvalidOperationException()
  type: Method
  source:
    remote:
      path: src/MyApp.Inventory/test/MyApp.Inventory.Application.Tests/Services/WarehouseServiceTests.cs
      branch: copilot/integrate-docfx-documentation
      repo: https://github.com/Ozymandros/ERP.Microservices.git
    id: CreateWarehouseAsync_WithDuplicateName_ThrowsInvalidOperationException
    path: src/MyApp.Inventory/test/MyApp.Inventory.Application.Tests/Services/WarehouseServiceTests.cs
    startLine: 110
  assemblies:
  - MyApp.Inventory.Application.Tests
  namespace: MyApp.Inventory.Application.Tests.Services
  syntax:
    content: >-
      [Fact]

      public Task CreateWarehouseAsync_WithDuplicateName_ThrowsInvalidOperationException()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Fact>

      Public Function CreateWarehouseAsync_WithDuplicateName_ThrowsInvalidOperationException() As Task
  overload: MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.CreateWarehouseAsync_WithDuplicateName_ThrowsInvalidOperationException*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
- uid: MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.UpdateWarehouseAsync_WithExistingWarehouse_UpdatesSuccessfully
  commentId: M:MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.UpdateWarehouseAsync_WithExistingWarehouse_UpdatesSuccessfully
  id: UpdateWarehouseAsync_WithExistingWarehouse_UpdatesSuccessfully
  parent: MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests
  langs:
  - csharp
  - vb
  name: UpdateWarehouseAsync_WithExistingWarehouse_UpdatesSuccessfully()
  nameWithType: WarehouseServiceTests.UpdateWarehouseAsync_WithExistingWarehouse_UpdatesSuccessfully()
  fullName: MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.UpdateWarehouseAsync_WithExistingWarehouse_UpdatesSuccessfully()
  type: Method
  source:
    remote:
      path: src/MyApp.Inventory/test/MyApp.Inventory.Application.Tests/Services/WarehouseServiceTests.cs
      branch: copilot/integrate-docfx-documentation
      repo: https://github.com/Ozymandros/ERP.Microservices.git
    id: UpdateWarehouseAsync_WithExistingWarehouse_UpdatesSuccessfully
    path: src/MyApp.Inventory/test/MyApp.Inventory.Application.Tests/Services/WarehouseServiceTests.cs
    startLine: 127
  assemblies:
  - MyApp.Inventory.Application.Tests
  namespace: MyApp.Inventory.Application.Tests.Services
  syntax:
    content: >-
      [Fact]

      public Task UpdateWarehouseAsync_WithExistingWarehouse_UpdatesSuccessfully()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Fact>

      Public Function UpdateWarehouseAsync_WithExistingWarehouse_UpdatesSuccessfully() As Task
  overload: MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.UpdateWarehouseAsync_WithExistingWarehouse_UpdatesSuccessfully*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
- uid: MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.UpdateWarehouseAsync_WithNonExistentWarehouse_ThrowsKeyNotFoundException
  commentId: M:MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.UpdateWarehouseAsync_WithNonExistentWarehouse_ThrowsKeyNotFoundException
  id: UpdateWarehouseAsync_WithNonExistentWarehouse_ThrowsKeyNotFoundException
  parent: MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests
  langs:
  - csharp
  - vb
  name: UpdateWarehouseAsync_WithNonExistentWarehouse_ThrowsKeyNotFoundException()
  nameWithType: WarehouseServiceTests.UpdateWarehouseAsync_WithNonExistentWarehouse_ThrowsKeyNotFoundException()
  fullName: MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.UpdateWarehouseAsync_WithNonExistentWarehouse_ThrowsKeyNotFoundException()
  type: Method
  source:
    remote:
      path: src/MyApp.Inventory/test/MyApp.Inventory.Application.Tests/Services/WarehouseServiceTests.cs
      branch: copilot/integrate-docfx-documentation
      repo: https://github.com/Ozymandros/ERP.Microservices.git
    id: UpdateWarehouseAsync_WithNonExistentWarehouse_ThrowsKeyNotFoundException
    path: src/MyApp.Inventory/test/MyApp.Inventory.Application.Tests/Services/WarehouseServiceTests.cs
    startLine: 150
  assemblies:
  - MyApp.Inventory.Application.Tests
  namespace: MyApp.Inventory.Application.Tests.Services
  syntax:
    content: >-
      [Fact]

      public Task UpdateWarehouseAsync_WithNonExistentWarehouse_ThrowsKeyNotFoundException()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Fact>

      Public Function UpdateWarehouseAsync_WithNonExistentWarehouse_ThrowsKeyNotFoundException() As Task
  overload: MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.UpdateWarehouseAsync_WithNonExistentWarehouse_ThrowsKeyNotFoundException*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
- uid: MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.UpdateWarehouseAsync_WithDuplicateName_ThrowsInvalidOperationException
  commentId: M:MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.UpdateWarehouseAsync_WithDuplicateName_ThrowsInvalidOperationException
  id: UpdateWarehouseAsync_WithDuplicateName_ThrowsInvalidOperationException
  parent: MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests
  langs:
  - csharp
  - vb
  name: UpdateWarehouseAsync_WithDuplicateName_ThrowsInvalidOperationException()
  nameWithType: WarehouseServiceTests.UpdateWarehouseAsync_WithDuplicateName_ThrowsInvalidOperationException()
  fullName: MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.UpdateWarehouseAsync_WithDuplicateName_ThrowsInvalidOperationException()
  type: Method
  source:
    remote:
      path: src/MyApp.Inventory/test/MyApp.Inventory.Application.Tests/Services/WarehouseServiceTests.cs
      branch: copilot/integrate-docfx-documentation
      repo: https://github.com/Ozymandros/ERP.Microservices.git
    id: UpdateWarehouseAsync_WithDuplicateName_ThrowsInvalidOperationException
    path: src/MyApp.Inventory/test/MyApp.Inventory.Application.Tests/Services/WarehouseServiceTests.cs
    startLine: 167
  assemblies:
  - MyApp.Inventory.Application.Tests
  namespace: MyApp.Inventory.Application.Tests.Services
  syntax:
    content: >-
      [Fact]

      public Task UpdateWarehouseAsync_WithDuplicateName_ThrowsInvalidOperationException()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Fact>

      Public Function UpdateWarehouseAsync_WithDuplicateName_ThrowsInvalidOperationException() As Task
  overload: MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.UpdateWarehouseAsync_WithDuplicateName_ThrowsInvalidOperationException*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
- uid: MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.DeleteWarehouseAsync_WithExistingWarehouse_DeletesWarehouse
  commentId: M:MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.DeleteWarehouseAsync_WithExistingWarehouse_DeletesWarehouse
  id: DeleteWarehouseAsync_WithExistingWarehouse_DeletesWarehouse
  parent: MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests
  langs:
  - csharp
  - vb
  name: DeleteWarehouseAsync_WithExistingWarehouse_DeletesWarehouse()
  nameWithType: WarehouseServiceTests.DeleteWarehouseAsync_WithExistingWarehouse_DeletesWarehouse()
  fullName: MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.DeleteWarehouseAsync_WithExistingWarehouse_DeletesWarehouse()
  type: Method
  source:
    remote:
      path: src/MyApp.Inventory/test/MyApp.Inventory.Application.Tests/Services/WarehouseServiceTests.cs
      branch: copilot/integrate-docfx-documentation
      repo: https://github.com/Ozymandros/ERP.Microservices.git
    id: DeleteWarehouseAsync_WithExistingWarehouse_DeletesWarehouse
    path: src/MyApp.Inventory/test/MyApp.Inventory.Application.Tests/Services/WarehouseServiceTests.cs
    startLine: 187
  assemblies:
  - MyApp.Inventory.Application.Tests
  namespace: MyApp.Inventory.Application.Tests.Services
  syntax:
    content: >-
      [Fact]

      public Task DeleteWarehouseAsync_WithExistingWarehouse_DeletesWarehouse()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Fact>

      Public Function DeleteWarehouseAsync_WithExistingWarehouse_DeletesWarehouse() As Task
  overload: MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.DeleteWarehouseAsync_WithExistingWarehouse_DeletesWarehouse*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
- uid: MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.DeleteWarehouseAsync_WithNonExistentWarehouse_ThrowsKeyNotFoundException
  commentId: M:MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.DeleteWarehouseAsync_WithNonExistentWarehouse_ThrowsKeyNotFoundException
  id: DeleteWarehouseAsync_WithNonExistentWarehouse_ThrowsKeyNotFoundException
  parent: MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests
  langs:
  - csharp
  - vb
  name: DeleteWarehouseAsync_WithNonExistentWarehouse_ThrowsKeyNotFoundException()
  nameWithType: WarehouseServiceTests.DeleteWarehouseAsync_WithNonExistentWarehouse_ThrowsKeyNotFoundException()
  fullName: MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.DeleteWarehouseAsync_WithNonExistentWarehouse_ThrowsKeyNotFoundException()
  type: Method
  source:
    remote:
      path: src/MyApp.Inventory/test/MyApp.Inventory.Application.Tests/Services/WarehouseServiceTests.cs
      branch: copilot/integrate-docfx-documentation
      repo: https://github.com/Ozymandros/ERP.Microservices.git
    id: DeleteWarehouseAsync_WithNonExistentWarehouse_ThrowsKeyNotFoundException
    path: src/MyApp.Inventory/test/MyApp.Inventory.Application.Tests/Services/WarehouseServiceTests.cs
    startLine: 203
  assemblies:
  - MyApp.Inventory.Application.Tests
  namespace: MyApp.Inventory.Application.Tests.Services
  syntax:
    content: >-
      [Fact]

      public Task DeleteWarehouseAsync_WithNonExistentWarehouse_ThrowsKeyNotFoundException()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Fact>

      Public Function DeleteWarehouseAsync_WithNonExistentWarehouse_ThrowsKeyNotFoundException() As Task
  overload: MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.DeleteWarehouseAsync_WithNonExistentWarehouse_ThrowsKeyNotFoundException*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
references:
- uid: MyApp.Inventory.Application.Tests.Services
  commentId: N:MyApp.Inventory.Application.Tests.Services
  href: MyApp.html
  name: MyApp.Inventory.Application.Tests.Services
  nameWithType: MyApp.Inventory.Application.Tests.Services
  fullName: MyApp.Inventory.Application.Tests.Services
  spec.csharp:
  - uid: MyApp
    name: MyApp
    href: MyApp.html
  - name: .
  - uid: MyApp.Inventory
    name: Inventory
    href: MyApp.Inventory.html
  - name: .
  - uid: MyApp.Inventory.Application
    name: Application
    href: MyApp.Inventory.Application.html
  - name: .
  - uid: MyApp.Inventory.Application.Tests
    name: Tests
    href: MyApp.Inventory.Application.Tests.html
  - name: .
  - uid: MyApp.Inventory.Application.Tests.Services
    name: Services
    href: MyApp.Inventory.Application.Tests.Services.html
  spec.vb:
  - uid: MyApp
    name: MyApp
    href: MyApp.html
  - name: .
  - uid: MyApp.Inventory
    name: Inventory
    href: MyApp.Inventory.html
  - name: .
  - uid: MyApp.Inventory.Application
    name: Application
    href: MyApp.Inventory.Application.html
  - name: .
  - uid: MyApp.Inventory.Application.Tests
    name: Tests
    href: MyApp.Inventory.Application.Tests.html
  - name: .
  - uid: MyApp.Inventory.Application.Tests.Services
    name: Services
    href: MyApp.Inventory.Application.Tests.Services.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.#ctor*
  commentId: Overload:MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.#ctor
  href: MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.html#MyApp_Inventory_Application_Tests_Services_WarehouseServiceTests__ctor
  name: WarehouseServiceTests
  nameWithType: WarehouseServiceTests.WarehouseServiceTests
  fullName: MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.WarehouseServiceTests
  nameWithType.vb: WarehouseServiceTests.New
  fullName.vb: MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.New
  name.vb: New
- uid: MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.GetWarehouseByIdAsync_WithExistingId_ReturnsWarehouseDto*
  commentId: Overload:MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.GetWarehouseByIdAsync_WithExistingId_ReturnsWarehouseDto
  href: MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.html#MyApp_Inventory_Application_Tests_Services_WarehouseServiceTests_GetWarehouseByIdAsync_WithExistingId_ReturnsWarehouseDto
  name: GetWarehouseByIdAsync_WithExistingId_ReturnsWarehouseDto
  nameWithType: WarehouseServiceTests.GetWarehouseByIdAsync_WithExistingId_ReturnsWarehouseDto
  fullName: MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.GetWarehouseByIdAsync_WithExistingId_ReturnsWarehouseDto
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.GetWarehouseByIdAsync_WithNonExistentId_ReturnsNull*
  commentId: Overload:MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.GetWarehouseByIdAsync_WithNonExistentId_ReturnsNull
  href: MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.html#MyApp_Inventory_Application_Tests_Services_WarehouseServiceTests_GetWarehouseByIdAsync_WithNonExistentId_ReturnsNull
  name: GetWarehouseByIdAsync_WithNonExistentId_ReturnsNull
  nameWithType: WarehouseServiceTests.GetWarehouseByIdAsync_WithNonExistentId_ReturnsNull
  fullName: MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.GetWarehouseByIdAsync_WithNonExistentId_ReturnsNull
- uid: MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.GetAllWarehousesAsync_ReturnsAllWarehouses*
  commentId: Overload:MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.GetAllWarehousesAsync_ReturnsAllWarehouses
  href: MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.html#MyApp_Inventory_Application_Tests_Services_WarehouseServiceTests_GetAllWarehousesAsync_ReturnsAllWarehouses
  name: GetAllWarehousesAsync_ReturnsAllWarehouses
  nameWithType: WarehouseServiceTests.GetAllWarehousesAsync_ReturnsAllWarehouses
  fullName: MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.GetAllWarehousesAsync_ReturnsAllWarehouses
- uid: MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.CreateWarehouseAsync_WithUniqueName_CreatesWarehouse*
  commentId: Overload:MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.CreateWarehouseAsync_WithUniqueName_CreatesWarehouse
  href: MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.html#MyApp_Inventory_Application_Tests_Services_WarehouseServiceTests_CreateWarehouseAsync_WithUniqueName_CreatesWarehouse
  name: CreateWarehouseAsync_WithUniqueName_CreatesWarehouse
  nameWithType: WarehouseServiceTests.CreateWarehouseAsync_WithUniqueName_CreatesWarehouse
  fullName: MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.CreateWarehouseAsync_WithUniqueName_CreatesWarehouse
- uid: MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.CreateWarehouseAsync_WithDuplicateName_ThrowsInvalidOperationException*
  commentId: Overload:MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.CreateWarehouseAsync_WithDuplicateName_ThrowsInvalidOperationException
  href: MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.html#MyApp_Inventory_Application_Tests_Services_WarehouseServiceTests_CreateWarehouseAsync_WithDuplicateName_ThrowsInvalidOperationException
  name: CreateWarehouseAsync_WithDuplicateName_ThrowsInvalidOperationException
  nameWithType: WarehouseServiceTests.CreateWarehouseAsync_WithDuplicateName_ThrowsInvalidOperationException
  fullName: MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.CreateWarehouseAsync_WithDuplicateName_ThrowsInvalidOperationException
- uid: MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.UpdateWarehouseAsync_WithExistingWarehouse_UpdatesSuccessfully*
  commentId: Overload:MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.UpdateWarehouseAsync_WithExistingWarehouse_UpdatesSuccessfully
  href: MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.html#MyApp_Inventory_Application_Tests_Services_WarehouseServiceTests_UpdateWarehouseAsync_WithExistingWarehouse_UpdatesSuccessfully
  name: UpdateWarehouseAsync_WithExistingWarehouse_UpdatesSuccessfully
  nameWithType: WarehouseServiceTests.UpdateWarehouseAsync_WithExistingWarehouse_UpdatesSuccessfully
  fullName: MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.UpdateWarehouseAsync_WithExistingWarehouse_UpdatesSuccessfully
- uid: MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.UpdateWarehouseAsync_WithNonExistentWarehouse_ThrowsKeyNotFoundException*
  commentId: Overload:MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.UpdateWarehouseAsync_WithNonExistentWarehouse_ThrowsKeyNotFoundException
  href: MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.html#MyApp_Inventory_Application_Tests_Services_WarehouseServiceTests_UpdateWarehouseAsync_WithNonExistentWarehouse_ThrowsKeyNotFoundException
  name: UpdateWarehouseAsync_WithNonExistentWarehouse_ThrowsKeyNotFoundException
  nameWithType: WarehouseServiceTests.UpdateWarehouseAsync_WithNonExistentWarehouse_ThrowsKeyNotFoundException
  fullName: MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.UpdateWarehouseAsync_WithNonExistentWarehouse_ThrowsKeyNotFoundException
- uid: MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.UpdateWarehouseAsync_WithDuplicateName_ThrowsInvalidOperationException*
  commentId: Overload:MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.UpdateWarehouseAsync_WithDuplicateName_ThrowsInvalidOperationException
  href: MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.html#MyApp_Inventory_Application_Tests_Services_WarehouseServiceTests_UpdateWarehouseAsync_WithDuplicateName_ThrowsInvalidOperationException
  name: UpdateWarehouseAsync_WithDuplicateName_ThrowsInvalidOperationException
  nameWithType: WarehouseServiceTests.UpdateWarehouseAsync_WithDuplicateName_ThrowsInvalidOperationException
  fullName: MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.UpdateWarehouseAsync_WithDuplicateName_ThrowsInvalidOperationException
- uid: MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.DeleteWarehouseAsync_WithExistingWarehouse_DeletesWarehouse*
  commentId: Overload:MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.DeleteWarehouseAsync_WithExistingWarehouse_DeletesWarehouse
  href: MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.html#MyApp_Inventory_Application_Tests_Services_WarehouseServiceTests_DeleteWarehouseAsync_WithExistingWarehouse_DeletesWarehouse
  name: DeleteWarehouseAsync_WithExistingWarehouse_DeletesWarehouse
  nameWithType: WarehouseServiceTests.DeleteWarehouseAsync_WithExistingWarehouse_DeletesWarehouse
  fullName: MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.DeleteWarehouseAsync_WithExistingWarehouse_DeletesWarehouse
- uid: MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.DeleteWarehouseAsync_WithNonExistentWarehouse_ThrowsKeyNotFoundException*
  commentId: Overload:MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.DeleteWarehouseAsync_WithNonExistentWarehouse_ThrowsKeyNotFoundException
  href: MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.html#MyApp_Inventory_Application_Tests_Services_WarehouseServiceTests_DeleteWarehouseAsync_WithNonExistentWarehouse_ThrowsKeyNotFoundException
  name: DeleteWarehouseAsync_WithNonExistentWarehouse_ThrowsKeyNotFoundException
  nameWithType: WarehouseServiceTests.DeleteWarehouseAsync_WithNonExistentWarehouse_ThrowsKeyNotFoundException
  fullName: MyApp.Inventory.Application.Tests.Services.WarehouseServiceTests.DeleteWarehouseAsync_WithNonExistentWarehouse_ThrowsKeyNotFoundException
