name: Deploy to Production

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  # 'id-token: write' Ã©s per a OIDC, el podem eliminar, perÃ² el mantindrem per si cal una futura actualitzaciÃ³
  id-token: write
  contents: read
  packages: write

env:
  REGISTRY_NAME: myappcontainerregistry
  AZURE_ENVIRONMENT: prod

jobs:
  test:
    name: Test Solution
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            8.x
            9.x

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore ERP.Microservices.sln

      - name: Build
        run: dotnet build ERP.Microservices.sln --configuration Release --no-restore

      - name: Test
        run: dotnet test ERP.Microservices.sln --configuration Release --no-build --verbosity normal --logger "trx;LogFileName=test-results.trx"
        
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: '**/test-results.trx'

  build-push:
    name: Build ${{ matrix.service.name }}
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        service:
          - name: auth-service
            dockerfile: src/MyApp.Auth/MyApp.Auth.API/Dockerfile
          - name: billing-service
            dockerfile: src/MyApp.Billing/MyApp.Billing.API/Dockerfile
          - name: inventory-service
            dockerfile: src/MyApp.Inventory/MyApp.Inventory.API/Dockerfile
          - name: orders-service
            dockerfile: src/MyApp.Orders/MyApp.Orders.API/Dockerfile
          - name: purchasing-service
            dockerfile: src/MyApp.Purchasing/MyApp.Purchasing.API/Dockerfile
          - name: sales-service
            dockerfile: src/MyApp.Sales/MyApp.Sales.API/Dockerfile
          - name: erp-api-gateway
            dockerfile: src/ErpApiGateway/Dockerfile
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      - name: Login to Azure Container Registry
        run: az acr login --name ${{ env.REGISTRY_NAME }}

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_NAME }}.azurecr.io/${{ matrix.service.name }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: src
          file: ${{ matrix.service.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY_NAME }}.azurecr.io/${{ matrix.service.name }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY_NAME }}.azurecr.io/${{ matrix.service.name }}:buildcache,mode=max
          provenance: false

  deploy:
    name: Deploy to Azure
    runs-on: ubuntu-latest
    needs: build-push
    environment:
      name: production
      url: https://${{ env.AZURE_ENVIRONMENT }}.azurewebsites.net
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      - name: Validate Bicep template
        run: az bicep build --file ./infra/main.bicep

      - name: Setup Azure Developer CLI
        uses: Azure/setup-azd@v1.0.0

      - name: Preview Infrastructure Changes
        id: preview
        run: |
          azd auth login \
            --client-id "${{ vars.AZURE_CLIENT_ID }}" \
            --federated-credential-provider "github" \
            --tenant-id "${{ vars.AZURE_TENANT_ID }}"
          azd preview --environment ${{ env.AZURE_ENVIRONMENT }} || echo "Preview not available"
        continue-on-error: true

      - name: Provision Infrastructure
        id: provision
        run: azd provision --no-prompt --environment ${{ env.AZURE_ENVIRONMENT }}

      - name: Deploy Application
        id: deploy
        run: azd deploy --no-prompt --environment ${{ env.AZURE_ENVIRONMENT }}

      - name: Get deployment URLs
        id: urls
        run: |
          echo "Getting service URLs..."
          azd show --environment ${{ env.AZURE_ENVIRONMENT }} --output json > deployment-info.json
          cat deployment-info.json
        continue-on-error: true

      - name: Create deployment summary
        run: |
          echo "## ðŸš€ Production Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Environment | \`${{ env.AZURE_ENVIRONMENT }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Commit | \`${{ github.sha }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Branch | \`${{ github.ref_name }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Triggered by | @${{ github.actor }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Services deployed | 7 microservices + API Gateway |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ðŸ“¦ Services:" >> $GITHUB_STEP_SUMMARY
          echo "- auth-service:${{ github.ref_name }}-${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- billing-service:${{ github.ref_name }}-${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- inventory-service:${{ github.ref_name }}-${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- orders-service:${{ github.ref_name }}-${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- purchasing-service:${{ github.ref_name }}-${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- sales-service:${{ github.ref_name }}-${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- erp-api-gateway:${{ github.ref_name }}-${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
