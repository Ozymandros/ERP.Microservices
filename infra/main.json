{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "languageVersion": "2.0",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.37.4.10188",
      "templateHash": "9544173022001847433"
    }
  },
  "parameters": {
    "environmentName": {
      "type": "string",
      "minLength": 1,
      "maxLength": 64,
      "metadata": {
        "description": "Name of the environment that can be used as part of naming resource convention"
      }
    },
    "location": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Primary location for all resources"
      }
    },
    "principalId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Id of the principal to assign database and application roles"
      }
    },
    "sqlAdminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "SQL Server administrator password"
      }
    },
    "jwtSecretKey": {
      "type": "securestring",
      "metadata": {
        "description": "JWT Secret Key for authentication"
      }
    },
    "frontendOrigin": {
      "type": "string",
      "defaultValue": "https://localhost:3000",
      "metadata": {
        "description": "Frontend origin URLs (semicolon-separated)"
      }
    }
  },
  "variables": {
    "tags": {
      "azd-env-name": "[parameters('environmentName')]",
      "app": "erp-microservices"
    }
  },
  "resources": {
    "rg": {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2022-09-01",
      "name": "[format('rg-{0}', parameters('environmentName'))]",
      "location": "[parameters('location')]",
      "tags": "[variables('tags')]"
    },
    "containerAppsEnvironment": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "container-apps-environment",
      "resourceGroup": "[format('rg-{0}', parameters('environmentName'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[format('cae-{0}', parameters('environmentName'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "daprEnabled": {
            "value": true
          },
          "redisHostName": {
            "value": "[reference('redis').outputs.hostName.value]"
          },
          "redisPrimaryKey": {
            "value": "[listOutputsWithSecureValues('redis', '2022-09-01').primaryKey]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "5142011908713752480"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Name of the Container Apps Environment"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location for the Container Apps Environment"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags to apply to the Container Apps Environment"
              }
            },
            "daprEnabled": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Enable Dapr on the Container Apps Environment"
              }
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Log Analytics Workspace ID for diagnostics"
              }
            },
            "redisHostName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Redis host name"
              }
            },
            "redisPrimaryKey": {
              "type": "securestring",
              "defaultValue": "",
              "metadata": {
                "description": "Redis primary key"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.App/managedEnvironments",
              "apiVersion": "2023-05-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "daprAIConnectionString": "[if(parameters('daprEnabled'), '', null())]",
                "appLogsConfiguration": "[if(not(empty(parameters('logAnalyticsWorkspaceId'))), createObject('destination', 'log-analytics', 'logAnalyticsConfiguration', createObject('customerId', reference(parameters('logAnalyticsWorkspaceId'), '2021-06-01').customerId, 'sharedKey', listKeys(parameters('logAnalyticsWorkspaceId'), '2021-06-01').primarySharedKey)), null())]"
              }
            },
            {
              "condition": "[and(parameters('daprEnabled'), not(empty(parameters('redisHostName'))))]",
              "type": "Microsoft.App/managedEnvironments/daprComponents",
              "apiVersion": "2023-05-01",
              "name": "[format('{0}/{1}', parameters('name'), 'statestore')]",
              "properties": {
                "componentType": "state.redis",
                "version": "v1",
                "ignoreErrors": false,
                "initTimeout": "60s",
                "secrets": [
                  {
                    "name": "redis-password",
                    "value": "[parameters('redisPrimaryKey')]"
                  }
                ],
                "metadata": [
                  {
                    "name": "redisHost",
                    "value": "[format('{0}:6380', parameters('redisHostName'))]"
                  },
                  {
                    "name": "redisPassword",
                    "secretRef": "redis-password"
                  },
                  {
                    "name": "enableTLS",
                    "value": "true"
                  },
                  {
                    "name": "actorStateStore",
                    "value": "false"
                  }
                ],
                "scopes": [
                  "auth-service",
                  "billing-service",
                  "inventory-service",
                  "orders-service",
                  "purchasing-service",
                  "sales-service"
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.App/managedEnvironments', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.App/managedEnvironments', parameters('name'))]"
            },
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            },
            "domain": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.App/managedEnvironments', parameters('name')), '2023-05-01').defaultDomain]"
            }
          }
        }
      },
      "dependsOn": [
        "redis",
        "rg"
      ]
    },
    "sqlServer": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "sql-server",
      "resourceGroup": "[format('rg-{0}', parameters('environmentName'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[format('sql-{0}', parameters('environmentName'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "administratorLogin": {
            "value": "sqladmin"
          },
          "administratorLoginPassword": {
            "value": "[parameters('sqlAdminPassword')]"
          },
          "databases": {
            "value": [
              {
                "name": "AuthDB"
              },
              {
                "name": "BillingDB"
              },
              {
                "name": "InventoryDB"
              },
              {
                "name": "OrderDB"
              },
              {
                "name": "PurchasingDB"
              },
              {
                "name": "SalesDB"
              }
            ]
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "11903466531180537924"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Name of the SQL Server"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location for the SQL Server"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags to apply to the SQL Server"
              }
            },
            "administratorLogin": {
              "type": "string",
              "metadata": {
                "description": "SQL Server administrator login"
              }
            },
            "administratorLoginPassword": {
              "type": "securestring",
              "metadata": {
                "description": "SQL Server administrator password"
              }
            },
            "databases": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Array of database names to create"
              }
            },
            "minimalTlsVersion": {
              "type": "string",
              "defaultValue": "1.2",
              "metadata": {
                "description": "Minimum TLS version"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Sql/servers",
              "apiVersion": "2023-05-01-preview",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "administratorLogin": "[parameters('administratorLogin')]",
                "administratorLoginPassword": "[parameters('administratorLoginPassword')]",
                "minimalTlsVersion": "[parameters('minimalTlsVersion')]",
                "publicNetworkAccess": "Enabled"
              }
            },
            {
              "type": "Microsoft.Sql/servers/firewallRules",
              "apiVersion": "2023-05-01-preview",
              "name": "[format('{0}/{1}', parameters('name'), 'AllowAllWindowsAzureIps')]",
              "properties": {
                "startIpAddress": "0.0.0.0",
                "endIpAddress": "0.0.0.0"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', parameters('name'))]"
              ]
            },
            {
              "copy": {
                "name": "sqlDatabases",
                "count": "[length(parameters('databases'))]"
              },
              "type": "Microsoft.Sql/servers/databases",
              "apiVersion": "2023-05-01-preview",
              "name": "[format('{0}/{1}', parameters('name'), parameters('databases')[copyIndex()].name)]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "Basic",
                "tier": "Basic"
              },
              "properties": {
                "collation": "SQL_Latin1_General_CP1_CI_AS",
                "maxSizeBytes": 2147483648,
                "catalogCollation": "SQL_Latin1_General_CP1_CI_AS",
                "zoneRedundant": false,
                "readScale": "Disabled",
                "requestedBackupStorageRedundancy": "Local",
                "isLedgerOn": false
              },
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.Sql/servers', parameters('name'))]"
            },
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            },
            "fqdn": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Sql/servers', parameters('name')), '2023-05-01-preview').fullyQualifiedDomainName]"
            }
          }
        }
      },
      "dependsOn": [
        "rg"
      ]
    },
    "redis": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "redis",
      "resourceGroup": "[format('rg-{0}', parameters('environmentName'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[format('redis-{0}', parameters('environmentName'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "6304339580770987389"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Name of the Redis Cache"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location for the Redis Cache"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags to apply to the Redis Cache"
              }
            },
            "sku": {
              "type": "string",
              "defaultValue": "Basic",
              "metadata": {
                "description": "Redis Cache SKU"
              }
            },
            "family": {
              "type": "string",
              "defaultValue": "C",
              "metadata": {
                "description": "Redis Cache family"
              }
            },
            "capacity": {
              "type": "int",
              "defaultValue": 0,
              "metadata": {
                "description": "Redis Cache capacity"
              }
            }
          },
          "resources": {
            "redis": {
              "type": "Microsoft.Cache/redis",
              "apiVersion": "2023-08-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "sku": {
                  "name": "[parameters('sku')]",
                  "family": "[parameters('family')]",
                  "capacity": "[parameters('capacity')]"
                },
                "enableNonSslPort": false,
                "minimumTlsVersion": "1.2",
                "publicNetworkAccess": "Enabled",
                "redisConfiguration": {
                  "maxmemory-policy": "allkeys-lru"
                }
              }
            }
          },
          "outputs": {
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.Cache/redis', parameters('name'))]"
            },
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            },
            "hostName": {
              "type": "string",
              "value": "[reference('redis').hostName]"
            },
            "sslPort": {
              "type": "int",
              "value": "[reference('redis').sslPort]"
            },
            "primaryKey": {
              "type": "securestring",
              "metadata": {
                "description": "Redis primary key - should be stored as a secret"
              },
              "value": "[listKeys('redis', '2023-08-01').primaryKey]"
            }
          }
        }
      },
      "dependsOn": [
        "rg"
      ]
    },
    "containerRegistry": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "container-registry",
      "resourceGroup": "[format('rg-{0}', parameters('environmentName'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[format('cr{0}', replace(parameters('environmentName'), '-', ''))]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "2816794832575265684"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Name of the Container Registry"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location for the Container Registry"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags to apply to the Container Registry"
              }
            },
            "sku": {
              "type": "string",
              "defaultValue": "Basic",
              "metadata": {
                "description": "Container Registry SKU"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.ContainerRegistry/registries",
              "apiVersion": "2023-01-01-preview",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "[parameters('sku')]"
              },
              "properties": {
                "adminUserEnabled": true,
                "publicNetworkAccess": "Enabled"
              }
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.ContainerRegistry/registries', parameters('name'))]"
            },
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            },
            "loginServer": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ContainerRegistry/registries', parameters('name')), '2023-01-01-preview').loginServer]"
            }
          }
        }
      },
      "dependsOn": [
        "rg"
      ]
    },
    "logAnalytics": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "log-analytics",
      "resourceGroup": "[format('rg-{0}', parameters('environmentName'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[format('log-{0}', parameters('environmentName'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "4663765806454959347"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Name of the Log Analytics Workspace"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location for the Log Analytics Workspace"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags to apply to the Log Analytics Workspace"
              }
            },
            "sku": {
              "type": "string",
              "defaultValue": "PerGB2018",
              "metadata": {
                "description": "Log Analytics Workspace SKU"
              }
            },
            "retentionInDays": {
              "type": "int",
              "defaultValue": 30,
              "metadata": {
                "description": "Data retention in days"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.OperationalInsights/workspaces",
              "apiVersion": "2022-10-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "sku": {
                  "name": "[parameters('sku')]"
                },
                "retentionInDays": "[parameters('retentionInDays')]",
                "publicNetworkAccessForIngestion": "Enabled",
                "publicNetworkAccessForQuery": "Enabled"
              }
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('name'))]"
            },
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            },
            "customerId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.OperationalInsights/workspaces', parameters('name')), '2022-10-01').customerId]"
            }
          }
        }
      },
      "dependsOn": [
        "rg"
      ]
    },
    "gateway": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "gateway",
      "resourceGroup": "[format('rg-{0}', parameters('environmentName'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "gateway"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "containerAppsEnvironmentName": {
            "value": "[reference('containerAppsEnvironment').outputs.name.value]"
          },
          "containerRegistryName": {
            "value": "[reference('containerRegistry').outputs.name.value]"
          },
          "imageName": {
            "value": "gateway:latest"
          },
          "targetPort": {
            "value": 8080
          },
          "externalIngress": {
            "value": true
          },
          "daprEnabled": {
            "value": false
          },
          "env": {
            "value": [
              {
                "name": "FRONTEND_ORIGIN",
                "value": "[parameters('frontendOrigin')]"
              },
              {
                "name": "ASPNETCORE_ENVIRONMENT",
                "value": "Production"
              }
            ]
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "5727928679719484502"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Name of the Container App"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location for the Container App"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags to apply to the Container App"
              }
            },
            "containerAppsEnvironmentName": {
              "type": "string",
              "metadata": {
                "description": "Name of the Container Apps Environment"
              }
            },
            "containerRegistryName": {
              "type": "string",
              "metadata": {
                "description": "Name of the Container Registry"
              }
            },
            "imageName": {
              "type": "string",
              "metadata": {
                "description": "Container image name"
              }
            },
            "targetPort": {
              "type": "int",
              "defaultValue": 8080,
              "metadata": {
                "description": "Target port for the container"
              }
            },
            "externalIngress": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Enable external ingress"
              }
            },
            "daprEnabled": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Enable Dapr sidecar"
              }
            },
            "daprAppId": {
              "type": "string",
              "defaultValue": "[parameters('name')]",
              "metadata": {
                "description": "Dapr app ID"
              }
            },
            "daprAppPort": {
              "type": "int",
              "defaultValue": "[parameters('targetPort')]",
              "metadata": {
                "description": "Dapr app port"
              }
            },
            "env": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Environment variables"
              }
            },
            "secrets": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Secrets for the container app"
              }
            },
            "minReplicas": {
              "type": "int",
              "defaultValue": 1,
              "metadata": {
                "description": "Minimum number of replicas"
              }
            },
            "maxReplicas": {
              "type": "int",
              "defaultValue": 10,
              "metadata": {
                "description": "Maximum number of replicas"
              }
            },
            "cpu": {
              "type": "string",
              "defaultValue": "0.5",
              "metadata": {
                "description": "CPU cores (in cores)"
              }
            },
            "memory": {
              "type": "string",
              "defaultValue": "1.0Gi",
              "metadata": {
                "description": "Memory (in Gi)"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.App/containerApps",
              "apiVersion": "2023-05-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "managedEnvironmentId": "[resourceId('Microsoft.App/managedEnvironments', parameters('containerAppsEnvironmentName'))]",
                "configuration": {
                  "ingress": {
                    "external": "[parameters('externalIngress')]",
                    "targetPort": "[parameters('targetPort')]",
                    "transport": "auto",
                    "allowInsecure": false
                  },
                  "registries": [
                    {
                      "server": "[reference(resourceId('Microsoft.ContainerRegistry/registries', parameters('containerRegistryName')), '2023-01-01-preview').loginServer]",
                      "identity": "system-assigned"
                    }
                  ],
                  "dapr": "[if(parameters('daprEnabled'), createObject('enabled', true(), 'appId', parameters('daprAppId'), 'appPort', parameters('daprAppPort'), 'appProtocol', 'http', 'enableApiLogging', true()), null())]",
                  "secrets": "[parameters('secrets')]"
                },
                "template": {
                  "containers": [
                    {
                      "name": "[parameters('name')]",
                      "image": "[format('{0}/{1}', reference(resourceId('Microsoft.ContainerRegistry/registries', parameters('containerRegistryName')), '2023-01-01-preview').loginServer, parameters('imageName'))]",
                      "resources": {
                        "cpu": "[json(parameters('cpu'))]",
                        "memory": "[parameters('memory')]"
                      },
                      "env": "[parameters('env')]",
                      "probes": [
                        {
                          "type": "Liveness",
                          "httpGet": {
                            "path": "/health",
                            "port": "[parameters('targetPort')]",
                            "scheme": "HTTP"
                          },
                          "initialDelaySeconds": 30,
                          "periodSeconds": 30,
                          "timeoutSeconds": 5,
                          "failureThreshold": 3
                        },
                        {
                          "type": "Readiness",
                          "httpGet": {
                            "path": "/health",
                            "port": "[parameters('targetPort')]",
                            "scheme": "HTTP"
                          },
                          "initialDelaySeconds": 10,
                          "periodSeconds": 10,
                          "timeoutSeconds": 3,
                          "failureThreshold": 3
                        }
                      ]
                    }
                  ],
                  "scale": {
                    "minReplicas": "[parameters('minReplicas')]",
                    "maxReplicas": "[parameters('maxReplicas')]",
                    "rules": [
                      {
                        "name": "http-rule",
                        "http": {
                          "metadata": {
                            "concurrentRequests": "100"
                          }
                        }
                      }
                    ]
                  }
                }
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', parameters('containerRegistryName'))]",
              "name": "[guid(resourceId('Microsoft.App/containerApps', parameters('name')), resourceId('Microsoft.ContainerRegistry/registries', parameters('containerRegistryName')), 'acrpull')]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.App/containerApps', parameters('name')), '2023-05-01', 'full').identity.principalId]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7f951dda-4ed3-4680-a7ca-43fe172d538d')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.App/containerApps', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.App/containerApps', parameters('name'))]"
            },
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            },
            "uri": {
              "type": "string",
              "value": "[if(parameters('externalIngress'), format('https://{0}', reference(resourceId('Microsoft.App/containerApps', parameters('name')), '2023-05-01').configuration.ingress.fqdn), '')]"
            },
            "fqdn": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.App/containerApps', parameters('name')), '2023-05-01').configuration.ingress.fqdn]"
            }
          }
        }
      },
      "dependsOn": [
        "containerAppsEnvironment",
        "containerRegistry",
        "rg"
      ]
    },
    "authService": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "auth-service",
      "resourceGroup": "[format('rg-{0}', parameters('environmentName'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "auth-service"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "containerAppsEnvironmentName": {
            "value": "[reference('containerAppsEnvironment').outputs.name.value]"
          },
          "containerRegistryName": {
            "value": "[reference('containerRegistry').outputs.name.value]"
          },
          "imageName": {
            "value": "auth-service:latest"
          },
          "targetPort": {
            "value": 8080
          },
          "externalIngress": {
            "value": false
          },
          "daprEnabled": {
            "value": true
          },
          "daprAppId": {
            "value": "auth-service"
          },
          "daprAppPort": {
            "value": 8080
          },
          "env": {
            "value": [
              {
                "name": "ConnectionStrings__AuthDb",
                "secretRef": "sql-connection-authdb"
              },
              {
                "name": "ConnectionStrings__cache",
                "secretRef": "redis-connection"
              },
              {
                "name": "Jwt__SecretKey",
                "secretRef": "jwt-secret-key"
              },
              {
                "name": "Jwt__Issuer",
                "value": "MyApp.Auth"
              },
              {
                "name": "Jwt__Audience",
                "value": "MyApp.All"
              },
              {
                "name": "FRONTEND_ORIGIN",
                "value": "[parameters('frontendOrigin')]"
              },
              {
                "name": "ASPNETCORE_ENVIRONMENT",
                "value": "Production"
              }
            ]
          },
          "secrets": {
            "value": [
              {
                "name": "sql-connection-authdb",
                "value": "[format('Server={0};Database=AuthDB;User Id=sqladmin;Password={1};', reference('sqlServer').outputs.fqdn.value, parameters('sqlAdminPassword'))]"
              },
              {
                "name": "redis-connection",
                "value": "[format('{0}:6380,password={1},ssl=True,abortConnect=False', reference('redis').outputs.hostName.value, listOutputsWithSecureValues('redis', '2022-09-01').primaryKey)]"
              },
              {
                "name": "jwt-secret-key",
                "value": "[parameters('jwtSecretKey')]"
              }
            ]
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "5727928679719484502"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Name of the Container App"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location for the Container App"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags to apply to the Container App"
              }
            },
            "containerAppsEnvironmentName": {
              "type": "string",
              "metadata": {
                "description": "Name of the Container Apps Environment"
              }
            },
            "containerRegistryName": {
              "type": "string",
              "metadata": {
                "description": "Name of the Container Registry"
              }
            },
            "imageName": {
              "type": "string",
              "metadata": {
                "description": "Container image name"
              }
            },
            "targetPort": {
              "type": "int",
              "defaultValue": 8080,
              "metadata": {
                "description": "Target port for the container"
              }
            },
            "externalIngress": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Enable external ingress"
              }
            },
            "daprEnabled": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Enable Dapr sidecar"
              }
            },
            "daprAppId": {
              "type": "string",
              "defaultValue": "[parameters('name')]",
              "metadata": {
                "description": "Dapr app ID"
              }
            },
            "daprAppPort": {
              "type": "int",
              "defaultValue": "[parameters('targetPort')]",
              "metadata": {
                "description": "Dapr app port"
              }
            },
            "env": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Environment variables"
              }
            },
            "secrets": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Secrets for the container app"
              }
            },
            "minReplicas": {
              "type": "int",
              "defaultValue": 1,
              "metadata": {
                "description": "Minimum number of replicas"
              }
            },
            "maxReplicas": {
              "type": "int",
              "defaultValue": 10,
              "metadata": {
                "description": "Maximum number of replicas"
              }
            },
            "cpu": {
              "type": "string",
              "defaultValue": "0.5",
              "metadata": {
                "description": "CPU cores (in cores)"
              }
            },
            "memory": {
              "type": "string",
              "defaultValue": "1.0Gi",
              "metadata": {
                "description": "Memory (in Gi)"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.App/containerApps",
              "apiVersion": "2023-05-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "managedEnvironmentId": "[resourceId('Microsoft.App/managedEnvironments', parameters('containerAppsEnvironmentName'))]",
                "configuration": {
                  "ingress": {
                    "external": "[parameters('externalIngress')]",
                    "targetPort": "[parameters('targetPort')]",
                    "transport": "auto",
                    "allowInsecure": false
                  },
                  "registries": [
                    {
                      "server": "[reference(resourceId('Microsoft.ContainerRegistry/registries', parameters('containerRegistryName')), '2023-01-01-preview').loginServer]",
                      "identity": "system-assigned"
                    }
                  ],
                  "dapr": "[if(parameters('daprEnabled'), createObject('enabled', true(), 'appId', parameters('daprAppId'), 'appPort', parameters('daprAppPort'), 'appProtocol', 'http', 'enableApiLogging', true()), null())]",
                  "secrets": "[parameters('secrets')]"
                },
                "template": {
                  "containers": [
                    {
                      "name": "[parameters('name')]",
                      "image": "[format('{0}/{1}', reference(resourceId('Microsoft.ContainerRegistry/registries', parameters('containerRegistryName')), '2023-01-01-preview').loginServer, parameters('imageName'))]",
                      "resources": {
                        "cpu": "[json(parameters('cpu'))]",
                        "memory": "[parameters('memory')]"
                      },
                      "env": "[parameters('env')]",
                      "probes": [
                        {
                          "type": "Liveness",
                          "httpGet": {
                            "path": "/health",
                            "port": "[parameters('targetPort')]",
                            "scheme": "HTTP"
                          },
                          "initialDelaySeconds": 30,
                          "periodSeconds": 30,
                          "timeoutSeconds": 5,
                          "failureThreshold": 3
                        },
                        {
                          "type": "Readiness",
                          "httpGet": {
                            "path": "/health",
                            "port": "[parameters('targetPort')]",
                            "scheme": "HTTP"
                          },
                          "initialDelaySeconds": 10,
                          "periodSeconds": 10,
                          "timeoutSeconds": 3,
                          "failureThreshold": 3
                        }
                      ]
                    }
                  ],
                  "scale": {
                    "minReplicas": "[parameters('minReplicas')]",
                    "maxReplicas": "[parameters('maxReplicas')]",
                    "rules": [
                      {
                        "name": "http-rule",
                        "http": {
                          "metadata": {
                            "concurrentRequests": "100"
                          }
                        }
                      }
                    ]
                  }
                }
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', parameters('containerRegistryName'))]",
              "name": "[guid(resourceId('Microsoft.App/containerApps', parameters('name')), resourceId('Microsoft.ContainerRegistry/registries', parameters('containerRegistryName')), 'acrpull')]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.App/containerApps', parameters('name')), '2023-05-01', 'full').identity.principalId]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7f951dda-4ed3-4680-a7ca-43fe172d538d')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.App/containerApps', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.App/containerApps', parameters('name'))]"
            },
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            },
            "uri": {
              "type": "string",
              "value": "[if(parameters('externalIngress'), format('https://{0}', reference(resourceId('Microsoft.App/containerApps', parameters('name')), '2023-05-01').configuration.ingress.fqdn), '')]"
            },
            "fqdn": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.App/containerApps', parameters('name')), '2023-05-01').configuration.ingress.fqdn]"
            }
          }
        }
      },
      "dependsOn": [
        "containerAppsEnvironment",
        "containerRegistry",
        "redis",
        "rg",
        "sqlServer"
      ]
    },
    "billingService": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "billing-service",
      "resourceGroup": "[format('rg-{0}', parameters('environmentName'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "billing-service"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "containerAppsEnvironmentName": {
            "value": "[reference('containerAppsEnvironment').outputs.name.value]"
          },
          "containerRegistryName": {
            "value": "[reference('containerRegistry').outputs.name.value]"
          },
          "imageName": {
            "value": "billing-service:latest"
          },
          "targetPort": {
            "value": 8080
          },
          "externalIngress": {
            "value": false
          },
          "daprEnabled": {
            "value": true
          },
          "daprAppId": {
            "value": "billing-service"
          },
          "daprAppPort": {
            "value": 8080
          },
          "env": {
            "value": [
              {
                "name": "ConnectionStrings__BillingDb",
                "secretRef": "sql-connection-billingdb"
              },
              {
                "name": "ConnectionStrings__cache",
                "secretRef": "redis-connection"
              },
              {
                "name": "Jwt__SecretKey",
                "secretRef": "jwt-secret-key"
              },
              {
                "name": "Jwt__Issuer",
                "value": "MyApp.Auth"
              },
              {
                "name": "Jwt__Audience",
                "value": "MyApp.All"
              },
              {
                "name": "FRONTEND_ORIGIN",
                "value": "[parameters('frontendOrigin')]"
              },
              {
                "name": "ASPNETCORE_ENVIRONMENT",
                "value": "Production"
              }
            ]
          },
          "secrets": {
            "value": [
              {
                "name": "sql-connection-billingdb",
                "value": "[format('Server={0};Database=BillingDB;User Id=sqladmin;Password={1};TrustServerCertificate=True;', reference('sqlServer').outputs.fqdn.value, parameters('sqlAdminPassword'))]"
              },
              {
                "name": "redis-connection",
                "value": "[format('{0}:6380,password={1},ssl=True,abortConnect=False', reference('redis').outputs.hostName.value, listOutputsWithSecureValues('redis', '2022-09-01').primaryKey)]"
              },
              {
                "name": "jwt-secret-key",
                "value": "[parameters('jwtSecretKey')]"
              }
            ]
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "5727928679719484502"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Name of the Container App"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location for the Container App"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags to apply to the Container App"
              }
            },
            "containerAppsEnvironmentName": {
              "type": "string",
              "metadata": {
                "description": "Name of the Container Apps Environment"
              }
            },
            "containerRegistryName": {
              "type": "string",
              "metadata": {
                "description": "Name of the Container Registry"
              }
            },
            "imageName": {
              "type": "string",
              "metadata": {
                "description": "Container image name"
              }
            },
            "targetPort": {
              "type": "int",
              "defaultValue": 8080,
              "metadata": {
                "description": "Target port for the container"
              }
            },
            "externalIngress": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Enable external ingress"
              }
            },
            "daprEnabled": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Enable Dapr sidecar"
              }
            },
            "daprAppId": {
              "type": "string",
              "defaultValue": "[parameters('name')]",
              "metadata": {
                "description": "Dapr app ID"
              }
            },
            "daprAppPort": {
              "type": "int",
              "defaultValue": "[parameters('targetPort')]",
              "metadata": {
                "description": "Dapr app port"
              }
            },
            "env": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Environment variables"
              }
            },
            "secrets": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Secrets for the container app"
              }
            },
            "minReplicas": {
              "type": "int",
              "defaultValue": 1,
              "metadata": {
                "description": "Minimum number of replicas"
              }
            },
            "maxReplicas": {
              "type": "int",
              "defaultValue": 10,
              "metadata": {
                "description": "Maximum number of replicas"
              }
            },
            "cpu": {
              "type": "string",
              "defaultValue": "0.5",
              "metadata": {
                "description": "CPU cores (in cores)"
              }
            },
            "memory": {
              "type": "string",
              "defaultValue": "1.0Gi",
              "metadata": {
                "description": "Memory (in Gi)"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.App/containerApps",
              "apiVersion": "2023-05-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "managedEnvironmentId": "[resourceId('Microsoft.App/managedEnvironments', parameters('containerAppsEnvironmentName'))]",
                "configuration": {
                  "ingress": {
                    "external": "[parameters('externalIngress')]",
                    "targetPort": "[parameters('targetPort')]",
                    "transport": "auto",
                    "allowInsecure": false
                  },
                  "registries": [
                    {
                      "server": "[reference(resourceId('Microsoft.ContainerRegistry/registries', parameters('containerRegistryName')), '2023-01-01-preview').loginServer]",
                      "identity": "system-assigned"
                    }
                  ],
                  "dapr": "[if(parameters('daprEnabled'), createObject('enabled', true(), 'appId', parameters('daprAppId'), 'appPort', parameters('daprAppPort'), 'appProtocol', 'http', 'enableApiLogging', true()), null())]",
                  "secrets": "[parameters('secrets')]"
                },
                "template": {
                  "containers": [
                    {
                      "name": "[parameters('name')]",
                      "image": "[format('{0}/{1}', reference(resourceId('Microsoft.ContainerRegistry/registries', parameters('containerRegistryName')), '2023-01-01-preview').loginServer, parameters('imageName'))]",
                      "resources": {
                        "cpu": "[json(parameters('cpu'))]",
                        "memory": "[parameters('memory')]"
                      },
                      "env": "[parameters('env')]",
                      "probes": [
                        {
                          "type": "Liveness",
                          "httpGet": {
                            "path": "/health",
                            "port": "[parameters('targetPort')]",
                            "scheme": "HTTP"
                          },
                          "initialDelaySeconds": 30,
                          "periodSeconds": 30,
                          "timeoutSeconds": 5,
                          "failureThreshold": 3
                        },
                        {
                          "type": "Readiness",
                          "httpGet": {
                            "path": "/health",
                            "port": "[parameters('targetPort')]",
                            "scheme": "HTTP"
                          },
                          "initialDelaySeconds": 10,
                          "periodSeconds": 10,
                          "timeoutSeconds": 3,
                          "failureThreshold": 3
                        }
                      ]
                    }
                  ],
                  "scale": {
                    "minReplicas": "[parameters('minReplicas')]",
                    "maxReplicas": "[parameters('maxReplicas')]",
                    "rules": [
                      {
                        "name": "http-rule",
                        "http": {
                          "metadata": {
                            "concurrentRequests": "100"
                          }
                        }
                      }
                    ]
                  }
                }
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', parameters('containerRegistryName'))]",
              "name": "[guid(resourceId('Microsoft.App/containerApps', parameters('name')), resourceId('Microsoft.ContainerRegistry/registries', parameters('containerRegistryName')), 'acrpull')]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.App/containerApps', parameters('name')), '2023-05-01', 'full').identity.principalId]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7f951dda-4ed3-4680-a7ca-43fe172d538d')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.App/containerApps', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.App/containerApps', parameters('name'))]"
            },
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            },
            "uri": {
              "type": "string",
              "value": "[if(parameters('externalIngress'), format('https://{0}', reference(resourceId('Microsoft.App/containerApps', parameters('name')), '2023-05-01').configuration.ingress.fqdn), '')]"
            },
            "fqdn": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.App/containerApps', parameters('name')), '2023-05-01').configuration.ingress.fqdn]"
            }
          }
        }
      },
      "dependsOn": [
        "containerAppsEnvironment",
        "containerRegistry",
        "redis",
        "rg",
        "sqlServer"
      ]
    },
    "inventoryService": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "inventory-service",
      "resourceGroup": "[format('rg-{0}', parameters('environmentName'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "inventory-service"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "containerAppsEnvironmentName": {
            "value": "[reference('containerAppsEnvironment').outputs.name.value]"
          },
          "containerRegistryName": {
            "value": "[reference('containerRegistry').outputs.name.value]"
          },
          "imageName": {
            "value": "inventory-service:latest"
          },
          "targetPort": {
            "value": 8080
          },
          "externalIngress": {
            "value": false
          },
          "daprEnabled": {
            "value": true
          },
          "daprAppId": {
            "value": "inventory-service"
          },
          "daprAppPort": {
            "value": 8080
          },
          "env": {
            "value": [
              {
                "name": "ConnectionStrings__InventoryDb",
                "secretRef": "sql-connection-inventorydb"
              },
              {
                "name": "ConnectionStrings__cache",
                "secretRef": "redis-connection"
              },
              {
                "name": "Jwt__SecretKey",
                "secretRef": "jwt-secret-key"
              },
              {
                "name": "Jwt__Issuer",
                "value": "MyApp.Auth"
              },
              {
                "name": "Jwt__Audience",
                "value": "MyApp.All"
              },
              {
                "name": "FRONTEND_ORIGIN",
                "value": "[parameters('frontendOrigin')]"
              },
              {
                "name": "ASPNETCORE_ENVIRONMENT",
                "value": "Production"
              }
            ]
          },
          "secrets": {
            "value": [
              {
                "name": "sql-connection-inventorydb",
                "value": "[format('Server={0};Database=InventoryDB;User Id=sqladmin;Password={1};TrustServerCertificate=True;', reference('sqlServer').outputs.fqdn.value, parameters('sqlAdminPassword'))]"
              },
              {
                "name": "redis-connection",
                "value": "[format('{0}:6380,password={1},ssl=True,abortConnect=False', reference('redis').outputs.hostName.value, listOutputsWithSecureValues('redis', '2022-09-01').primaryKey)]"
              },
              {
                "name": "jwt-secret-key",
                "value": "[parameters('jwtSecretKey')]"
              }
            ]
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "5727928679719484502"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Name of the Container App"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location for the Container App"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags to apply to the Container App"
              }
            },
            "containerAppsEnvironmentName": {
              "type": "string",
              "metadata": {
                "description": "Name of the Container Apps Environment"
              }
            },
            "containerRegistryName": {
              "type": "string",
              "metadata": {
                "description": "Name of the Container Registry"
              }
            },
            "imageName": {
              "type": "string",
              "metadata": {
                "description": "Container image name"
              }
            },
            "targetPort": {
              "type": "int",
              "defaultValue": 8080,
              "metadata": {
                "description": "Target port for the container"
              }
            },
            "externalIngress": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Enable external ingress"
              }
            },
            "daprEnabled": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Enable Dapr sidecar"
              }
            },
            "daprAppId": {
              "type": "string",
              "defaultValue": "[parameters('name')]",
              "metadata": {
                "description": "Dapr app ID"
              }
            },
            "daprAppPort": {
              "type": "int",
              "defaultValue": "[parameters('targetPort')]",
              "metadata": {
                "description": "Dapr app port"
              }
            },
            "env": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Environment variables"
              }
            },
            "secrets": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Secrets for the container app"
              }
            },
            "minReplicas": {
              "type": "int",
              "defaultValue": 1,
              "metadata": {
                "description": "Minimum number of replicas"
              }
            },
            "maxReplicas": {
              "type": "int",
              "defaultValue": 10,
              "metadata": {
                "description": "Maximum number of replicas"
              }
            },
            "cpu": {
              "type": "string",
              "defaultValue": "0.5",
              "metadata": {
                "description": "CPU cores (in cores)"
              }
            },
            "memory": {
              "type": "string",
              "defaultValue": "1.0Gi",
              "metadata": {
                "description": "Memory (in Gi)"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.App/containerApps",
              "apiVersion": "2023-05-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "managedEnvironmentId": "[resourceId('Microsoft.App/managedEnvironments', parameters('containerAppsEnvironmentName'))]",
                "configuration": {
                  "ingress": {
                    "external": "[parameters('externalIngress')]",
                    "targetPort": "[parameters('targetPort')]",
                    "transport": "auto",
                    "allowInsecure": false
                  },
                  "registries": [
                    {
                      "server": "[reference(resourceId('Microsoft.ContainerRegistry/registries', parameters('containerRegistryName')), '2023-01-01-preview').loginServer]",
                      "identity": "system-assigned"
                    }
                  ],
                  "dapr": "[if(parameters('daprEnabled'), createObject('enabled', true(), 'appId', parameters('daprAppId'), 'appPort', parameters('daprAppPort'), 'appProtocol', 'http', 'enableApiLogging', true()), null())]",
                  "secrets": "[parameters('secrets')]"
                },
                "template": {
                  "containers": [
                    {
                      "name": "[parameters('name')]",
                      "image": "[format('{0}/{1}', reference(resourceId('Microsoft.ContainerRegistry/registries', parameters('containerRegistryName')), '2023-01-01-preview').loginServer, parameters('imageName'))]",
                      "resources": {
                        "cpu": "[json(parameters('cpu'))]",
                        "memory": "[parameters('memory')]"
                      },
                      "env": "[parameters('env')]",
                      "probes": [
                        {
                          "type": "Liveness",
                          "httpGet": {
                            "path": "/health",
                            "port": "[parameters('targetPort')]",
                            "scheme": "HTTP"
                          },
                          "initialDelaySeconds": 30,
                          "periodSeconds": 30,
                          "timeoutSeconds": 5,
                          "failureThreshold": 3
                        },
                        {
                          "type": "Readiness",
                          "httpGet": {
                            "path": "/health",
                            "port": "[parameters('targetPort')]",
                            "scheme": "HTTP"
                          },
                          "initialDelaySeconds": 10,
                          "periodSeconds": 10,
                          "timeoutSeconds": 3,
                          "failureThreshold": 3
                        }
                      ]
                    }
                  ],
                  "scale": {
                    "minReplicas": "[parameters('minReplicas')]",
                    "maxReplicas": "[parameters('maxReplicas')]",
                    "rules": [
                      {
                        "name": "http-rule",
                        "http": {
                          "metadata": {
                            "concurrentRequests": "100"
                          }
                        }
                      }
                    ]
                  }
                }
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', parameters('containerRegistryName'))]",
              "name": "[guid(resourceId('Microsoft.App/containerApps', parameters('name')), resourceId('Microsoft.ContainerRegistry/registries', parameters('containerRegistryName')), 'acrpull')]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.App/containerApps', parameters('name')), '2023-05-01', 'full').identity.principalId]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7f951dda-4ed3-4680-a7ca-43fe172d538d')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.App/containerApps', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.App/containerApps', parameters('name'))]"
            },
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            },
            "uri": {
              "type": "string",
              "value": "[if(parameters('externalIngress'), format('https://{0}', reference(resourceId('Microsoft.App/containerApps', parameters('name')), '2023-05-01').configuration.ingress.fqdn), '')]"
            },
            "fqdn": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.App/containerApps', parameters('name')), '2023-05-01').configuration.ingress.fqdn]"
            }
          }
        }
      },
      "dependsOn": [
        "containerAppsEnvironment",
        "containerRegistry",
        "redis",
        "rg",
        "sqlServer"
      ]
    },
    "ordersService": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "orders-service",
      "resourceGroup": "[format('rg-{0}', parameters('environmentName'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "orders-service"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "containerAppsEnvironmentName": {
            "value": "[reference('containerAppsEnvironment').outputs.name.value]"
          },
          "containerRegistryName": {
            "value": "[reference('containerRegistry').outputs.name.value]"
          },
          "imageName": {
            "value": "orders-service:latest"
          },
          "targetPort": {
            "value": 8080
          },
          "externalIngress": {
            "value": false
          },
          "daprEnabled": {
            "value": true
          },
          "daprAppId": {
            "value": "orders-service"
          },
          "daprAppPort": {
            "value": 8080
          },
          "env": {
            "value": [
              {
                "name": "ConnectionStrings__OrdersDb",
                "secretRef": "sql-connection-ordersdb"
              },
              {
                "name": "ConnectionStrings__cache",
                "secretRef": "redis-connection"
              },
              {
                "name": "Jwt__SecretKey",
                "secretRef": "jwt-secret-key"
              },
              {
                "name": "Jwt__Issuer",
                "value": "MyApp.Auth"
              },
              {
                "name": "Jwt__Audience",
                "value": "MyApp.All"
              },
              {
                "name": "FRONTEND_ORIGIN",
                "value": "[parameters('frontendOrigin')]"
              },
              {
                "name": "ASPNETCORE_ENVIRONMENT",
                "value": "Production"
              }
            ]
          },
          "secrets": {
            "value": [
              {
                "name": "sql-connection-ordersdb",
                "value": "[format('Server={0};Database=OrderDB;User Id=sqladmin;Password={1};TrustServerCertificate=True;', reference('sqlServer').outputs.fqdn.value, parameters('sqlAdminPassword'))]"
              },
              {
                "name": "redis-connection",
                "value": "[format('{0}:6380,password={1},ssl=True,abortConnect=False', reference('redis').outputs.hostName.value, listOutputsWithSecureValues('redis', '2022-09-01').primaryKey)]"
              },
              {
                "name": "jwt-secret-key",
                "value": "[parameters('jwtSecretKey')]"
              }
            ]
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "5727928679719484502"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Name of the Container App"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location for the Container App"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags to apply to the Container App"
              }
            },
            "containerAppsEnvironmentName": {
              "type": "string",
              "metadata": {
                "description": "Name of the Container Apps Environment"
              }
            },
            "containerRegistryName": {
              "type": "string",
              "metadata": {
                "description": "Name of the Container Registry"
              }
            },
            "imageName": {
              "type": "string",
              "metadata": {
                "description": "Container image name"
              }
            },
            "targetPort": {
              "type": "int",
              "defaultValue": 8080,
              "metadata": {
                "description": "Target port for the container"
              }
            },
            "externalIngress": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Enable external ingress"
              }
            },
            "daprEnabled": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Enable Dapr sidecar"
              }
            },
            "daprAppId": {
              "type": "string",
              "defaultValue": "[parameters('name')]",
              "metadata": {
                "description": "Dapr app ID"
              }
            },
            "daprAppPort": {
              "type": "int",
              "defaultValue": "[parameters('targetPort')]",
              "metadata": {
                "description": "Dapr app port"
              }
            },
            "env": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Environment variables"
              }
            },
            "secrets": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Secrets for the container app"
              }
            },
            "minReplicas": {
              "type": "int",
              "defaultValue": 1,
              "metadata": {
                "description": "Minimum number of replicas"
              }
            },
            "maxReplicas": {
              "type": "int",
              "defaultValue": 10,
              "metadata": {
                "description": "Maximum number of replicas"
              }
            },
            "cpu": {
              "type": "string",
              "defaultValue": "0.5",
              "metadata": {
                "description": "CPU cores (in cores)"
              }
            },
            "memory": {
              "type": "string",
              "defaultValue": "1.0Gi",
              "metadata": {
                "description": "Memory (in Gi)"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.App/containerApps",
              "apiVersion": "2023-05-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "managedEnvironmentId": "[resourceId('Microsoft.App/managedEnvironments', parameters('containerAppsEnvironmentName'))]",
                "configuration": {
                  "ingress": {
                    "external": "[parameters('externalIngress')]",
                    "targetPort": "[parameters('targetPort')]",
                    "transport": "auto",
                    "allowInsecure": false
                  },
                  "registries": [
                    {
                      "server": "[reference(resourceId('Microsoft.ContainerRegistry/registries', parameters('containerRegistryName')), '2023-01-01-preview').loginServer]",
                      "identity": "system-assigned"
                    }
                  ],
                  "dapr": "[if(parameters('daprEnabled'), createObject('enabled', true(), 'appId', parameters('daprAppId'), 'appPort', parameters('daprAppPort'), 'appProtocol', 'http', 'enableApiLogging', true()), null())]",
                  "secrets": "[parameters('secrets')]"
                },
                "template": {
                  "containers": [
                    {
                      "name": "[parameters('name')]",
                      "image": "[format('{0}/{1}', reference(resourceId('Microsoft.ContainerRegistry/registries', parameters('containerRegistryName')), '2023-01-01-preview').loginServer, parameters('imageName'))]",
                      "resources": {
                        "cpu": "[json(parameters('cpu'))]",
                        "memory": "[parameters('memory')]"
                      },
                      "env": "[parameters('env')]",
                      "probes": [
                        {
                          "type": "Liveness",
                          "httpGet": {
                            "path": "/health",
                            "port": "[parameters('targetPort')]",
                            "scheme": "HTTP"
                          },
                          "initialDelaySeconds": 30,
                          "periodSeconds": 30,
                          "timeoutSeconds": 5,
                          "failureThreshold": 3
                        },
                        {
                          "type": "Readiness",
                          "httpGet": {
                            "path": "/health",
                            "port": "[parameters('targetPort')]",
                            "scheme": "HTTP"
                          },
                          "initialDelaySeconds": 10,
                          "periodSeconds": 10,
                          "timeoutSeconds": 3,
                          "failureThreshold": 3
                        }
                      ]
                    }
                  ],
                  "scale": {
                    "minReplicas": "[parameters('minReplicas')]",
                    "maxReplicas": "[parameters('maxReplicas')]",
                    "rules": [
                      {
                        "name": "http-rule",
                        "http": {
                          "metadata": {
                            "concurrentRequests": "100"
                          }
                        }
                      }
                    ]
                  }
                }
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', parameters('containerRegistryName'))]",
              "name": "[guid(resourceId('Microsoft.App/containerApps', parameters('name')), resourceId('Microsoft.ContainerRegistry/registries', parameters('containerRegistryName')), 'acrpull')]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.App/containerApps', parameters('name')), '2023-05-01', 'full').identity.principalId]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7f951dda-4ed3-4680-a7ca-43fe172d538d')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.App/containerApps', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.App/containerApps', parameters('name'))]"
            },
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            },
            "uri": {
              "type": "string",
              "value": "[if(parameters('externalIngress'), format('https://{0}', reference(resourceId('Microsoft.App/containerApps', parameters('name')), '2023-05-01').configuration.ingress.fqdn), '')]"
            },
            "fqdn": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.App/containerApps', parameters('name')), '2023-05-01').configuration.ingress.fqdn]"
            }
          }
        }
      },
      "dependsOn": [
        "containerAppsEnvironment",
        "containerRegistry",
        "redis",
        "rg",
        "sqlServer"
      ]
    },
    "purchasingService": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "purchasing-service",
      "resourceGroup": "[format('rg-{0}', parameters('environmentName'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "purchasing-service"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "containerAppsEnvironmentName": {
            "value": "[reference('containerAppsEnvironment').outputs.name.value]"
          },
          "containerRegistryName": {
            "value": "[reference('containerRegistry').outputs.name.value]"
          },
          "imageName": {
            "value": "purchasing-service:latest"
          },
          "targetPort": {
            "value": 8080
          },
          "externalIngress": {
            "value": false
          },
          "daprEnabled": {
            "value": true
          },
          "daprAppId": {
            "value": "purchasing-service"
          },
          "daprAppPort": {
            "value": 8080
          },
          "env": {
            "value": [
              {
                "name": "ConnectionStrings__PurchasingDb",
                "secretRef": "sql-connection-purchasingdb"
              },
              {
                "name": "ConnectionStrings__cache",
                "secretRef": "redis-connection"
              },
              {
                "name": "Jwt__SecretKey",
                "secretRef": "jwt-secret-key"
              },
              {
                "name": "Jwt__Issuer",
                "value": "MyApp.Auth"
              },
              {
                "name": "Jwt__Audience",
                "value": "MyApp.All"
              },
              {
                "name": "FRONTEND_ORIGIN",
                "value": "[parameters('frontendOrigin')]"
              },
              {
                "name": "ASPNETCORE_ENVIRONMENT",
                "value": "Production"
              }
            ]
          },
          "secrets": {
            "value": [
              {
                "name": "sql-connection-purchasingdb",
                "value": "[format('Server={0};Database=PurchasingDB;User Id=sqladmin;Password={1};TrustServerCertificate=True;', reference('sqlServer').outputs.fqdn.value, parameters('sqlAdminPassword'))]"
              },
              {
                "name": "redis-connection",
                "value": "[format('{0}:6380,password={1},ssl=True,abortConnect=False', reference('redis').outputs.hostName.value, listOutputsWithSecureValues('redis', '2022-09-01').primaryKey)]"
              },
              {
                "name": "jwt-secret-key",
                "value": "[parameters('jwtSecretKey')]"
              }
            ]
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "5727928679719484502"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Name of the Container App"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location for the Container App"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags to apply to the Container App"
              }
            },
            "containerAppsEnvironmentName": {
              "type": "string",
              "metadata": {
                "description": "Name of the Container Apps Environment"
              }
            },
            "containerRegistryName": {
              "type": "string",
              "metadata": {
                "description": "Name of the Container Registry"
              }
            },
            "imageName": {
              "type": "string",
              "metadata": {
                "description": "Container image name"
              }
            },
            "targetPort": {
              "type": "int",
              "defaultValue": 8080,
              "metadata": {
                "description": "Target port for the container"
              }
            },
            "externalIngress": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Enable external ingress"
              }
            },
            "daprEnabled": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Enable Dapr sidecar"
              }
            },
            "daprAppId": {
              "type": "string",
              "defaultValue": "[parameters('name')]",
              "metadata": {
                "description": "Dapr app ID"
              }
            },
            "daprAppPort": {
              "type": "int",
              "defaultValue": "[parameters('targetPort')]",
              "metadata": {
                "description": "Dapr app port"
              }
            },
            "env": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Environment variables"
              }
            },
            "secrets": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Secrets for the container app"
              }
            },
            "minReplicas": {
              "type": "int",
              "defaultValue": 1,
              "metadata": {
                "description": "Minimum number of replicas"
              }
            },
            "maxReplicas": {
              "type": "int",
              "defaultValue": 10,
              "metadata": {
                "description": "Maximum number of replicas"
              }
            },
            "cpu": {
              "type": "string",
              "defaultValue": "0.5",
              "metadata": {
                "description": "CPU cores (in cores)"
              }
            },
            "memory": {
              "type": "string",
              "defaultValue": "1.0Gi",
              "metadata": {
                "description": "Memory (in Gi)"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.App/containerApps",
              "apiVersion": "2023-05-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "managedEnvironmentId": "[resourceId('Microsoft.App/managedEnvironments', parameters('containerAppsEnvironmentName'))]",
                "configuration": {
                  "ingress": {
                    "external": "[parameters('externalIngress')]",
                    "targetPort": "[parameters('targetPort')]",
                    "transport": "auto",
                    "allowInsecure": false
                  },
                  "registries": [
                    {
                      "server": "[reference(resourceId('Microsoft.ContainerRegistry/registries', parameters('containerRegistryName')), '2023-01-01-preview').loginServer]",
                      "identity": "system-assigned"
                    }
                  ],
                  "dapr": "[if(parameters('daprEnabled'), createObject('enabled', true(), 'appId', parameters('daprAppId'), 'appPort', parameters('daprAppPort'), 'appProtocol', 'http', 'enableApiLogging', true()), null())]",
                  "secrets": "[parameters('secrets')]"
                },
                "template": {
                  "containers": [
                    {
                      "name": "[parameters('name')]",
                      "image": "[format('{0}/{1}', reference(resourceId('Microsoft.ContainerRegistry/registries', parameters('containerRegistryName')), '2023-01-01-preview').loginServer, parameters('imageName'))]",
                      "resources": {
                        "cpu": "[json(parameters('cpu'))]",
                        "memory": "[parameters('memory')]"
                      },
                      "env": "[parameters('env')]",
                      "probes": [
                        {
                          "type": "Liveness",
                          "httpGet": {
                            "path": "/health",
                            "port": "[parameters('targetPort')]",
                            "scheme": "HTTP"
                          },
                          "initialDelaySeconds": 30,
                          "periodSeconds": 30,
                          "timeoutSeconds": 5,
                          "failureThreshold": 3
                        },
                        {
                          "type": "Readiness",
                          "httpGet": {
                            "path": "/health",
                            "port": "[parameters('targetPort')]",
                            "scheme": "HTTP"
                          },
                          "initialDelaySeconds": 10,
                          "periodSeconds": 10,
                          "timeoutSeconds": 3,
                          "failureThreshold": 3
                        }
                      ]
                    }
                  ],
                  "scale": {
                    "minReplicas": "[parameters('minReplicas')]",
                    "maxReplicas": "[parameters('maxReplicas')]",
                    "rules": [
                      {
                        "name": "http-rule",
                        "http": {
                          "metadata": {
                            "concurrentRequests": "100"
                          }
                        }
                      }
                    ]
                  }
                }
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', parameters('containerRegistryName'))]",
              "name": "[guid(resourceId('Microsoft.App/containerApps', parameters('name')), resourceId('Microsoft.ContainerRegistry/registries', parameters('containerRegistryName')), 'acrpull')]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.App/containerApps', parameters('name')), '2023-05-01', 'full').identity.principalId]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7f951dda-4ed3-4680-a7ca-43fe172d538d')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.App/containerApps', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.App/containerApps', parameters('name'))]"
            },
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            },
            "uri": {
              "type": "string",
              "value": "[if(parameters('externalIngress'), format('https://{0}', reference(resourceId('Microsoft.App/containerApps', parameters('name')), '2023-05-01').configuration.ingress.fqdn), '')]"
            },
            "fqdn": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.App/containerApps', parameters('name')), '2023-05-01').configuration.ingress.fqdn]"
            }
          }
        }
      },
      "dependsOn": [
        "containerAppsEnvironment",
        "containerRegistry",
        "redis",
        "rg",
        "sqlServer"
      ]
    },
    "salesService": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "sales-service",
      "resourceGroup": "[format('rg-{0}', parameters('environmentName'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "sales-service"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "containerAppsEnvironmentName": {
            "value": "[reference('containerAppsEnvironment').outputs.name.value]"
          },
          "containerRegistryName": {
            "value": "[reference('containerRegistry').outputs.name.value]"
          },
          "imageName": {
            "value": "sales-service:latest"
          },
          "targetPort": {
            "value": 8080
          },
          "externalIngress": {
            "value": false
          },
          "daprEnabled": {
            "value": true
          },
          "daprAppId": {
            "value": "sales-service"
          },
          "daprAppPort": {
            "value": 8080
          },
          "env": {
            "value": [
              {
                "name": "ConnectionStrings__SalesDb",
                "secretRef": "sql-connection-salesdb"
              },
              {
                "name": "ConnectionStrings__cache",
                "secretRef": "redis-connection"
              },
              {
                "name": "Jwt__SecretKey",
                "secretRef": "jwt-secret-key"
              },
              {
                "name": "Jwt__Issuer",
                "value": "MyApp.Auth"
              },
              {
                "name": "Jwt__Audience",
                "value": "MyApp.All"
              },
              {
                "name": "FRONTEND_ORIGIN",
                "value": "[parameters('frontendOrigin')]"
              },
              {
                "name": "ASPNETCORE_ENVIRONMENT",
                "value": "Production"
              }
            ]
          },
          "secrets": {
            "value": [
              {
                "name": "sql-connection-salesdb",
                "value": "[format('Server={0};Database=SalesDB;User Id=sqladmin;Password={1};TrustServerCertificate=True;', reference('sqlServer').outputs.fqdn.value, parameters('sqlAdminPassword'))]"
              },
              {
                "name": "redis-connection",
                "value": "[format('{0}:6380,password={1},ssl=True,abortConnect=False', reference('redis').outputs.hostName.value, listOutputsWithSecureValues('redis', '2022-09-01').primaryKey)]"
              },
              {
                "name": "jwt-secret-key",
                "value": "[parameters('jwtSecretKey')]"
              }
            ]
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "5727928679719484502"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Name of the Container App"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location for the Container App"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags to apply to the Container App"
              }
            },
            "containerAppsEnvironmentName": {
              "type": "string",
              "metadata": {
                "description": "Name of the Container Apps Environment"
              }
            },
            "containerRegistryName": {
              "type": "string",
              "metadata": {
                "description": "Name of the Container Registry"
              }
            },
            "imageName": {
              "type": "string",
              "metadata": {
                "description": "Container image name"
              }
            },
            "targetPort": {
              "type": "int",
              "defaultValue": 8080,
              "metadata": {
                "description": "Target port for the container"
              }
            },
            "externalIngress": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Enable external ingress"
              }
            },
            "daprEnabled": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Enable Dapr sidecar"
              }
            },
            "daprAppId": {
              "type": "string",
              "defaultValue": "[parameters('name')]",
              "metadata": {
                "description": "Dapr app ID"
              }
            },
            "daprAppPort": {
              "type": "int",
              "defaultValue": "[parameters('targetPort')]",
              "metadata": {
                "description": "Dapr app port"
              }
            },
            "env": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Environment variables"
              }
            },
            "secrets": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Secrets for the container app"
              }
            },
            "minReplicas": {
              "type": "int",
              "defaultValue": 1,
              "metadata": {
                "description": "Minimum number of replicas"
              }
            },
            "maxReplicas": {
              "type": "int",
              "defaultValue": 10,
              "metadata": {
                "description": "Maximum number of replicas"
              }
            },
            "cpu": {
              "type": "string",
              "defaultValue": "0.5",
              "metadata": {
                "description": "CPU cores (in cores)"
              }
            },
            "memory": {
              "type": "string",
              "defaultValue": "1.0Gi",
              "metadata": {
                "description": "Memory (in Gi)"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.App/containerApps",
              "apiVersion": "2023-05-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "managedEnvironmentId": "[resourceId('Microsoft.App/managedEnvironments', parameters('containerAppsEnvironmentName'))]",
                "configuration": {
                  "ingress": {
                    "external": "[parameters('externalIngress')]",
                    "targetPort": "[parameters('targetPort')]",
                    "transport": "auto",
                    "allowInsecure": false
                  },
                  "registries": [
                    {
                      "server": "[reference(resourceId('Microsoft.ContainerRegistry/registries', parameters('containerRegistryName')), '2023-01-01-preview').loginServer]",
                      "identity": "system-assigned"
                    }
                  ],
                  "dapr": "[if(parameters('daprEnabled'), createObject('enabled', true(), 'appId', parameters('daprAppId'), 'appPort', parameters('daprAppPort'), 'appProtocol', 'http', 'enableApiLogging', true()), null())]",
                  "secrets": "[parameters('secrets')]"
                },
                "template": {
                  "containers": [
                    {
                      "name": "[parameters('name')]",
                      "image": "[format('{0}/{1}', reference(resourceId('Microsoft.ContainerRegistry/registries', parameters('containerRegistryName')), '2023-01-01-preview').loginServer, parameters('imageName'))]",
                      "resources": {
                        "cpu": "[json(parameters('cpu'))]",
                        "memory": "[parameters('memory')]"
                      },
                      "env": "[parameters('env')]",
                      "probes": [
                        {
                          "type": "Liveness",
                          "httpGet": {
                            "path": "/health",
                            "port": "[parameters('targetPort')]",
                            "scheme": "HTTP"
                          },
                          "initialDelaySeconds": 30,
                          "periodSeconds": 30,
                          "timeoutSeconds": 5,
                          "failureThreshold": 3
                        },
                        {
                          "type": "Readiness",
                          "httpGet": {
                            "path": "/health",
                            "port": "[parameters('targetPort')]",
                            "scheme": "HTTP"
                          },
                          "initialDelaySeconds": 10,
                          "periodSeconds": 10,
                          "timeoutSeconds": 3,
                          "failureThreshold": 3
                        }
                      ]
                    }
                  ],
                  "scale": {
                    "minReplicas": "[parameters('minReplicas')]",
                    "maxReplicas": "[parameters('maxReplicas')]",
                    "rules": [
                      {
                        "name": "http-rule",
                        "http": {
                          "metadata": {
                            "concurrentRequests": "100"
                          }
                        }
                      }
                    ]
                  }
                }
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', parameters('containerRegistryName'))]",
              "name": "[guid(resourceId('Microsoft.App/containerApps', parameters('name')), resourceId('Microsoft.ContainerRegistry/registries', parameters('containerRegistryName')), 'acrpull')]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.App/containerApps', parameters('name')), '2023-05-01', 'full').identity.principalId]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7f951dda-4ed3-4680-a7ca-43fe172d538d')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.App/containerApps', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.App/containerApps', parameters('name'))]"
            },
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            },
            "uri": {
              "type": "string",
              "value": "[if(parameters('externalIngress'), format('https://{0}', reference(resourceId('Microsoft.App/containerApps', parameters('name')), '2023-05-01').configuration.ingress.fqdn), '')]"
            },
            "fqdn": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.App/containerApps', parameters('name')), '2023-05-01').configuration.ingress.fqdn]"
            }
          }
        }
      },
      "dependsOn": [
        "containerAppsEnvironment",
        "containerRegistry",
        "redis",
        "rg",
        "sqlServer"
      ]
    }
  },
  "outputs": {
    "AZURE_CONTAINER_REGISTRY_ENDPOINT": {
      "type": "string",
      "value": "[reference('containerRegistry').outputs.loginServer.value]"
    },
    "AZURE_CONTAINER_APPS_ENVIRONMENT_ID": {
      "type": "string",
      "value": "[reference('containerAppsEnvironment').outputs.id.value]"
    },
    "GATEWAY_URL": {
      "type": "string",
      "value": "[reference('gateway').outputs.uri.value]"
    },
    "SQL_SERVER_FQDN": {
      "type": "string",
      "value": "[reference('sqlServer').outputs.fqdn.value]"
    },
    "REDIS_HOST_NAME": {
      "type": "string",
      "value": "[reference('redis').outputs.hostName.value]"
    }
  }
}